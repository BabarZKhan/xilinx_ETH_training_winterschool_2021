# ----------------------------------------------------------------------
# Generate AXI BRAM Memory Stubs

foreach bank [dict keys $mem_bank_utilization DDR*] {
  dbg_puts "Generating AXI BRAM memory stub for utilized bank $bank"
  set mem_inst_name [string tolower $bank]

  # ----------------------------------------------------------------------
  # Lightweight mode for testing/development (BRAM instead of MIG)

  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  # Todo: Replace with board info data width
  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  set mem [create_bd_cell -vlnv xilinx.com:ip:axi_bram_ctrl $mem_inst_name -set_params {CONFIG.DATA_WIDTH 512}]
  dict set hierarchy memory $mem $mem
  
  apply_bd_automation -rule xilinx.com:bd_rule:bram_cntlr -config {BRAM "Auto" }  [get_bd_intf_pins $mem/BRAM_PORTA]
  apply_bd_automation -rule xilinx.com:bd_rule:bram_cntlr -config {BRAM "Auto" }  [get_bd_intf_pins $mem/BRAM_PORTB]

  foreach bmg [get_bd_cells -filter {vlnv=~xilinx.com:ip:blk_mem_gen:*}] {
    if {![dict exists $hierarchy memory $bmg]} {
      dict set hierarchy memory $bmg $bmg
    }
  }

  connect_bd_net [get_bd_ports aclk] [get_bd_pins $mem/*aclk]
  connect_bd_net [get_bd_ports aresetn] [get_bd_pins $mem/*aresetn]

  # ----------------------------------------------------------------------
  # Hooks for later use:
  dict set mem_bank_data_intf $bank [get_bd_intf_pins $mem/S_AXI]    

  # ----------------------------------------------------------------------
  # Fake MIG register interface if necessary
  if {[info exists env(SDX_HIP_USE_MIG_CTRL_STUB)]} {
    set_property -dict [list CONFIG.ECC_TYPE {0} CONFIG.USE_ECC {1}] $mem
    dict set mem_bank_ctrl_intf $bank [get_bd_intf_pins $mem/S_AXI_CTRL]        
  }

  dict set mem_bank_ddr_inst $bank $mem
  dict set mem_bank_aclk     $bank [get_bd_ports aclk]
  dict set mem_bank_aresetn  $bank [get_bd_ports aresetn]

  # ----------------------------------------------------------------------
  # Maybe: controller will default to 1024 deep for > 2G systems

#  # Override the mapped range to avoid eating all the BRAM
#  dict for {si mapped_banks} [dict get $CONFIG addr_info] {
#    dict for {mapped_bank addr_assignments} $mapped_banks {
#      lassign $addr_assignments offset range
#      dbg_puts "Reducing mapped range to 4K $mapped_bank from $range"
#      dict set CONFIG addr_info $mapped_bank $offset 4K
#    }
#  }

  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  # TODO: How to migrate this to graph flow?
  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  set sc [dict get $ict $bank]
  connect_bd_intf_net [get_bd_intf_pins $sc/M00_AXI] [dict get $mem_bank_data_intf $bank]
}