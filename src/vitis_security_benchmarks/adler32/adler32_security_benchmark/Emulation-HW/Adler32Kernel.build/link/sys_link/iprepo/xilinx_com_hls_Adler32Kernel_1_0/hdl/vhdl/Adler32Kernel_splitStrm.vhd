-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Adler32Kernel_splitStrm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inStrm_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    inStrm_empty_n : IN STD_LOGIC;
    inStrm_read : OUT STD_LOGIC;
    outStrm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    outStrm_full_n : IN STD_LOGIC;
    outStrm_write : OUT STD_LOGIC;
    n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    n_empty_n : IN STD_LOGIC;
    n_read : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of Adler32Kernel_splitStrm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inStrm_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln31_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal outStrm_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln28_reg_251 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_251_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal n_blk_n : STD_LOGIC;
    signal i_reg_81 : STD_LOGIC_VECTOR (30 downto 0);
    signal n_read_reg_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln28_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln28_reg_251_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_101_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal offset_fu_107_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal offset_reg_260 : STD_LOGIC_VECTOR (1 downto 0);
    signal offset_reg_260_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln31_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln358_fu_236_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln358_reg_269 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal p_Val2_s_fu_58 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln28_fu_92_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_125_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln34_fu_132_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln674_fu_144_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln674_1_fu_148_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln674_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln674_fu_162_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln674_1_fu_174_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_152_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln674_fu_168_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln674_fu_180_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln674_2_fu_196_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln674_2_fu_204_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln674_1_fu_188_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln674_2_fu_210_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln674_3_fu_214_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln674_fu_218_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln674_1_fu_224_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_fu_230_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((ap_start = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln28_fu_96_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_81 <= i_1_fu_101_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_81 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln28_reg_251 <= icmp_ln28_fu_96_p2;
                icmp_ln28_reg_251_pp0_iter1_reg <= icmp_ln28_reg_251;
                offset_reg_260_pp0_iter1_reg <= offset_reg_260;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln28_reg_251_pp0_iter2_reg <= icmp_ln28_reg_251_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_96_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln31_reg_265 <= icmp_ln31_fu_111_p2;
                offset_reg_260 <= offset_fu_107_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                n_read_reg_246 <= n_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_265 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Val2_s_fu_58 <= inStrm_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_reg_251_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln358_reg_269 <= trunc_ln358_fu_236_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, n_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln28_fu_96_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln28_fu_96_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln28_fu_96_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(inStrm_empty_n, outStrm_full_n, ap_enable_reg_pp0_iter1, icmp_ln31_reg_265, ap_enable_reg_pp0_iter3, icmp_ln28_reg_251_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln28_reg_251_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (outStrm_full_n = ap_const_logic_0)) or ((icmp_ln31_reg_265 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (inStrm_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(inStrm_empty_n, outStrm_full_n, ap_enable_reg_pp0_iter1, icmp_ln31_reg_265, ap_enable_reg_pp0_iter3, icmp_ln28_reg_251_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln28_reg_251_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (outStrm_full_n = ap_const_logic_0)) or ((icmp_ln31_reg_265 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (inStrm_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(inStrm_empty_n, outStrm_full_n, ap_enable_reg_pp0_iter1, icmp_ln31_reg_265, ap_enable_reg_pp0_iter3, icmp_ln28_reg_251_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln28_reg_251_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (outStrm_full_n = ap_const_logic_0)) or ((icmp_ln31_reg_265 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (inStrm_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, n_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(inStrm_empty_n, icmp_ln31_reg_265)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln31_reg_265 = ap_const_lv1_1) and (inStrm_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(outStrm_full_n, icmp_ln28_reg_251_pp0_iter2_reg)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((icmp_ln28_reg_251_pp0_iter2_reg = ap_const_lv1_1) and (outStrm_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln28_fu_96_p2)
    begin
        if ((icmp_ln28_fu_96_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (outStrm_blk_n and n_blk_n and inStrm_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);

    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    i_1_fu_101_p2 <= std_logic_vector(unsigned(i_reg_81) + unsigned(ap_const_lv31_1));
    icmp_ln28_fu_96_p2 <= "1" when (signed(zext_ln28_fu_92_p1) < signed(n_read_reg_246)) else "0";
    icmp_ln31_fu_111_p2 <= "1" when (offset_fu_107_p1 = ap_const_lv2_0) else "0";
    icmp_ln674_fu_138_p2 <= "1" when (unsigned(shl_ln_fu_125_p3) > unsigned(or_ln34_fu_132_p2)) else "0";

    inStrm_blk_n_assign_proc : process(inStrm_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln31_reg_265)
    begin
        if (((icmp_ln31_reg_265 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStrm_blk_n <= inStrm_empty_n;
        else 
            inStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inStrm_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln31_reg_265, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln31_reg_265 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStrm_read <= ap_const_logic_1;
        else 
            inStrm_read <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln674_1_fu_224_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_2),to_integer(unsigned('0' & zext_ln674_3_fu_214_p1(31-1 downto 0)))));
    lshr_ln674_fu_218_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_1_fu_188_p3),to_integer(unsigned('0' & zext_ln674_2_fu_210_p1(31-1 downto 0)))));

    n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_blk_n <= n_empty_n;
        else 
            n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    n_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_read <= ap_const_logic_1;
        else 
            n_read <= ap_const_logic_0;
        end if; 
    end process;

    offset_fu_107_p1 <= i_reg_81(2 - 1 downto 0);
    or_ln34_fu_132_p2 <= (shl_ln_fu_125_p3 or ap_const_lv9_7F);

    outStrm_blk_n_assign_proc : process(outStrm_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln28_reg_251_pp0_iter2_reg)
    begin
        if (((icmp_ln28_reg_251_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            outStrm_blk_n <= outStrm_full_n;
        else 
            outStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStrm_din <= trunc_ln358_reg_269;

    outStrm_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln28_reg_251_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln28_reg_251_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            outStrm_write <= ap_const_logic_1;
        else 
            outStrm_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_230_p2 <= (lshr_ln674_fu_218_p2 and lshr_ln674_1_fu_224_p2);
    select_ln674_1_fu_188_p3 <= 
        tmp_1_fu_152_p4 when (icmp_ln674_fu_138_p2(0) = '1') else 
        p_Val2_s_fu_58;
    select_ln674_2_fu_196_p3 <= 
        xor_ln674_fu_168_p2 when (icmp_ln674_fu_138_p2(0) = '1') else 
        zext_ln674_fu_144_p1;
    select_ln674_fu_180_p3 <= 
        sub_ln674_fu_162_p2 when (icmp_ln674_fu_138_p2(0) = '1') else 
        sub_ln674_1_fu_174_p2;
    shl_ln_fu_125_p3 <= (offset_reg_260_pp0_iter1_reg & ap_const_lv7_0);
    sub_ln674_1_fu_174_p2 <= std_logic_vector(unsigned(zext_ln674_1_fu_148_p1) - unsigned(zext_ln674_fu_144_p1));
    sub_ln674_2_fu_204_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln674_fu_180_p3));
    sub_ln674_fu_162_p2 <= std_logic_vector(unsigned(zext_ln674_fu_144_p1) - unsigned(zext_ln674_1_fu_148_p1));
    
    tmp_1_fu_152_p4_proc : process(p_Val2_s_fu_58)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_1_fu_152_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_58;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_1_fu_152_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_1_fu_152_p4_i) := p_Val2_s_fu_58(512-1-tmp_1_fu_152_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1_fu_152_p4 <= resvalue(512-1 downto 0);
    end process;

    trunc_ln358_fu_236_p1 <= p_Result_s_fu_230_p2(128 - 1 downto 0);
    xor_ln674_fu_168_p2 <= (zext_ln674_fu_144_p1 xor ap_const_lv10_1FF);
    zext_ln28_fu_92_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_81),32));
    zext_ln674_1_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln34_fu_132_p2),10));
    zext_ln674_2_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_2_fu_196_p3),512));
    zext_ln674_3_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_2_fu_204_p2),512));
    zext_ln674_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_125_p3),10));
end behav;
