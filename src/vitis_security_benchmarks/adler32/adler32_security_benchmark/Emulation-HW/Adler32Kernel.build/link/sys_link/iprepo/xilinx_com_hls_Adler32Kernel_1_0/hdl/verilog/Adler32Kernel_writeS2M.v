// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Adler32Kernel_writeS2M (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        inStrm_dout,
        inStrm_empty_n,
        inStrm_read,
        endStrm_dout,
        endStrm_empty_n,
        endStrm_read,
        m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY,
        m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY,
        m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST,
        m_axi_gmem3_WID,
        m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY,
        m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID,
        m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA,
        m_axi_gmem3_RLAST,
        m_axi_gmem3_RID,
        m_axi_gmem3_RUSER,
        m_axi_gmem3_RRESP,
        m_axi_gmem3_BVALID,
        m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP,
        m_axi_gmem3_BID,
        m_axi_gmem3_BUSER,
        n_dout,
        n_empty_n,
        n_read,
        adler32Result_dout,
        adler32Result_empty_n,
        adler32Result_read,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_pp0_stage0 = 39'd4;
parameter    ap_ST_fsm_state6 = 39'd8;
parameter    ap_ST_fsm_state7 = 39'd16;
parameter    ap_ST_fsm_state8 = 39'd32;
parameter    ap_ST_fsm_state9 = 39'd64;
parameter    ap_ST_fsm_state10 = 39'd128;
parameter    ap_ST_fsm_state11 = 39'd256;
parameter    ap_ST_fsm_state12 = 39'd512;
parameter    ap_ST_fsm_state13 = 39'd1024;
parameter    ap_ST_fsm_state14 = 39'd2048;
parameter    ap_ST_fsm_state15 = 39'd4096;
parameter    ap_ST_fsm_state16 = 39'd8192;
parameter    ap_ST_fsm_state17 = 39'd16384;
parameter    ap_ST_fsm_state18 = 39'd32768;
parameter    ap_ST_fsm_state19 = 39'd65536;
parameter    ap_ST_fsm_state20 = 39'd131072;
parameter    ap_ST_fsm_state21 = 39'd262144;
parameter    ap_ST_fsm_state22 = 39'd524288;
parameter    ap_ST_fsm_state23 = 39'd1048576;
parameter    ap_ST_fsm_state24 = 39'd2097152;
parameter    ap_ST_fsm_state25 = 39'd4194304;
parameter    ap_ST_fsm_state26 = 39'd8388608;
parameter    ap_ST_fsm_state27 = 39'd16777216;
parameter    ap_ST_fsm_state28 = 39'd33554432;
parameter    ap_ST_fsm_state29 = 39'd67108864;
parameter    ap_ST_fsm_state30 = 39'd134217728;
parameter    ap_ST_fsm_state31 = 39'd268435456;
parameter    ap_ST_fsm_state32 = 39'd536870912;
parameter    ap_ST_fsm_state33 = 39'd1073741824;
parameter    ap_ST_fsm_state34 = 39'd2147483648;
parameter    ap_ST_fsm_state35 = 39'd4294967296;
parameter    ap_ST_fsm_state36 = 39'd8589934592;
parameter    ap_ST_fsm_state37 = 39'd17179869184;
parameter    ap_ST_fsm_state38 = 39'd34359738368;
parameter    ap_ST_fsm_state39 = 39'd68719476736;
parameter    ap_ST_fsm_state40 = 39'd137438953472;
parameter    ap_ST_fsm_state41 = 39'd274877906944;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] inStrm_dout;
input   inStrm_empty_n;
output   inStrm_read;
input  [0:0] endStrm_dout;
input   endStrm_empty_n;
output   endStrm_read;
output   m_axi_gmem3_AWVALID;
input   m_axi_gmem3_AWREADY;
output  [63:0] m_axi_gmem3_AWADDR;
output  [0:0] m_axi_gmem3_AWID;
output  [31:0] m_axi_gmem3_AWLEN;
output  [2:0] m_axi_gmem3_AWSIZE;
output  [1:0] m_axi_gmem3_AWBURST;
output  [1:0] m_axi_gmem3_AWLOCK;
output  [3:0] m_axi_gmem3_AWCACHE;
output  [2:0] m_axi_gmem3_AWPROT;
output  [3:0] m_axi_gmem3_AWQOS;
output  [3:0] m_axi_gmem3_AWREGION;
output  [0:0] m_axi_gmem3_AWUSER;
output   m_axi_gmem3_WVALID;
input   m_axi_gmem3_WREADY;
output  [31:0] m_axi_gmem3_WDATA;
output  [3:0] m_axi_gmem3_WSTRB;
output   m_axi_gmem3_WLAST;
output  [0:0] m_axi_gmem3_WID;
output  [0:0] m_axi_gmem3_WUSER;
output   m_axi_gmem3_ARVALID;
input   m_axi_gmem3_ARREADY;
output  [63:0] m_axi_gmem3_ARADDR;
output  [0:0] m_axi_gmem3_ARID;
output  [31:0] m_axi_gmem3_ARLEN;
output  [2:0] m_axi_gmem3_ARSIZE;
output  [1:0] m_axi_gmem3_ARBURST;
output  [1:0] m_axi_gmem3_ARLOCK;
output  [3:0] m_axi_gmem3_ARCACHE;
output  [2:0] m_axi_gmem3_ARPROT;
output  [3:0] m_axi_gmem3_ARQOS;
output  [3:0] m_axi_gmem3_ARREGION;
output  [0:0] m_axi_gmem3_ARUSER;
input   m_axi_gmem3_RVALID;
output   m_axi_gmem3_RREADY;
input  [31:0] m_axi_gmem3_RDATA;
input   m_axi_gmem3_RLAST;
input  [0:0] m_axi_gmem3_RID;
input  [0:0] m_axi_gmem3_RUSER;
input  [1:0] m_axi_gmem3_RRESP;
input   m_axi_gmem3_BVALID;
output   m_axi_gmem3_BREADY;
input  [1:0] m_axi_gmem3_BRESP;
input  [0:0] m_axi_gmem3_BID;
input  [0:0] m_axi_gmem3_BUSER;
input  [31:0] n_dout;
input   n_empty_n;
output   n_read;
input  [63:0] adler32Result_dout;
input   adler32Result_empty_n;
output   adler32Result_read;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inStrm_read;
reg endStrm_read;
reg m_axi_gmem3_AWVALID;
reg m_axi_gmem3_WVALID;
reg m_axi_gmem3_BREADY;
reg n_read;
reg adler32Result_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    inStrm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln54_1_reg_183;
reg    endStrm_blk_n;
wire    ap_CS_fsm_state41;
reg    gmem3_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    gmem3_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln54_1_reg_183_pp0_iter1_reg;
reg    gmem3_blk_n_B;
reg   [0:0] icmp_ln54_reg_168;
reg    n_blk_n;
reg    adler32Result_blk_n;
reg   [30:0] i_reg_111;
reg   [31:0] n_read_reg_162;
reg    ap_block_state1;
wire   [0:0] icmp_ln54_fu_122_p2;
reg   [63:0] gmem3_addr_reg_172;
wire   [30:0] trunc_ln54_fu_148_p1;
reg   [30:0] trunc_ln54_reg_178;
wire   [0:0] icmp_ln54_1_fu_151_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] add_ln54_fu_156_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] inStrm_read_reg_192;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire  signed [63:0] sext_ln54_fu_138_p1;
reg    ap_block_state41;
reg    ap_block_pp0_stage0_01001;
wire   [61:0] trunc_ln54_1_fu_128_p4;
reg   [38:0] ap_NS_fsm;
wire    ap_ext_blocking_cur_n;
wire    ap_int_blocking_cur_n;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 39'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((endStrm_empty_n == 1'b0) | ((icmp_ln54_reg_168 == 1'd1) & (m_axi_gmem3_BVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state41))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((m_axi_gmem3_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((m_axi_gmem3_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem3_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_111 <= 31'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_1_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_111 <= add_ln54_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == adler32Result_empty_n) | (n_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln54_fu_122_p2 == 1'd1))) begin
        gmem3_addr_reg_172 <= sext_ln54_fu_138_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln54_1_reg_183 <= icmp_ln54_1_fu_151_p2;
        icmp_ln54_1_reg_183_pp0_iter1_reg <= icmp_ln54_1_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == adler32Result_empty_n) | (n_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln54_reg_168 <= icmp_ln54_fu_122_p2;
        n_read_reg_162 <= n_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_1_reg_183 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inStrm_read_reg_192 <= inStrm_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem3_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln54_reg_178 <= trunc_ln54_fu_148_p1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        adler32Result_blk_n = adler32Result_empty_n;
    end else begin
        adler32Result_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == adler32Result_empty_n) | (n_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        adler32Result_read = 1'b1;
    end else begin
        adler32Result_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln54_1_fu_151_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((endStrm_empty_n == 1'b0) | ((icmp_ln54_reg_168 == 1'd1) & (m_axi_gmem3_BVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state41))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((endStrm_empty_n == 1'b0) | ((icmp_ln54_reg_168 == 1'd1) & (m_axi_gmem3_BVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state41))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_1_reg_183 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        endStrm_blk_n = endStrm_empty_n;
    end else begin
        endStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((endStrm_empty_n == 1'b0) | ((icmp_ln54_reg_168 == 1'd1) & (m_axi_gmem3_BVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state41)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_1_reg_183 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        endStrm_read = 1'b1;
    end else begin
        endStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem3_blk_n_AW = m_axi_gmem3_AWREADY;
    end else begin
        gmem3_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (icmp_ln54_reg_168 == 1'd1))) begin
        gmem3_blk_n_B = m_axi_gmem3_BVALID;
    end else begin
        gmem3_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln54_1_reg_183_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem3_blk_n_W = m_axi_gmem3_WREADY;
    end else begin
        gmem3_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_1_reg_183 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        inStrm_blk_n = inStrm_empty_n;
    end else begin
        inStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_1_reg_183 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        inStrm_read = 1'b1;
    end else begin
        inStrm_read = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem3_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem3_AWVALID = 1'b1;
    end else begin
        m_axi_gmem3_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((endStrm_empty_n == 1'b0) | ((icmp_ln54_reg_168 == 1'd1) & (m_axi_gmem3_BVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state41) & (icmp_ln54_reg_168 == 1'd1))) begin
        m_axi_gmem3_BREADY = 1'b1;
    end else begin
        m_axi_gmem3_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_1_reg_183_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem3_WVALID = 1'b1;
    end else begin
        m_axi_gmem3_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_blk_n = n_empty_n;
    end else begin
        n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == adler32Result_empty_n) | (n_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_read = 1'b1;
    end else begin
        n_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == adler32Result_empty_n) | (n_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln54_fu_122_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == adler32Result_empty_n) | (n_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln54_fu_122_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_gmem3_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_1_fu_151_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_1_fu_151_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if ((~((endStrm_empty_n == 1'b0) | ((icmp_ln54_reg_168 == 1'd1) & (m_axi_gmem3_BVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_156_p2 = (i_reg_111 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd38];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((inStrm_empty_n == 1'b0) & (icmp_ln54_1_reg_183 == 1'd0)) | ((endStrm_empty_n == 1'b0) & (icmp_ln54_1_reg_183 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((inStrm_empty_n == 1'b0) & (icmp_ln54_1_reg_183 == 1'd0)) | ((endStrm_empty_n == 1'b0) & (icmp_ln54_1_reg_183 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((inStrm_empty_n == 1'b0) & (icmp_ln54_1_reg_183 == 1'd0)) | ((endStrm_empty_n == 1'b0) & (icmp_ln54_1_reg_183 == 1'd0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (1'b0 == adler32Result_empty_n) | (n_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state41 = ((endStrm_empty_n == 1'b0) | ((icmp_ln54_reg_168 == 1'd1) & (m_axi_gmem3_BVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((inStrm_empty_n == 1'b0) & (icmp_ln54_1_reg_183 == 1'd0)) | ((endStrm_empty_n == 1'b0) & (icmp_ln54_1_reg_183 == 1'd0)));
end

always @ (*) begin
    ap_block_state5_io = ((m_axi_gmem3_WREADY == 1'b0) & (icmp_ln54_1_reg_183_pp0_iter1_reg == 1'd0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_cur_n = (gmem3_blk_n_W & gmem3_blk_n_B & gmem3_blk_n_AW);

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_cur_n = (n_blk_n & inStrm_blk_n & endStrm_blk_n & adler32Result_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign icmp_ln54_1_fu_151_p2 = ((i_reg_111 == trunc_ln54_reg_178) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_122_p2 = (($signed(n_dout) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign m_axi_gmem3_ARADDR = 64'd0;

assign m_axi_gmem3_ARBURST = 2'd0;

assign m_axi_gmem3_ARCACHE = 4'd0;

assign m_axi_gmem3_ARID = 1'd0;

assign m_axi_gmem3_ARLEN = 32'd0;

assign m_axi_gmem3_ARLOCK = 2'd0;

assign m_axi_gmem3_ARPROT = 3'd0;

assign m_axi_gmem3_ARQOS = 4'd0;

assign m_axi_gmem3_ARREGION = 4'd0;

assign m_axi_gmem3_ARSIZE = 3'd0;

assign m_axi_gmem3_ARUSER = 1'd0;

assign m_axi_gmem3_ARVALID = 1'b0;

assign m_axi_gmem3_AWADDR = gmem3_addr_reg_172;

assign m_axi_gmem3_AWBURST = 2'd0;

assign m_axi_gmem3_AWCACHE = 4'd0;

assign m_axi_gmem3_AWID = 1'd0;

assign m_axi_gmem3_AWLEN = n_read_reg_162;

assign m_axi_gmem3_AWLOCK = 2'd0;

assign m_axi_gmem3_AWPROT = 3'd0;

assign m_axi_gmem3_AWQOS = 4'd0;

assign m_axi_gmem3_AWREGION = 4'd0;

assign m_axi_gmem3_AWSIZE = 3'd0;

assign m_axi_gmem3_AWUSER = 1'd0;

assign m_axi_gmem3_RREADY = 1'b0;

assign m_axi_gmem3_WDATA = inStrm_read_reg_192;

assign m_axi_gmem3_WID = 1'd0;

assign m_axi_gmem3_WLAST = 1'b0;

assign m_axi_gmem3_WSTRB = 4'd15;

assign m_axi_gmem3_WUSER = 1'd0;

assign sext_ln54_fu_138_p1 = $signed(trunc_ln54_1_fu_128_p4);

assign trunc_ln54_1_fu_128_p4 = {{adler32Result_dout[63:2]}};

assign trunc_ln54_fu_148_p1 = n_read_reg_162[30:0];

endmodule //Adler32Kernel_writeS2M
