-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Adler32Kernel_writeS2M is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inStrm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    inStrm_empty_n : IN STD_LOGIC;
    inStrm_read : OUT STD_LOGIC;
    endStrm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    endStrm_empty_n : IN STD_LOGIC;
    endStrm_read : OUT STD_LOGIC;
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    n_empty_n : IN STD_LOGIC;
    n_read : OUT STD_LOGIC;
    adler32Result_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    adler32Result_empty_n : IN STD_LOGIC;
    adler32Result_read : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of Adler32Kernel_writeS2M is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inStrm_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln54_1_reg_183 : STD_LOGIC_VECTOR (0 downto 0);
    signal endStrm_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal gmem3_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem3_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln54_1_reg_183_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_blk_n_B : STD_LOGIC;
    signal icmp_ln54_reg_168 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_blk_n : STD_LOGIC;
    signal adler32Result_blk_n : STD_LOGIC;
    signal i_reg_111 : STD_LOGIC_VECTOR (30 downto 0);
    signal n_read_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln54_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_addr_reg_172 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln54_fu_148_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln54_reg_178 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln54_1_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln54_fu_156_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal inStrm_read_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal sext_ln54_fu_138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state41 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln54_1_fu_128_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((endStrm_empty_n = ap_const_logic_0) or ((icmp_ln54_reg_168 = ap_const_lv1_1) and (m_axi_gmem3_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((m_axi_gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((m_axi_gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_111 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_1_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_111 <= add_ln54_fu_156_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_empty_n) or (n_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln54_fu_122_p2 = ap_const_lv1_1))) then
                gmem3_addr_reg_172 <= sext_ln54_fu_138_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln54_1_reg_183 <= icmp_ln54_1_fu_151_p2;
                icmp_ln54_1_reg_183_pp0_iter1_reg <= icmp_ln54_1_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_empty_n) or (n_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln54_reg_168 <= icmp_ln54_fu_122_p2;
                n_read_reg_162 <= n_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_1_reg_183 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                inStrm_read_reg_192 <= inStrm_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln54_reg_178 <= trunc_ln54_fu_148_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, endStrm_empty_n, m_axi_gmem3_AWREADY, m_axi_gmem3_BVALID, n_empty_n, adler32Result_empty_n, ap_enable_reg_pp0_iter1, ap_CS_fsm_state41, ap_CS_fsm_state2, ap_enable_reg_pp0_iter2, icmp_ln54_reg_168, icmp_ln54_fu_122_p2, icmp_ln54_1_fu_151_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_empty_n) or (n_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln54_fu_122_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_empty_n) or (n_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln54_fu_122_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_1_fu_151_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_1_fu_151_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if ((not(((endStrm_empty_n = ap_const_logic_0) or ((icmp_ln54_reg_168 = ap_const_lv1_1) and (m_axi_gmem3_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln54_fu_156_p2 <= std_logic_vector(unsigned(i_reg_111) + unsigned(ap_const_lv31_1));

    adler32Result_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, adler32Result_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            adler32Result_blk_n <= adler32Result_empty_n;
        else 
            adler32Result_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    adler32Result_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n, adler32Result_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_empty_n) or (n_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            adler32Result_read <= ap_const_logic_1;
        else 
            adler32Result_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state41 <= ap_CS_fsm(38);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(inStrm_empty_n, endStrm_empty_n, ap_enable_reg_pp0_iter1, icmp_ln54_1_reg_183)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((inStrm_empty_n = ap_const_logic_0) and (icmp_ln54_1_reg_183 = ap_const_lv1_0)) or ((endStrm_empty_n = ap_const_logic_0) and (icmp_ln54_1_reg_183 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(inStrm_empty_n, endStrm_empty_n, ap_enable_reg_pp0_iter1, icmp_ln54_1_reg_183, ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((inStrm_empty_n = ap_const_logic_0) and (icmp_ln54_1_reg_183 = ap_const_lv1_0)) or ((endStrm_empty_n = ap_const_logic_0) and (icmp_ln54_1_reg_183 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(inStrm_empty_n, endStrm_empty_n, ap_enable_reg_pp0_iter1, icmp_ln54_1_reg_183, ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((inStrm_empty_n = ap_const_logic_0) and (icmp_ln54_1_reg_183 = ap_const_lv1_0)) or ((endStrm_empty_n = ap_const_logic_0) and (icmp_ln54_1_reg_183 = ap_const_lv1_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, n_empty_n, adler32Result_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_empty_n) or (n_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state41_assign_proc : process(endStrm_empty_n, m_axi_gmem3_BVALID, icmp_ln54_reg_168)
    begin
                ap_block_state41 <= ((endStrm_empty_n = ap_const_logic_0) or ((icmp_ln54_reg_168 = ap_const_lv1_1) and (m_axi_gmem3_BVALID = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(inStrm_empty_n, endStrm_empty_n, icmp_ln54_1_reg_183)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((inStrm_empty_n = ap_const_logic_0) and (icmp_ln54_1_reg_183 = ap_const_lv1_0)) or ((endStrm_empty_n = ap_const_logic_0) and (icmp_ln54_1_reg_183 = ap_const_lv1_0)));
    end process;


    ap_block_state5_io_assign_proc : process(m_axi_gmem3_WREADY, icmp_ln54_1_reg_183_pp0_iter1_reg)
    begin
                ap_block_state5_io <= ((m_axi_gmem3_WREADY = ap_const_logic_0) and (icmp_ln54_1_reg_183_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln54_1_fu_151_p2)
    begin
        if ((icmp_ln54_1_fu_151_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, endStrm_empty_n, m_axi_gmem3_BVALID, ap_CS_fsm_state41, icmp_ln54_reg_168)
    begin
        if ((not(((endStrm_empty_n = ap_const_logic_0) or ((icmp_ln54_reg_168 = ap_const_lv1_1) and (m_axi_gmem3_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_ext_blocking_cur_n <= (gmem3_blk_n_W and gmem3_blk_n_B and gmem3_blk_n_AW);
    ap_ext_blocking_n <= (ap_ext_blocking_cur_n and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (n_blk_n and inStrm_blk_n and endStrm_blk_n and adler32Result_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);

    ap_ready_assign_proc : process(endStrm_empty_n, m_axi_gmem3_BVALID, ap_CS_fsm_state41, icmp_ln54_reg_168)
    begin
        if ((not(((endStrm_empty_n = ap_const_logic_0) or ((icmp_ln54_reg_168 = ap_const_lv1_1) and (m_axi_gmem3_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    endStrm_blk_n_assign_proc : process(endStrm_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln54_1_reg_183, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_1_reg_183 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            endStrm_blk_n <= endStrm_empty_n;
        else 
            endStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    endStrm_read_assign_proc : process(endStrm_empty_n, m_axi_gmem3_BVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln54_1_reg_183, ap_CS_fsm_state41, icmp_ln54_reg_168, ap_block_pp0_stage0_11001)
    begin
        if (((not(((endStrm_empty_n = ap_const_logic_0) or ((icmp_ln54_reg_168 = ap_const_lv1_1) and (m_axi_gmem3_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_1_reg_183 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            endStrm_read <= ap_const_logic_1;
        else 
            endStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_blk_n_AW_assign_proc : process(m_axi_gmem3_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem3_blk_n_AW <= m_axi_gmem3_AWREADY;
        else 
            gmem3_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem3_blk_n_B_assign_proc : process(m_axi_gmem3_BVALID, ap_CS_fsm_state41, icmp_ln54_reg_168)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln54_reg_168 = ap_const_lv1_1))) then 
            gmem3_blk_n_B <= m_axi_gmem3_BVALID;
        else 
            gmem3_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem3_blk_n_W_assign_proc : process(m_axi_gmem3_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln54_1_reg_183_pp0_iter1_reg)
    begin
        if (((icmp_ln54_1_reg_183_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem3_blk_n_W <= m_axi_gmem3_WREADY;
        else 
            gmem3_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln54_1_fu_151_p2 <= "1" when (i_reg_111 = trunc_ln54_reg_178) else "0";
    icmp_ln54_fu_122_p2 <= "1" when (signed(n_dout) > signed(ap_const_lv32_0)) else "0";

    inStrm_blk_n_assign_proc : process(inStrm_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln54_1_reg_183)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_1_reg_183 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            inStrm_blk_n <= inStrm_empty_n;
        else 
            inStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inStrm_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln54_1_reg_183, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_1_reg_183 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            inStrm_read <= ap_const_logic_1;
        else 
            inStrm_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem3_ARADDR <= ap_const_lv64_0;
    m_axi_gmem3_ARBURST <= ap_const_lv2_0;
    m_axi_gmem3_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem3_ARID <= ap_const_lv1_0;
    m_axi_gmem3_ARLEN <= ap_const_lv32_0;
    m_axi_gmem3_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem3_ARPROT <= ap_const_lv3_0;
    m_axi_gmem3_ARQOS <= ap_const_lv4_0;
    m_axi_gmem3_ARREGION <= ap_const_lv4_0;
    m_axi_gmem3_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem3_ARUSER <= ap_const_lv1_0;
    m_axi_gmem3_ARVALID <= ap_const_logic_0;
    m_axi_gmem3_AWADDR <= gmem3_addr_reg_172;
    m_axi_gmem3_AWBURST <= ap_const_lv2_0;
    m_axi_gmem3_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem3_AWID <= ap_const_lv1_0;
    m_axi_gmem3_AWLEN <= n_read_reg_162;
    m_axi_gmem3_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem3_AWPROT <= ap_const_lv3_0;
    m_axi_gmem3_AWQOS <= ap_const_lv4_0;
    m_axi_gmem3_AWREGION <= ap_const_lv4_0;
    m_axi_gmem3_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem3_AWUSER <= ap_const_lv1_0;

    m_axi_gmem3_AWVALID_assign_proc : process(m_axi_gmem3_AWREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem3_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem3_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem3_BREADY_assign_proc : process(endStrm_empty_n, m_axi_gmem3_BVALID, ap_CS_fsm_state41, icmp_ln54_reg_168)
    begin
        if ((not(((endStrm_empty_n = ap_const_logic_0) or ((icmp_ln54_reg_168 = ap_const_lv1_1) and (m_axi_gmem3_BVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln54_reg_168 = ap_const_lv1_1))) then 
            m_axi_gmem3_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem3_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem3_RREADY <= ap_const_logic_0;
    m_axi_gmem3_WDATA <= inStrm_read_reg_192;
    m_axi_gmem3_WID <= ap_const_lv1_0;
    m_axi_gmem3_WLAST <= ap_const_logic_0;
    m_axi_gmem3_WSTRB <= ap_const_lv4_F;
    m_axi_gmem3_WUSER <= ap_const_lv1_0;

    m_axi_gmem3_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln54_1_reg_183_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln54_1_reg_183_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem3_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem3_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_blk_n <= n_empty_n;
        else 
            n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    n_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n, adler32Result_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_empty_n) or (n_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_read <= ap_const_logic_1;
        else 
            n_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln54_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln54_1_fu_128_p4),64));

    trunc_ln54_1_fu_128_p4 <= adler32Result_dout(63 downto 2);
    trunc_ln54_fu_148_p1 <= n_read_reg_162(31 - 1 downto 0);
end behav;
