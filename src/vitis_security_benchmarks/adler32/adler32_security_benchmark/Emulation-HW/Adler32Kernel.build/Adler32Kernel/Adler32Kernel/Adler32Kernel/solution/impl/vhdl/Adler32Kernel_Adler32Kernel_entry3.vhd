-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Adler32Kernel_Adler32Kernel_entry3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    num : IN STD_LOGIC_VECTOR (31 downto 0);
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    len : IN STD_LOGIC_VECTOR (63 downto 0);
    adler : IN STD_LOGIC_VECTOR (63 downto 0);
    inData : IN STD_LOGIC_VECTOR (63 downto 0);
    adler32Result : IN STD_LOGIC_VECTOR (63 downto 0);
    num_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_out_full_n : IN STD_LOGIC;
    num_out_write : OUT STD_LOGIC;
    num_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_out1_full_n : IN STD_LOGIC;
    num_out1_write : OUT STD_LOGIC;
    size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_out_full_n : IN STD_LOGIC;
    size_out_write : OUT STD_LOGIC;
    len_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    len_out_full_n : IN STD_LOGIC;
    len_out_write : OUT STD_LOGIC;
    adler_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    adler_out_full_n : IN STD_LOGIC;
    adler_out_write : OUT STD_LOGIC;
    inData_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    inData_out_full_n : IN STD_LOGIC;
    inData_out_write : OUT STD_LOGIC;
    adler32Result_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    adler32Result_out_full_n : IN STD_LOGIC;
    adler32Result_out_write : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of Adler32Kernel_Adler32Kernel_entry3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal num_out_blk_n : STD_LOGIC;
    signal num_out1_blk_n : STD_LOGIC;
    signal size_out_blk_n : STD_LOGIC;
    signal len_out_blk_n : STD_LOGIC;
    signal adler_out_blk_n : STD_LOGIC;
    signal inData_out_blk_n : STD_LOGIC;
    signal adler32Result_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_int_blocking_cur_n : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (inData_out_full_n = ap_const_logic_0) or (len_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (num_out1_full_n = ap_const_logic_0) or (num_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_out_full_n) or (ap_const_logic_0 = adler_out_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, num_out_full_n, num_out1_full_n, size_out_full_n, len_out_full_n, adler_out_full_n, inData_out_full_n, adler32Result_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    adler32Result_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, adler32Result_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            adler32Result_out_blk_n <= adler32Result_out_full_n;
        else 
            adler32Result_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    adler32Result_out_din <= adler32Result;

    adler32Result_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, num_out_full_n, num_out1_full_n, size_out_full_n, len_out_full_n, adler_out_full_n, inData_out_full_n, adler32Result_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (inData_out_full_n = ap_const_logic_0) or (len_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (num_out1_full_n = ap_const_logic_0) or (num_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_out_full_n) or (ap_const_logic_0 = adler_out_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            adler32Result_out_write <= ap_const_logic_1;
        else 
            adler32Result_out_write <= ap_const_logic_0;
        end if; 
    end process;


    adler_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, adler_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            adler_out_blk_n <= adler_out_full_n;
        else 
            adler_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    adler_out_din <= adler;

    adler_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, num_out_full_n, num_out1_full_n, size_out_full_n, len_out_full_n, adler_out_full_n, inData_out_full_n, adler32Result_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (inData_out_full_n = ap_const_logic_0) or (len_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (num_out1_full_n = ap_const_logic_0) or (num_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_out_full_n) or (ap_const_logic_0 = adler_out_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            adler_out_write <= ap_const_logic_1;
        else 
            adler_out_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, num_out_full_n, num_out1_full_n, size_out_full_n, len_out_full_n, adler_out_full_n, inData_out_full_n, adler32Result_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (inData_out_full_n = ap_const_logic_0) or (len_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (num_out1_full_n = ap_const_logic_0) or (num_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_out_full_n) or (ap_const_logic_0 = adler_out_full_n) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, num_out_full_n, num_out1_full_n, size_out_full_n, len_out_full_n, adler_out_full_n, inData_out_full_n, adler32Result_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (inData_out_full_n = ap_const_logic_0) or (len_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (num_out1_full_n = ap_const_logic_0) or (num_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_out_full_n) or (ap_const_logic_0 = adler_out_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (size_out_blk_n and num_out_blk_n and num_out1_blk_n and len_out_blk_n and inData_out_blk_n and adler_out_blk_n and adler32Result_out_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);
    ap_ready <= internal_ap_ready;
    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    inData_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, inData_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inData_out_blk_n <= inData_out_full_n;
        else 
            inData_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inData_out_din <= inData;

    inData_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, num_out_full_n, num_out1_full_n, size_out_full_n, len_out_full_n, adler_out_full_n, inData_out_full_n, adler32Result_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (inData_out_full_n = ap_const_logic_0) or (len_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (num_out1_full_n = ap_const_logic_0) or (num_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_out_full_n) or (ap_const_logic_0 = adler_out_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inData_out_write <= ap_const_logic_1;
        else 
            inData_out_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, num_out_full_n, num_out1_full_n, size_out_full_n, len_out_full_n, adler_out_full_n, inData_out_full_n, adler32Result_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (inData_out_full_n = ap_const_logic_0) or (len_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (num_out1_full_n = ap_const_logic_0) or (num_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_out_full_n) or (ap_const_logic_0 = adler_out_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    len_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_out_blk_n <= len_out_full_n;
        else 
            len_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    len_out_din <= len;

    len_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, num_out_full_n, num_out1_full_n, size_out_full_n, len_out_full_n, adler_out_full_n, inData_out_full_n, adler32Result_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (inData_out_full_n = ap_const_logic_0) or (len_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (num_out1_full_n = ap_const_logic_0) or (num_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_out_full_n) or (ap_const_logic_0 = adler_out_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_out_write <= ap_const_logic_1;
        else 
            len_out_write <= ap_const_logic_0;
        end if; 
    end process;


    num_out1_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, num_out1_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_out1_blk_n <= num_out1_full_n;
        else 
            num_out1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    num_out1_din <= num;

    num_out1_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, num_out_full_n, num_out1_full_n, size_out_full_n, len_out_full_n, adler_out_full_n, inData_out_full_n, adler32Result_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (inData_out_full_n = ap_const_logic_0) or (len_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (num_out1_full_n = ap_const_logic_0) or (num_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_out_full_n) or (ap_const_logic_0 = adler_out_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_out1_write <= ap_const_logic_1;
        else 
            num_out1_write <= ap_const_logic_0;
        end if; 
    end process;


    num_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, num_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_out_blk_n <= num_out_full_n;
        else 
            num_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    num_out_din <= num;

    num_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, num_out_full_n, num_out1_full_n, size_out_full_n, len_out_full_n, adler_out_full_n, inData_out_full_n, adler32Result_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (inData_out_full_n = ap_const_logic_0) or (len_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (num_out1_full_n = ap_const_logic_0) or (num_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_out_full_n) or (ap_const_logic_0 = adler_out_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_out_write <= ap_const_logic_1;
        else 
            num_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    size_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, size_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_out_blk_n <= size_out_full_n;
        else 
            size_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_out_din <= size;

    size_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, num_out_full_n, num_out1_full_n, size_out_full_n, len_out_full_n, adler_out_full_n, inData_out_full_n, adler32Result_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (inData_out_full_n = ap_const_logic_0) or (len_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (num_out1_full_n = ap_const_logic_0) or (num_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = adler32Result_out_full_n) or (ap_const_logic_0 = adler_out_full_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_out_write <= ap_const_logic_1;
        else 
            size_out_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
