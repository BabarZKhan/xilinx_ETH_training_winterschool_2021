// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Adler32Kernel_Adler32Kernel,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=42.940000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=55,HLS_SYN_DSP=0,HLS_SYN_FF=9960,HLS_SYN_LUT=15654,HLS_VERSION=2020_1}" *)

module Adler32Kernel (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        event_done,
        interrupt,
        event_start,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY,
        m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY,
        m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST,
        m_axi_gmem3_WID,
        m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY,
        m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID,
        m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA,
        m_axi_gmem3_RLAST,
        m_axi_gmem3_RID,
        m_axi_gmem3_RUSER,
        m_axi_gmem3_RRESP,
        m_axi_gmem3_BVALID,
        m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP,
        m_axi_gmem3_BID,
        m_axi_gmem3_BUSER,
        stall_start_ext,
        stall_done_ext,
        stall_start_str,
        stall_done_str,
        stall_start_int,
        stall_done_int
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM0_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM0_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_USER_VALUE = 0;
parameter    C_M_AXI_GMEM0_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM0_CACHE_VALUE = 3;
parameter    C_M_AXI_ID_WIDTH = 1;
parameter    C_M_AXI_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM1_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_USER_VALUE = 0;
parameter    C_M_AXI_GMEM1_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM1_CACHE_VALUE = 3;
parameter    C_M_AXI_GMEM2_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM2_DATA_WIDTH = 512;
parameter    C_M_AXI_GMEM2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_USER_VALUE = 0;
parameter    C_M_AXI_GMEM2_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM2_CACHE_VALUE = 3;
parameter    C_M_AXI_GMEM3_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM3_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM3_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM3_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM3_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM3_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM3_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM3_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM3_USER_VALUE = 0;
parameter    C_M_AXI_GMEM3_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM3_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM1_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM2_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_GMEM3_WSTRB_WIDTH = (32 / 8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
output   event_done;
output   interrupt;
output   event_start;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_AWADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_AWID;
output  [7:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [C_M_AXI_GMEM0_AWUSER_WIDTH - 1:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_WDATA;
output  [C_M_AXI_GMEM0_WSTRB_WIDTH - 1:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_WID;
output  [C_M_AXI_GMEM0_WUSER_WIDTH - 1:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_ARADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_ARID;
output  [7:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [C_M_AXI_GMEM0_ARUSER_WIDTH - 1:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_RID;
input  [C_M_AXI_GMEM0_RUSER_WIDTH - 1:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_BID;
input  [C_M_AXI_GMEM0_BUSER_WIDTH - 1:0] m_axi_gmem0_BUSER;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_AWADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_AWID;
output  [7:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [C_M_AXI_GMEM1_AWUSER_WIDTH - 1:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_WDATA;
output  [C_M_AXI_GMEM1_WSTRB_WIDTH - 1:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_WID;
output  [C_M_AXI_GMEM1_WUSER_WIDTH - 1:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_ARADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_ARID;
output  [7:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [C_M_AXI_GMEM1_ARUSER_WIDTH - 1:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_RID;
input  [C_M_AXI_GMEM1_RUSER_WIDTH - 1:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_BID;
input  [C_M_AXI_GMEM1_BUSER_WIDTH - 1:0] m_axi_gmem1_BUSER;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_AWADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_AWID;
output  [7:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [C_M_AXI_GMEM2_AWUSER_WIDTH - 1:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_WDATA;
output  [C_M_AXI_GMEM2_WSTRB_WIDTH - 1:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_WID;
output  [C_M_AXI_GMEM2_WUSER_WIDTH - 1:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_ARADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_ARID;
output  [7:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [C_M_AXI_GMEM2_ARUSER_WIDTH - 1:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_RID;
input  [C_M_AXI_GMEM2_RUSER_WIDTH - 1:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_BID;
input  [C_M_AXI_GMEM2_BUSER_WIDTH - 1:0] m_axi_gmem2_BUSER;
output   m_axi_gmem3_AWVALID;
input   m_axi_gmem3_AWREADY;
output  [C_M_AXI_GMEM3_ADDR_WIDTH - 1:0] m_axi_gmem3_AWADDR;
output  [C_M_AXI_GMEM3_ID_WIDTH - 1:0] m_axi_gmem3_AWID;
output  [7:0] m_axi_gmem3_AWLEN;
output  [2:0] m_axi_gmem3_AWSIZE;
output  [1:0] m_axi_gmem3_AWBURST;
output  [1:0] m_axi_gmem3_AWLOCK;
output  [3:0] m_axi_gmem3_AWCACHE;
output  [2:0] m_axi_gmem3_AWPROT;
output  [3:0] m_axi_gmem3_AWQOS;
output  [3:0] m_axi_gmem3_AWREGION;
output  [C_M_AXI_GMEM3_AWUSER_WIDTH - 1:0] m_axi_gmem3_AWUSER;
output   m_axi_gmem3_WVALID;
input   m_axi_gmem3_WREADY;
output  [C_M_AXI_GMEM3_DATA_WIDTH - 1:0] m_axi_gmem3_WDATA;
output  [C_M_AXI_GMEM3_WSTRB_WIDTH - 1:0] m_axi_gmem3_WSTRB;
output   m_axi_gmem3_WLAST;
output  [C_M_AXI_GMEM3_ID_WIDTH - 1:0] m_axi_gmem3_WID;
output  [C_M_AXI_GMEM3_WUSER_WIDTH - 1:0] m_axi_gmem3_WUSER;
output   m_axi_gmem3_ARVALID;
input   m_axi_gmem3_ARREADY;
output  [C_M_AXI_GMEM3_ADDR_WIDTH - 1:0] m_axi_gmem3_ARADDR;
output  [C_M_AXI_GMEM3_ID_WIDTH - 1:0] m_axi_gmem3_ARID;
output  [7:0] m_axi_gmem3_ARLEN;
output  [2:0] m_axi_gmem3_ARSIZE;
output  [1:0] m_axi_gmem3_ARBURST;
output  [1:0] m_axi_gmem3_ARLOCK;
output  [3:0] m_axi_gmem3_ARCACHE;
output  [2:0] m_axi_gmem3_ARPROT;
output  [3:0] m_axi_gmem3_ARQOS;
output  [3:0] m_axi_gmem3_ARREGION;
output  [C_M_AXI_GMEM3_ARUSER_WIDTH - 1:0] m_axi_gmem3_ARUSER;
input   m_axi_gmem3_RVALID;
output   m_axi_gmem3_RREADY;
input  [C_M_AXI_GMEM3_DATA_WIDTH - 1:0] m_axi_gmem3_RDATA;
input   m_axi_gmem3_RLAST;
input  [C_M_AXI_GMEM3_ID_WIDTH - 1:0] m_axi_gmem3_RID;
input  [C_M_AXI_GMEM3_RUSER_WIDTH - 1:0] m_axi_gmem3_RUSER;
input  [1:0] m_axi_gmem3_RRESP;
input   m_axi_gmem3_BVALID;
output   m_axi_gmem3_BREADY;
input  [1:0] m_axi_gmem3_BRESP;
input  [C_M_AXI_GMEM3_ID_WIDTH - 1:0] m_axi_gmem3_BID;
input  [C_M_AXI_GMEM3_BUSER_WIDTH - 1:0] m_axi_gmem3_BUSER;
output   stall_start_ext;
output   stall_done_ext;
output   stall_start_str;
output   stall_done_str;
output   stall_start_int;
output   stall_done_int;

reg stall_start_ext;
reg stall_done_ext;
reg stall_start_str;
reg stall_done_str;
reg stall_start_int;
reg stall_done_int;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire   [31:0] num;
wire   [31:0] size;
wire   [63:0] len;
wire   [63:0] adler;
wire   [63:0] inData;
wire   [63:0] adler32Result;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_continue;
wire    ap_idle;
wire    gmem0_AWREADY;
wire    gmem0_WREADY;
wire    gmem0_ARREADY;
wire    gmem0_RVALID;
wire   [31:0] gmem0_RDATA;
wire    gmem0_RLAST;
wire   [0:0] gmem0_RID;
wire   [0:0] gmem0_RUSER;
wire   [1:0] gmem0_RRESP;
wire    gmem0_BVALID;
wire   [1:0] gmem0_BRESP;
wire   [0:0] gmem0_BID;
wire   [0:0] gmem0_BUSER;
wire    gmem1_AWREADY;
wire    gmem1_WREADY;
wire    gmem1_ARREADY;
wire    gmem1_RVALID;
wire   [31:0] gmem1_RDATA;
wire    gmem1_RLAST;
wire   [0:0] gmem1_RID;
wire   [0:0] gmem1_RUSER;
wire   [1:0] gmem1_RRESP;
wire    gmem1_BVALID;
wire   [1:0] gmem1_BRESP;
wire   [0:0] gmem1_BID;
wire   [0:0] gmem1_BUSER;
wire    gmem2_AWREADY;
wire    gmem2_WREADY;
wire    gmem2_ARREADY;
wire    gmem2_RVALID;
wire   [511:0] gmem2_RDATA;
wire    gmem2_RLAST;
wire   [0:0] gmem2_RID;
wire   [0:0] gmem2_RUSER;
wire   [1:0] gmem2_RRESP;
wire    gmem2_BVALID;
wire   [1:0] gmem2_BRESP;
wire   [0:0] gmem2_BID;
wire   [0:0] gmem2_BUSER;
wire    gmem3_AWREADY;
wire    gmem3_WREADY;
wire    gmem3_ARREADY;
wire    gmem3_RVALID;
wire   [31:0] gmem3_RDATA;
wire    gmem3_RLAST;
wire   [0:0] gmem3_RID;
wire   [0:0] gmem3_RUSER;
wire   [1:0] gmem3_RRESP;
wire    gmem3_BVALID;
wire   [1:0] gmem3_BRESP;
wire   [0:0] gmem3_BID;
wire   [0:0] gmem3_BUSER;
wire    Adler32Kernel_entry3_U0_ap_start;
wire    Adler32Kernel_entry3_U0_ap_done;
wire    Adler32Kernel_entry3_U0_ap_continue;
wire    Adler32Kernel_entry3_U0_ap_idle;
wire    Adler32Kernel_entry3_U0_ap_ready;
wire    Adler32Kernel_entry3_U0_start_out;
wire    Adler32Kernel_entry3_U0_start_write;
wire   [31:0] Adler32Kernel_entry3_U0_num_out_din;
wire    Adler32Kernel_entry3_U0_num_out_write;
wire   [31:0] Adler32Kernel_entry3_U0_num_out1_din;
wire    Adler32Kernel_entry3_U0_num_out1_write;
wire   [31:0] Adler32Kernel_entry3_U0_size_out_din;
wire    Adler32Kernel_entry3_U0_size_out_write;
wire   [63:0] Adler32Kernel_entry3_U0_len_out_din;
wire    Adler32Kernel_entry3_U0_len_out_write;
wire   [63:0] Adler32Kernel_entry3_U0_adler_out_din;
wire    Adler32Kernel_entry3_U0_adler_out_write;
wire   [63:0] Adler32Kernel_entry3_U0_inData_out_din;
wire    Adler32Kernel_entry3_U0_inData_out_write;
wire   [63:0] Adler32Kernel_entry3_U0_adler32Result_out_din;
wire    Adler32Kernel_entry3_U0_adler32Result_out_write;
wire    Adler32Kernel_entry3_U0_ap_ext_blocking_n;
wire    Adler32Kernel_entry3_U0_ap_str_blocking_n;
wire    Adler32Kernel_entry3_U0_ap_int_blocking_n;
wire    readLenM2S_U0_ap_start;
wire    readLenM2S_U0_ap_done;
wire    readLenM2S_U0_ap_continue;
wire    readLenM2S_U0_ap_idle;
wire    readLenM2S_U0_ap_ready;
wire    readLenM2S_U0_start_out;
wire    readLenM2S_U0_start_write;
wire    readLenM2S_U0_m_axi_gmem0_AWVALID;
wire   [63:0] readLenM2S_U0_m_axi_gmem0_AWADDR;
wire   [0:0] readLenM2S_U0_m_axi_gmem0_AWID;
wire   [31:0] readLenM2S_U0_m_axi_gmem0_AWLEN;
wire   [2:0] readLenM2S_U0_m_axi_gmem0_AWSIZE;
wire   [1:0] readLenM2S_U0_m_axi_gmem0_AWBURST;
wire   [1:0] readLenM2S_U0_m_axi_gmem0_AWLOCK;
wire   [3:0] readLenM2S_U0_m_axi_gmem0_AWCACHE;
wire   [2:0] readLenM2S_U0_m_axi_gmem0_AWPROT;
wire   [3:0] readLenM2S_U0_m_axi_gmem0_AWQOS;
wire   [3:0] readLenM2S_U0_m_axi_gmem0_AWREGION;
wire   [0:0] readLenM2S_U0_m_axi_gmem0_AWUSER;
wire    readLenM2S_U0_m_axi_gmem0_WVALID;
wire   [31:0] readLenM2S_U0_m_axi_gmem0_WDATA;
wire   [3:0] readLenM2S_U0_m_axi_gmem0_WSTRB;
wire    readLenM2S_U0_m_axi_gmem0_WLAST;
wire   [0:0] readLenM2S_U0_m_axi_gmem0_WID;
wire   [0:0] readLenM2S_U0_m_axi_gmem0_WUSER;
wire    readLenM2S_U0_m_axi_gmem0_ARVALID;
wire   [63:0] readLenM2S_U0_m_axi_gmem0_ARADDR;
wire   [0:0] readLenM2S_U0_m_axi_gmem0_ARID;
wire   [31:0] readLenM2S_U0_m_axi_gmem0_ARLEN;
wire   [2:0] readLenM2S_U0_m_axi_gmem0_ARSIZE;
wire   [1:0] readLenM2S_U0_m_axi_gmem0_ARBURST;
wire   [1:0] readLenM2S_U0_m_axi_gmem0_ARLOCK;
wire   [3:0] readLenM2S_U0_m_axi_gmem0_ARCACHE;
wire   [2:0] readLenM2S_U0_m_axi_gmem0_ARPROT;
wire   [3:0] readLenM2S_U0_m_axi_gmem0_ARQOS;
wire   [3:0] readLenM2S_U0_m_axi_gmem0_ARREGION;
wire   [0:0] readLenM2S_U0_m_axi_gmem0_ARUSER;
wire    readLenM2S_U0_m_axi_gmem0_RREADY;
wire    readLenM2S_U0_m_axi_gmem0_BREADY;
wire    readLenM2S_U0_m_axi_gmem1_AWVALID;
wire   [63:0] readLenM2S_U0_m_axi_gmem1_AWADDR;
wire   [0:0] readLenM2S_U0_m_axi_gmem1_AWID;
wire   [31:0] readLenM2S_U0_m_axi_gmem1_AWLEN;
wire   [2:0] readLenM2S_U0_m_axi_gmem1_AWSIZE;
wire   [1:0] readLenM2S_U0_m_axi_gmem1_AWBURST;
wire   [1:0] readLenM2S_U0_m_axi_gmem1_AWLOCK;
wire   [3:0] readLenM2S_U0_m_axi_gmem1_AWCACHE;
wire   [2:0] readLenM2S_U0_m_axi_gmem1_AWPROT;
wire   [3:0] readLenM2S_U0_m_axi_gmem1_AWQOS;
wire   [3:0] readLenM2S_U0_m_axi_gmem1_AWREGION;
wire   [0:0] readLenM2S_U0_m_axi_gmem1_AWUSER;
wire    readLenM2S_U0_m_axi_gmem1_WVALID;
wire   [31:0] readLenM2S_U0_m_axi_gmem1_WDATA;
wire   [3:0] readLenM2S_U0_m_axi_gmem1_WSTRB;
wire    readLenM2S_U0_m_axi_gmem1_WLAST;
wire   [0:0] readLenM2S_U0_m_axi_gmem1_WID;
wire   [0:0] readLenM2S_U0_m_axi_gmem1_WUSER;
wire    readLenM2S_U0_m_axi_gmem1_ARVALID;
wire   [63:0] readLenM2S_U0_m_axi_gmem1_ARADDR;
wire   [0:0] readLenM2S_U0_m_axi_gmem1_ARID;
wire   [31:0] readLenM2S_U0_m_axi_gmem1_ARLEN;
wire   [2:0] readLenM2S_U0_m_axi_gmem1_ARSIZE;
wire   [1:0] readLenM2S_U0_m_axi_gmem1_ARBURST;
wire   [1:0] readLenM2S_U0_m_axi_gmem1_ARLOCK;
wire   [3:0] readLenM2S_U0_m_axi_gmem1_ARCACHE;
wire   [2:0] readLenM2S_U0_m_axi_gmem1_ARPROT;
wire   [3:0] readLenM2S_U0_m_axi_gmem1_ARQOS;
wire   [3:0] readLenM2S_U0_m_axi_gmem1_ARREGION;
wire   [0:0] readLenM2S_U0_m_axi_gmem1_ARUSER;
wire    readLenM2S_U0_m_axi_gmem1_RREADY;
wire    readLenM2S_U0_m_axi_gmem1_BREADY;
wire   [31:0] readLenM2S_U0_outDataStrm_din;
wire    readLenM2S_U0_outDataStrm_write;
wire   [31:0] readLenM2S_U0_outData2Strm_din;
wire    readLenM2S_U0_outData2Strm_write;
wire   [0:0] readLenM2S_U0_outEndStrm_din;
wire    readLenM2S_U0_outEndStrm_write;
wire    readLenM2S_U0_n_read;
wire    readLenM2S_U0_inData_read;
wire    readLenM2S_U0_inData2_read;
wire    readLenM2S_U0_ap_ext_blocking_n;
wire    readLenM2S_U0_ap_str_blocking_n;
wire    readLenM2S_U0_ap_int_blocking_n;
wire    readDataM2S_U0_ap_start;
wire    readDataM2S_U0_ap_done;
wire    readDataM2S_U0_ap_continue;
wire    readDataM2S_U0_ap_idle;
wire    readDataM2S_U0_ap_ready;
wire    readDataM2S_U0_start_out;
wire    readDataM2S_U0_start_write;
wire    readDataM2S_U0_m_axi_gmem2_AWVALID;
wire   [63:0] readDataM2S_U0_m_axi_gmem2_AWADDR;
wire   [0:0] readDataM2S_U0_m_axi_gmem2_AWID;
wire   [31:0] readDataM2S_U0_m_axi_gmem2_AWLEN;
wire   [2:0] readDataM2S_U0_m_axi_gmem2_AWSIZE;
wire   [1:0] readDataM2S_U0_m_axi_gmem2_AWBURST;
wire   [1:0] readDataM2S_U0_m_axi_gmem2_AWLOCK;
wire   [3:0] readDataM2S_U0_m_axi_gmem2_AWCACHE;
wire   [2:0] readDataM2S_U0_m_axi_gmem2_AWPROT;
wire   [3:0] readDataM2S_U0_m_axi_gmem2_AWQOS;
wire   [3:0] readDataM2S_U0_m_axi_gmem2_AWREGION;
wire   [0:0] readDataM2S_U0_m_axi_gmem2_AWUSER;
wire    readDataM2S_U0_m_axi_gmem2_WVALID;
wire   [511:0] readDataM2S_U0_m_axi_gmem2_WDATA;
wire   [63:0] readDataM2S_U0_m_axi_gmem2_WSTRB;
wire    readDataM2S_U0_m_axi_gmem2_WLAST;
wire   [0:0] readDataM2S_U0_m_axi_gmem2_WID;
wire   [0:0] readDataM2S_U0_m_axi_gmem2_WUSER;
wire    readDataM2S_U0_m_axi_gmem2_ARVALID;
wire   [63:0] readDataM2S_U0_m_axi_gmem2_ARADDR;
wire   [0:0] readDataM2S_U0_m_axi_gmem2_ARID;
wire   [31:0] readDataM2S_U0_m_axi_gmem2_ARLEN;
wire   [2:0] readDataM2S_U0_m_axi_gmem2_ARSIZE;
wire   [1:0] readDataM2S_U0_m_axi_gmem2_ARBURST;
wire   [1:0] readDataM2S_U0_m_axi_gmem2_ARLOCK;
wire   [3:0] readDataM2S_U0_m_axi_gmem2_ARCACHE;
wire   [2:0] readDataM2S_U0_m_axi_gmem2_ARPROT;
wire   [3:0] readDataM2S_U0_m_axi_gmem2_ARQOS;
wire   [3:0] readDataM2S_U0_m_axi_gmem2_ARREGION;
wire   [0:0] readDataM2S_U0_m_axi_gmem2_ARUSER;
wire    readDataM2S_U0_m_axi_gmem2_RREADY;
wire    readDataM2S_U0_m_axi_gmem2_BREADY;
wire   [511:0] readDataM2S_U0_outDataStrm_din;
wire    readDataM2S_U0_outDataStrm_write;
wire    readDataM2S_U0_n_read;
wire    readDataM2S_U0_inData_read;
wire   [31:0] readDataM2S_U0_n_out_din;
wire    readDataM2S_U0_n_out_write;
wire    readDataM2S_U0_ap_ext_blocking_n;
wire    readDataM2S_U0_ap_str_blocking_n;
wire    readDataM2S_U0_ap_int_blocking_n;
wire    splitStrm_U0_ap_start;
wire    splitStrm_U0_ap_done;
wire    splitStrm_U0_ap_continue;
wire    splitStrm_U0_ap_idle;
wire    splitStrm_U0_ap_ready;
wire    splitStrm_U0_inStrm_read;
wire   [127:0] splitStrm_U0_outStrm_din;
wire    splitStrm_U0_outStrm_write;
wire    splitStrm_U0_n_read;
wire    splitStrm_U0_ap_ext_blocking_n;
wire    splitStrm_U0_ap_str_blocking_n;
wire    splitStrm_U0_ap_int_blocking_n;
wire    adler32_16_U0_ap_start;
wire    adler32_16_U0_ap_done;
wire    adler32_16_U0_ap_continue;
wire    adler32_16_U0_ap_idle;
wire    adler32_16_U0_ap_ready;
wire    adler32_16_U0_adlerStrm_read;
wire    adler32_16_U0_inStrm_read;
wire    adler32_16_U0_inLenStrm_read;
wire    adler32_16_U0_endInLenStrm_read;
wire   [31:0] adler32_16_U0_outStrm_din;
wire    adler32_16_U0_outStrm_write;
wire   [0:0] adler32_16_U0_endOutStrm_din;
wire    adler32_16_U0_endOutStrm_write;
wire    adler32_16_U0_ap_ext_blocking_n;
wire    adler32_16_U0_ap_str_blocking_n;
wire    adler32_16_U0_ap_int_blocking_n;
wire    writeS2M_U0_ap_start;
wire    writeS2M_U0_ap_done;
wire    writeS2M_U0_ap_continue;
wire    writeS2M_U0_ap_idle;
wire    writeS2M_U0_ap_ready;
wire    writeS2M_U0_inStrm_read;
wire    writeS2M_U0_endStrm_read;
wire    writeS2M_U0_m_axi_gmem3_AWVALID;
wire   [63:0] writeS2M_U0_m_axi_gmem3_AWADDR;
wire   [0:0] writeS2M_U0_m_axi_gmem3_AWID;
wire   [31:0] writeS2M_U0_m_axi_gmem3_AWLEN;
wire   [2:0] writeS2M_U0_m_axi_gmem3_AWSIZE;
wire   [1:0] writeS2M_U0_m_axi_gmem3_AWBURST;
wire   [1:0] writeS2M_U0_m_axi_gmem3_AWLOCK;
wire   [3:0] writeS2M_U0_m_axi_gmem3_AWCACHE;
wire   [2:0] writeS2M_U0_m_axi_gmem3_AWPROT;
wire   [3:0] writeS2M_U0_m_axi_gmem3_AWQOS;
wire   [3:0] writeS2M_U0_m_axi_gmem3_AWREGION;
wire   [0:0] writeS2M_U0_m_axi_gmem3_AWUSER;
wire    writeS2M_U0_m_axi_gmem3_WVALID;
wire   [31:0] writeS2M_U0_m_axi_gmem3_WDATA;
wire   [3:0] writeS2M_U0_m_axi_gmem3_WSTRB;
wire    writeS2M_U0_m_axi_gmem3_WLAST;
wire   [0:0] writeS2M_U0_m_axi_gmem3_WID;
wire   [0:0] writeS2M_U0_m_axi_gmem3_WUSER;
wire    writeS2M_U0_m_axi_gmem3_ARVALID;
wire   [63:0] writeS2M_U0_m_axi_gmem3_ARADDR;
wire   [0:0] writeS2M_U0_m_axi_gmem3_ARID;
wire   [31:0] writeS2M_U0_m_axi_gmem3_ARLEN;
wire   [2:0] writeS2M_U0_m_axi_gmem3_ARSIZE;
wire   [1:0] writeS2M_U0_m_axi_gmem3_ARBURST;
wire   [1:0] writeS2M_U0_m_axi_gmem3_ARLOCK;
wire   [3:0] writeS2M_U0_m_axi_gmem3_ARCACHE;
wire   [2:0] writeS2M_U0_m_axi_gmem3_ARPROT;
wire   [3:0] writeS2M_U0_m_axi_gmem3_ARQOS;
wire   [3:0] writeS2M_U0_m_axi_gmem3_ARREGION;
wire   [0:0] writeS2M_U0_m_axi_gmem3_ARUSER;
wire    writeS2M_U0_m_axi_gmem3_RREADY;
wire    writeS2M_U0_m_axi_gmem3_BREADY;
wire    writeS2M_U0_n_read;
wire    writeS2M_U0_adler32Result_read;
wire    writeS2M_U0_ap_ext_blocking_n;
wire    writeS2M_U0_ap_str_blocking_n;
wire    writeS2M_U0_ap_int_blocking_n;
wire    ap_sync_continue;
wire    num_c_full_n;
wire   [31:0] num_c_dout;
wire    num_c_empty_n;
wire    num_c13_full_n;
wire   [31:0] num_c13_dout;
wire    num_c13_empty_n;
wire    size_c_full_n;
wire   [31:0] size_c_dout;
wire    size_c_empty_n;
wire    len_c_full_n;
wire   [63:0] len_c_dout;
wire    len_c_empty_n;
wire    adler_c_full_n;
wire   [63:0] adler_c_dout;
wire    adler_c_empty_n;
wire    inData_c_full_n;
wire   [63:0] inData_c_dout;
wire    inData_c_empty_n;
wire    adler32Result_c_full_n;
wire   [63:0] adler32Result_c_dout;
wire    adler32Result_c_empty_n;
wire    lenStrm_full_n;
wire   [31:0] lenStrm_dout;
wire    lenStrm_empty_n;
wire    adlerStrm_full_n;
wire   [31:0] adlerStrm_dout;
wire    adlerStrm_empty_n;
wire    endStrm_full_n;
wire   [0:0] endStrm_dout;
wire    endStrm_empty_n;
wire    data512Strm_full_n;
wire   [511:0] data512Strm_dout;
wire    data512Strm_empty_n;
wire    size_c14_full_n;
wire   [31:0] size_c14_dout;
wire    size_c14_empty_n;
wire    dataStrm_full_n;
wire   [127:0] dataStrm_dout;
wire    dataStrm_empty_n;
wire    adler32Strm_full_n;
wire   [31:0] adler32Strm_dout;
wire    adler32Strm_empty_n;
wire    adler32EndStrm_full_n;
wire   [0:0] adler32EndStrm_dout;
wire    adler32EndStrm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready;
wire    ap_sync_Adler32Kernel_entry3_U0_ap_ready;
reg   [1:0] Adler32Kernel_entry3_U0_ap_ready_count;
reg    ap_sync_reg_readLenM2S_U0_ap_ready;
wire    ap_sync_readLenM2S_U0_ap_ready;
reg   [1:0] readLenM2S_U0_ap_ready_count;
reg    ap_sync_reg_readDataM2S_U0_ap_ready;
wire    ap_sync_readDataM2S_U0_ap_ready;
reg   [1:0] readDataM2S_U0_ap_ready_count;
wire   [0:0] start_for_writeS2M_U0_din;
wire    start_for_writeS2M_U0_full_n;
wire   [0:0] start_for_writeS2M_U0_dout;
wire    start_for_writeS2M_U0_empty_n;
wire   [0:0] start_for_adler32_16_U0_din;
wire    start_for_adler32_16_U0_full_n;
wire   [0:0] start_for_adler32_16_U0_dout;
wire    start_for_adler32_16_U0_empty_n;
wire   [0:0] start_for_splitStrm_U0_din;
wire    start_for_splitStrm_U0_full_n;
wire   [0:0] start_for_splitStrm_U0_dout;
wire    start_for_splitStrm_U0_empty_n;
wire    splitStrm_U0_start_full_n;
wire    splitStrm_U0_start_write;
wire    adler32_16_U0_start_full_n;
wire    adler32_16_U0_start_write;
wire    writeS2M_U0_start_full_n;
wire    writeS2M_U0_start_write;
wire    ap_ext_blocking_cur_n;
wire    ap_str_blocking_cur_n;
wire    ap_int_blocking_cur_n;
wire    ap_ext_blocking_sub_n;
wire    ap_str_blocking_sub_n;
wire    ap_int_blocking_sub_n;
wire    ap_ext_blocking_n;
wire    ap_str_blocking_n;
wire    ap_int_blocking_n;
reg    ap_ext_blocking_n_reg;
reg    ap_str_blocking_n_reg;
reg    ap_int_blocking_n_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready = 1'b0;
#0 Adler32Kernel_entry3_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_readLenM2S_U0_ap_ready = 1'b0;
#0 readLenM2S_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_readDataM2S_U0_ap_ready = 1'b0;
#0 readDataM2S_U0_ap_ready_count = 2'd0;
end

Adler32Kernel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .num(num),
    .size(size),
    .len(len),
    .adler(adler),
    .inData(inData),
    .adler32Result(adler32Result),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .event_start(event_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

Adler32Kernel_gmem0_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 37 ),
    .NUM_READ_OUTSTANDING( 32 ),
    .NUM_WRITE_OUTSTANDING( 1 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 2 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM0_CACHE_VALUE ))
gmem0_m_axi_U(
    .AWVALID(m_axi_gmem0_AWVALID),
    .AWREADY(m_axi_gmem0_AWREADY),
    .AWADDR(m_axi_gmem0_AWADDR),
    .AWID(m_axi_gmem0_AWID),
    .AWLEN(m_axi_gmem0_AWLEN),
    .AWSIZE(m_axi_gmem0_AWSIZE),
    .AWBURST(m_axi_gmem0_AWBURST),
    .AWLOCK(m_axi_gmem0_AWLOCK),
    .AWCACHE(m_axi_gmem0_AWCACHE),
    .AWPROT(m_axi_gmem0_AWPROT),
    .AWQOS(m_axi_gmem0_AWQOS),
    .AWREGION(m_axi_gmem0_AWREGION),
    .AWUSER(m_axi_gmem0_AWUSER),
    .WVALID(m_axi_gmem0_WVALID),
    .WREADY(m_axi_gmem0_WREADY),
    .WDATA(m_axi_gmem0_WDATA),
    .WSTRB(m_axi_gmem0_WSTRB),
    .WLAST(m_axi_gmem0_WLAST),
    .WID(m_axi_gmem0_WID),
    .WUSER(m_axi_gmem0_WUSER),
    .ARVALID(m_axi_gmem0_ARVALID),
    .ARREADY(m_axi_gmem0_ARREADY),
    .ARADDR(m_axi_gmem0_ARADDR),
    .ARID(m_axi_gmem0_ARID),
    .ARLEN(m_axi_gmem0_ARLEN),
    .ARSIZE(m_axi_gmem0_ARSIZE),
    .ARBURST(m_axi_gmem0_ARBURST),
    .ARLOCK(m_axi_gmem0_ARLOCK),
    .ARCACHE(m_axi_gmem0_ARCACHE),
    .ARPROT(m_axi_gmem0_ARPROT),
    .ARQOS(m_axi_gmem0_ARQOS),
    .ARREGION(m_axi_gmem0_ARREGION),
    .ARUSER(m_axi_gmem0_ARUSER),
    .RVALID(m_axi_gmem0_RVALID),
    .RREADY(m_axi_gmem0_RREADY),
    .RDATA(m_axi_gmem0_RDATA),
    .RLAST(m_axi_gmem0_RLAST),
    .RID(m_axi_gmem0_RID),
    .RUSER(m_axi_gmem0_RUSER),
    .RRESP(m_axi_gmem0_RRESP),
    .BVALID(m_axi_gmem0_BVALID),
    .BREADY(m_axi_gmem0_BREADY),
    .BRESP(m_axi_gmem0_BRESP),
    .BID(m_axi_gmem0_BID),
    .BUSER(m_axi_gmem0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(readLenM2S_U0_m_axi_gmem0_ARVALID),
    .I_ARREADY(gmem0_ARREADY),
    .I_ARADDR(readLenM2S_U0_m_axi_gmem0_ARADDR),
    .I_ARID(readLenM2S_U0_m_axi_gmem0_ARID),
    .I_ARLEN(readLenM2S_U0_m_axi_gmem0_ARLEN),
    .I_ARSIZE(readLenM2S_U0_m_axi_gmem0_ARSIZE),
    .I_ARLOCK(readLenM2S_U0_m_axi_gmem0_ARLOCK),
    .I_ARCACHE(readLenM2S_U0_m_axi_gmem0_ARCACHE),
    .I_ARQOS(readLenM2S_U0_m_axi_gmem0_ARQOS),
    .I_ARPROT(readLenM2S_U0_m_axi_gmem0_ARPROT),
    .I_ARUSER(readLenM2S_U0_m_axi_gmem0_ARUSER),
    .I_ARBURST(readLenM2S_U0_m_axi_gmem0_ARBURST),
    .I_ARREGION(readLenM2S_U0_m_axi_gmem0_ARREGION),
    .I_RVALID(gmem0_RVALID),
    .I_RREADY(readLenM2S_U0_m_axi_gmem0_RREADY),
    .I_RDATA(gmem0_RDATA),
    .I_RID(gmem0_RID),
    .I_RUSER(gmem0_RUSER),
    .I_RRESP(gmem0_RRESP),
    .I_RLAST(gmem0_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem0_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem0_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(gmem0_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem0_BRESP),
    .I_BID(gmem0_BID),
    .I_BUSER(gmem0_BUSER)
);

Adler32Kernel_gmem1_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 37 ),
    .NUM_READ_OUTSTANDING( 32 ),
    .NUM_WRITE_OUTSTANDING( 1 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 2 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM1_CACHE_VALUE ))
gmem1_m_axi_U(
    .AWVALID(m_axi_gmem1_AWVALID),
    .AWREADY(m_axi_gmem1_AWREADY),
    .AWADDR(m_axi_gmem1_AWADDR),
    .AWID(m_axi_gmem1_AWID),
    .AWLEN(m_axi_gmem1_AWLEN),
    .AWSIZE(m_axi_gmem1_AWSIZE),
    .AWBURST(m_axi_gmem1_AWBURST),
    .AWLOCK(m_axi_gmem1_AWLOCK),
    .AWCACHE(m_axi_gmem1_AWCACHE),
    .AWPROT(m_axi_gmem1_AWPROT),
    .AWQOS(m_axi_gmem1_AWQOS),
    .AWREGION(m_axi_gmem1_AWREGION),
    .AWUSER(m_axi_gmem1_AWUSER),
    .WVALID(m_axi_gmem1_WVALID),
    .WREADY(m_axi_gmem1_WREADY),
    .WDATA(m_axi_gmem1_WDATA),
    .WSTRB(m_axi_gmem1_WSTRB),
    .WLAST(m_axi_gmem1_WLAST),
    .WID(m_axi_gmem1_WID),
    .WUSER(m_axi_gmem1_WUSER),
    .ARVALID(m_axi_gmem1_ARVALID),
    .ARREADY(m_axi_gmem1_ARREADY),
    .ARADDR(m_axi_gmem1_ARADDR),
    .ARID(m_axi_gmem1_ARID),
    .ARLEN(m_axi_gmem1_ARLEN),
    .ARSIZE(m_axi_gmem1_ARSIZE),
    .ARBURST(m_axi_gmem1_ARBURST),
    .ARLOCK(m_axi_gmem1_ARLOCK),
    .ARCACHE(m_axi_gmem1_ARCACHE),
    .ARPROT(m_axi_gmem1_ARPROT),
    .ARQOS(m_axi_gmem1_ARQOS),
    .ARREGION(m_axi_gmem1_ARREGION),
    .ARUSER(m_axi_gmem1_ARUSER),
    .RVALID(m_axi_gmem1_RVALID),
    .RREADY(m_axi_gmem1_RREADY),
    .RDATA(m_axi_gmem1_RDATA),
    .RLAST(m_axi_gmem1_RLAST),
    .RID(m_axi_gmem1_RID),
    .RUSER(m_axi_gmem1_RUSER),
    .RRESP(m_axi_gmem1_RRESP),
    .BVALID(m_axi_gmem1_BVALID),
    .BREADY(m_axi_gmem1_BREADY),
    .BRESP(m_axi_gmem1_BRESP),
    .BID(m_axi_gmem1_BID),
    .BUSER(m_axi_gmem1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(readLenM2S_U0_m_axi_gmem1_ARVALID),
    .I_ARREADY(gmem1_ARREADY),
    .I_ARADDR(readLenM2S_U0_m_axi_gmem1_ARADDR),
    .I_ARID(readLenM2S_U0_m_axi_gmem1_ARID),
    .I_ARLEN(readLenM2S_U0_m_axi_gmem1_ARLEN),
    .I_ARSIZE(readLenM2S_U0_m_axi_gmem1_ARSIZE),
    .I_ARLOCK(readLenM2S_U0_m_axi_gmem1_ARLOCK),
    .I_ARCACHE(readLenM2S_U0_m_axi_gmem1_ARCACHE),
    .I_ARQOS(readLenM2S_U0_m_axi_gmem1_ARQOS),
    .I_ARPROT(readLenM2S_U0_m_axi_gmem1_ARPROT),
    .I_ARUSER(readLenM2S_U0_m_axi_gmem1_ARUSER),
    .I_ARBURST(readLenM2S_U0_m_axi_gmem1_ARBURST),
    .I_ARREGION(readLenM2S_U0_m_axi_gmem1_ARREGION),
    .I_RVALID(gmem1_RVALID),
    .I_RREADY(readLenM2S_U0_m_axi_gmem1_RREADY),
    .I_RDATA(gmem1_RDATA),
    .I_RID(gmem1_RID),
    .I_RUSER(gmem1_RUSER),
    .I_RRESP(gmem1_RRESP),
    .I_RLAST(gmem1_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem1_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem1_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(gmem1_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem1_BRESP),
    .I_BID(gmem1_BID),
    .I_BUSER(gmem1_BUSER)
);

Adler32Kernel_gmem2_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 37 ),
    .NUM_READ_OUTSTANDING( 32 ),
    .NUM_WRITE_OUTSTANDING( 1 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 2 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM2_CACHE_VALUE ))
gmem2_m_axi_U(
    .AWVALID(m_axi_gmem2_AWVALID),
    .AWREADY(m_axi_gmem2_AWREADY),
    .AWADDR(m_axi_gmem2_AWADDR),
    .AWID(m_axi_gmem2_AWID),
    .AWLEN(m_axi_gmem2_AWLEN),
    .AWSIZE(m_axi_gmem2_AWSIZE),
    .AWBURST(m_axi_gmem2_AWBURST),
    .AWLOCK(m_axi_gmem2_AWLOCK),
    .AWCACHE(m_axi_gmem2_AWCACHE),
    .AWPROT(m_axi_gmem2_AWPROT),
    .AWQOS(m_axi_gmem2_AWQOS),
    .AWREGION(m_axi_gmem2_AWREGION),
    .AWUSER(m_axi_gmem2_AWUSER),
    .WVALID(m_axi_gmem2_WVALID),
    .WREADY(m_axi_gmem2_WREADY),
    .WDATA(m_axi_gmem2_WDATA),
    .WSTRB(m_axi_gmem2_WSTRB),
    .WLAST(m_axi_gmem2_WLAST),
    .WID(m_axi_gmem2_WID),
    .WUSER(m_axi_gmem2_WUSER),
    .ARVALID(m_axi_gmem2_ARVALID),
    .ARREADY(m_axi_gmem2_ARREADY),
    .ARADDR(m_axi_gmem2_ARADDR),
    .ARID(m_axi_gmem2_ARID),
    .ARLEN(m_axi_gmem2_ARLEN),
    .ARSIZE(m_axi_gmem2_ARSIZE),
    .ARBURST(m_axi_gmem2_ARBURST),
    .ARLOCK(m_axi_gmem2_ARLOCK),
    .ARCACHE(m_axi_gmem2_ARCACHE),
    .ARPROT(m_axi_gmem2_ARPROT),
    .ARQOS(m_axi_gmem2_ARQOS),
    .ARREGION(m_axi_gmem2_ARREGION),
    .ARUSER(m_axi_gmem2_ARUSER),
    .RVALID(m_axi_gmem2_RVALID),
    .RREADY(m_axi_gmem2_RREADY),
    .RDATA(m_axi_gmem2_RDATA),
    .RLAST(m_axi_gmem2_RLAST),
    .RID(m_axi_gmem2_RID),
    .RUSER(m_axi_gmem2_RUSER),
    .RRESP(m_axi_gmem2_RRESP),
    .BVALID(m_axi_gmem2_BVALID),
    .BREADY(m_axi_gmem2_BREADY),
    .BRESP(m_axi_gmem2_BRESP),
    .BID(m_axi_gmem2_BID),
    .BUSER(m_axi_gmem2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(readDataM2S_U0_m_axi_gmem2_ARVALID),
    .I_ARREADY(gmem2_ARREADY),
    .I_ARADDR(readDataM2S_U0_m_axi_gmem2_ARADDR),
    .I_ARID(readDataM2S_U0_m_axi_gmem2_ARID),
    .I_ARLEN(readDataM2S_U0_m_axi_gmem2_ARLEN),
    .I_ARSIZE(readDataM2S_U0_m_axi_gmem2_ARSIZE),
    .I_ARLOCK(readDataM2S_U0_m_axi_gmem2_ARLOCK),
    .I_ARCACHE(readDataM2S_U0_m_axi_gmem2_ARCACHE),
    .I_ARQOS(readDataM2S_U0_m_axi_gmem2_ARQOS),
    .I_ARPROT(readDataM2S_U0_m_axi_gmem2_ARPROT),
    .I_ARUSER(readDataM2S_U0_m_axi_gmem2_ARUSER),
    .I_ARBURST(readDataM2S_U0_m_axi_gmem2_ARBURST),
    .I_ARREGION(readDataM2S_U0_m_axi_gmem2_ARREGION),
    .I_RVALID(gmem2_RVALID),
    .I_RREADY(readDataM2S_U0_m_axi_gmem2_RREADY),
    .I_RDATA(gmem2_RDATA),
    .I_RID(gmem2_RID),
    .I_RUSER(gmem2_RUSER),
    .I_RRESP(gmem2_RRESP),
    .I_RLAST(gmem2_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem2_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem2_WREADY),
    .I_WDATA(512'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(64'd0),
    .I_BVALID(gmem2_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem2_BRESP),
    .I_BID(gmem2_BID),
    .I_BUSER(gmem2_BUSER)
);

Adler32Kernel_gmem3_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 37 ),
    .NUM_READ_OUTSTANDING( 1 ),
    .NUM_WRITE_OUTSTANDING( 32 ),
    .MAX_READ_BURST_LENGTH( 2 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM3_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM3_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM3_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM3_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM3_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM3_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM3_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM3_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM3_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM3_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM3_CACHE_VALUE ))
gmem3_m_axi_U(
    .AWVALID(m_axi_gmem3_AWVALID),
    .AWREADY(m_axi_gmem3_AWREADY),
    .AWADDR(m_axi_gmem3_AWADDR),
    .AWID(m_axi_gmem3_AWID),
    .AWLEN(m_axi_gmem3_AWLEN),
    .AWSIZE(m_axi_gmem3_AWSIZE),
    .AWBURST(m_axi_gmem3_AWBURST),
    .AWLOCK(m_axi_gmem3_AWLOCK),
    .AWCACHE(m_axi_gmem3_AWCACHE),
    .AWPROT(m_axi_gmem3_AWPROT),
    .AWQOS(m_axi_gmem3_AWQOS),
    .AWREGION(m_axi_gmem3_AWREGION),
    .AWUSER(m_axi_gmem3_AWUSER),
    .WVALID(m_axi_gmem3_WVALID),
    .WREADY(m_axi_gmem3_WREADY),
    .WDATA(m_axi_gmem3_WDATA),
    .WSTRB(m_axi_gmem3_WSTRB),
    .WLAST(m_axi_gmem3_WLAST),
    .WID(m_axi_gmem3_WID),
    .WUSER(m_axi_gmem3_WUSER),
    .ARVALID(m_axi_gmem3_ARVALID),
    .ARREADY(m_axi_gmem3_ARREADY),
    .ARADDR(m_axi_gmem3_ARADDR),
    .ARID(m_axi_gmem3_ARID),
    .ARLEN(m_axi_gmem3_ARLEN),
    .ARSIZE(m_axi_gmem3_ARSIZE),
    .ARBURST(m_axi_gmem3_ARBURST),
    .ARLOCK(m_axi_gmem3_ARLOCK),
    .ARCACHE(m_axi_gmem3_ARCACHE),
    .ARPROT(m_axi_gmem3_ARPROT),
    .ARQOS(m_axi_gmem3_ARQOS),
    .ARREGION(m_axi_gmem3_ARREGION),
    .ARUSER(m_axi_gmem3_ARUSER),
    .RVALID(m_axi_gmem3_RVALID),
    .RREADY(m_axi_gmem3_RREADY),
    .RDATA(m_axi_gmem3_RDATA),
    .RLAST(m_axi_gmem3_RLAST),
    .RID(m_axi_gmem3_RID),
    .RUSER(m_axi_gmem3_RUSER),
    .RRESP(m_axi_gmem3_RRESP),
    .BVALID(m_axi_gmem3_BVALID),
    .BREADY(m_axi_gmem3_BREADY),
    .BRESP(m_axi_gmem3_BRESP),
    .BID(m_axi_gmem3_BID),
    .BUSER(m_axi_gmem3_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem3_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem3_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem3_RDATA),
    .I_RID(gmem3_RID),
    .I_RUSER(gmem3_RUSER),
    .I_RRESP(gmem3_RRESP),
    .I_RLAST(gmem3_RLAST),
    .I_AWVALID(writeS2M_U0_m_axi_gmem3_AWVALID),
    .I_AWREADY(gmem3_AWREADY),
    .I_AWADDR(writeS2M_U0_m_axi_gmem3_AWADDR),
    .I_AWID(writeS2M_U0_m_axi_gmem3_AWID),
    .I_AWLEN(writeS2M_U0_m_axi_gmem3_AWLEN),
    .I_AWSIZE(writeS2M_U0_m_axi_gmem3_AWSIZE),
    .I_AWLOCK(writeS2M_U0_m_axi_gmem3_AWLOCK),
    .I_AWCACHE(writeS2M_U0_m_axi_gmem3_AWCACHE),
    .I_AWQOS(writeS2M_U0_m_axi_gmem3_AWQOS),
    .I_AWPROT(writeS2M_U0_m_axi_gmem3_AWPROT),
    .I_AWUSER(writeS2M_U0_m_axi_gmem3_AWUSER),
    .I_AWBURST(writeS2M_U0_m_axi_gmem3_AWBURST),
    .I_AWREGION(writeS2M_U0_m_axi_gmem3_AWREGION),
    .I_WVALID(writeS2M_U0_m_axi_gmem3_WVALID),
    .I_WREADY(gmem3_WREADY),
    .I_WDATA(writeS2M_U0_m_axi_gmem3_WDATA),
    .I_WID(writeS2M_U0_m_axi_gmem3_WID),
    .I_WUSER(writeS2M_U0_m_axi_gmem3_WUSER),
    .I_WLAST(writeS2M_U0_m_axi_gmem3_WLAST),
    .I_WSTRB(writeS2M_U0_m_axi_gmem3_WSTRB),
    .I_BVALID(gmem3_BVALID),
    .I_BREADY(writeS2M_U0_m_axi_gmem3_BREADY),
    .I_BRESP(gmem3_BRESP),
    .I_BID(gmem3_BID),
    .I_BUSER(gmem3_BUSER)
);

Adler32Kernel_Adler32Kernel_entry3 Adler32Kernel_entry3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Adler32Kernel_entry3_U0_ap_start),
    .start_full_n(start_for_writeS2M_U0_full_n),
    .ap_done(Adler32Kernel_entry3_U0_ap_done),
    .ap_continue(Adler32Kernel_entry3_U0_ap_continue),
    .ap_idle(Adler32Kernel_entry3_U0_ap_idle),
    .ap_ready(Adler32Kernel_entry3_U0_ap_ready),
    .start_out(Adler32Kernel_entry3_U0_start_out),
    .start_write(Adler32Kernel_entry3_U0_start_write),
    .num(num),
    .size(size),
    .len(len),
    .adler(adler),
    .inData(inData),
    .adler32Result(adler32Result),
    .num_out_din(Adler32Kernel_entry3_U0_num_out_din),
    .num_out_full_n(num_c_full_n),
    .num_out_write(Adler32Kernel_entry3_U0_num_out_write),
    .num_out1_din(Adler32Kernel_entry3_U0_num_out1_din),
    .num_out1_full_n(num_c13_full_n),
    .num_out1_write(Adler32Kernel_entry3_U0_num_out1_write),
    .size_out_din(Adler32Kernel_entry3_U0_size_out_din),
    .size_out_full_n(size_c_full_n),
    .size_out_write(Adler32Kernel_entry3_U0_size_out_write),
    .len_out_din(Adler32Kernel_entry3_U0_len_out_din),
    .len_out_full_n(len_c_full_n),
    .len_out_write(Adler32Kernel_entry3_U0_len_out_write),
    .adler_out_din(Adler32Kernel_entry3_U0_adler_out_din),
    .adler_out_full_n(adler_c_full_n),
    .adler_out_write(Adler32Kernel_entry3_U0_adler_out_write),
    .inData_out_din(Adler32Kernel_entry3_U0_inData_out_din),
    .inData_out_full_n(inData_c_full_n),
    .inData_out_write(Adler32Kernel_entry3_U0_inData_out_write),
    .adler32Result_out_din(Adler32Kernel_entry3_U0_adler32Result_out_din),
    .adler32Result_out_full_n(adler32Result_c_full_n),
    .adler32Result_out_write(Adler32Kernel_entry3_U0_adler32Result_out_write),
    .ap_ext_blocking_n(Adler32Kernel_entry3_U0_ap_ext_blocking_n),
    .ap_str_blocking_n(Adler32Kernel_entry3_U0_ap_str_blocking_n),
    .ap_int_blocking_n(Adler32Kernel_entry3_U0_ap_int_blocking_n)
);

Adler32Kernel_readLenM2S readLenM2S_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(readLenM2S_U0_ap_start),
    .start_full_n(start_for_adler32_16_U0_full_n),
    .ap_done(readLenM2S_U0_ap_done),
    .ap_continue(readLenM2S_U0_ap_continue),
    .ap_idle(readLenM2S_U0_ap_idle),
    .ap_ready(readLenM2S_U0_ap_ready),
    .start_out(readLenM2S_U0_start_out),
    .start_write(readLenM2S_U0_start_write),
    .m_axi_gmem0_AWVALID(readLenM2S_U0_m_axi_gmem0_AWVALID),
    .m_axi_gmem0_AWREADY(1'b0),
    .m_axi_gmem0_AWADDR(readLenM2S_U0_m_axi_gmem0_AWADDR),
    .m_axi_gmem0_AWID(readLenM2S_U0_m_axi_gmem0_AWID),
    .m_axi_gmem0_AWLEN(readLenM2S_U0_m_axi_gmem0_AWLEN),
    .m_axi_gmem0_AWSIZE(readLenM2S_U0_m_axi_gmem0_AWSIZE),
    .m_axi_gmem0_AWBURST(readLenM2S_U0_m_axi_gmem0_AWBURST),
    .m_axi_gmem0_AWLOCK(readLenM2S_U0_m_axi_gmem0_AWLOCK),
    .m_axi_gmem0_AWCACHE(readLenM2S_U0_m_axi_gmem0_AWCACHE),
    .m_axi_gmem0_AWPROT(readLenM2S_U0_m_axi_gmem0_AWPROT),
    .m_axi_gmem0_AWQOS(readLenM2S_U0_m_axi_gmem0_AWQOS),
    .m_axi_gmem0_AWREGION(readLenM2S_U0_m_axi_gmem0_AWREGION),
    .m_axi_gmem0_AWUSER(readLenM2S_U0_m_axi_gmem0_AWUSER),
    .m_axi_gmem0_WVALID(readLenM2S_U0_m_axi_gmem0_WVALID),
    .m_axi_gmem0_WREADY(1'b0),
    .m_axi_gmem0_WDATA(readLenM2S_U0_m_axi_gmem0_WDATA),
    .m_axi_gmem0_WSTRB(readLenM2S_U0_m_axi_gmem0_WSTRB),
    .m_axi_gmem0_WLAST(readLenM2S_U0_m_axi_gmem0_WLAST),
    .m_axi_gmem0_WID(readLenM2S_U0_m_axi_gmem0_WID),
    .m_axi_gmem0_WUSER(readLenM2S_U0_m_axi_gmem0_WUSER),
    .m_axi_gmem0_ARVALID(readLenM2S_U0_m_axi_gmem0_ARVALID),
    .m_axi_gmem0_ARREADY(gmem0_ARREADY),
    .m_axi_gmem0_ARADDR(readLenM2S_U0_m_axi_gmem0_ARADDR),
    .m_axi_gmem0_ARID(readLenM2S_U0_m_axi_gmem0_ARID),
    .m_axi_gmem0_ARLEN(readLenM2S_U0_m_axi_gmem0_ARLEN),
    .m_axi_gmem0_ARSIZE(readLenM2S_U0_m_axi_gmem0_ARSIZE),
    .m_axi_gmem0_ARBURST(readLenM2S_U0_m_axi_gmem0_ARBURST),
    .m_axi_gmem0_ARLOCK(readLenM2S_U0_m_axi_gmem0_ARLOCK),
    .m_axi_gmem0_ARCACHE(readLenM2S_U0_m_axi_gmem0_ARCACHE),
    .m_axi_gmem0_ARPROT(readLenM2S_U0_m_axi_gmem0_ARPROT),
    .m_axi_gmem0_ARQOS(readLenM2S_U0_m_axi_gmem0_ARQOS),
    .m_axi_gmem0_ARREGION(readLenM2S_U0_m_axi_gmem0_ARREGION),
    .m_axi_gmem0_ARUSER(readLenM2S_U0_m_axi_gmem0_ARUSER),
    .m_axi_gmem0_RVALID(gmem0_RVALID),
    .m_axi_gmem0_RREADY(readLenM2S_U0_m_axi_gmem0_RREADY),
    .m_axi_gmem0_RDATA(gmem0_RDATA),
    .m_axi_gmem0_RLAST(gmem0_RLAST),
    .m_axi_gmem0_RID(gmem0_RID),
    .m_axi_gmem0_RUSER(gmem0_RUSER),
    .m_axi_gmem0_RRESP(gmem0_RRESP),
    .m_axi_gmem0_BVALID(1'b0),
    .m_axi_gmem0_BREADY(readLenM2S_U0_m_axi_gmem0_BREADY),
    .m_axi_gmem0_BRESP(2'd0),
    .m_axi_gmem0_BID(1'd0),
    .m_axi_gmem0_BUSER(1'd0),
    .m_axi_gmem1_AWVALID(readLenM2S_U0_m_axi_gmem1_AWVALID),
    .m_axi_gmem1_AWREADY(1'b0),
    .m_axi_gmem1_AWADDR(readLenM2S_U0_m_axi_gmem1_AWADDR),
    .m_axi_gmem1_AWID(readLenM2S_U0_m_axi_gmem1_AWID),
    .m_axi_gmem1_AWLEN(readLenM2S_U0_m_axi_gmem1_AWLEN),
    .m_axi_gmem1_AWSIZE(readLenM2S_U0_m_axi_gmem1_AWSIZE),
    .m_axi_gmem1_AWBURST(readLenM2S_U0_m_axi_gmem1_AWBURST),
    .m_axi_gmem1_AWLOCK(readLenM2S_U0_m_axi_gmem1_AWLOCK),
    .m_axi_gmem1_AWCACHE(readLenM2S_U0_m_axi_gmem1_AWCACHE),
    .m_axi_gmem1_AWPROT(readLenM2S_U0_m_axi_gmem1_AWPROT),
    .m_axi_gmem1_AWQOS(readLenM2S_U0_m_axi_gmem1_AWQOS),
    .m_axi_gmem1_AWREGION(readLenM2S_U0_m_axi_gmem1_AWREGION),
    .m_axi_gmem1_AWUSER(readLenM2S_U0_m_axi_gmem1_AWUSER),
    .m_axi_gmem1_WVALID(readLenM2S_U0_m_axi_gmem1_WVALID),
    .m_axi_gmem1_WREADY(1'b0),
    .m_axi_gmem1_WDATA(readLenM2S_U0_m_axi_gmem1_WDATA),
    .m_axi_gmem1_WSTRB(readLenM2S_U0_m_axi_gmem1_WSTRB),
    .m_axi_gmem1_WLAST(readLenM2S_U0_m_axi_gmem1_WLAST),
    .m_axi_gmem1_WID(readLenM2S_U0_m_axi_gmem1_WID),
    .m_axi_gmem1_WUSER(readLenM2S_U0_m_axi_gmem1_WUSER),
    .m_axi_gmem1_ARVALID(readLenM2S_U0_m_axi_gmem1_ARVALID),
    .m_axi_gmem1_ARREADY(gmem1_ARREADY),
    .m_axi_gmem1_ARADDR(readLenM2S_U0_m_axi_gmem1_ARADDR),
    .m_axi_gmem1_ARID(readLenM2S_U0_m_axi_gmem1_ARID),
    .m_axi_gmem1_ARLEN(readLenM2S_U0_m_axi_gmem1_ARLEN),
    .m_axi_gmem1_ARSIZE(readLenM2S_U0_m_axi_gmem1_ARSIZE),
    .m_axi_gmem1_ARBURST(readLenM2S_U0_m_axi_gmem1_ARBURST),
    .m_axi_gmem1_ARLOCK(readLenM2S_U0_m_axi_gmem1_ARLOCK),
    .m_axi_gmem1_ARCACHE(readLenM2S_U0_m_axi_gmem1_ARCACHE),
    .m_axi_gmem1_ARPROT(readLenM2S_U0_m_axi_gmem1_ARPROT),
    .m_axi_gmem1_ARQOS(readLenM2S_U0_m_axi_gmem1_ARQOS),
    .m_axi_gmem1_ARREGION(readLenM2S_U0_m_axi_gmem1_ARREGION),
    .m_axi_gmem1_ARUSER(readLenM2S_U0_m_axi_gmem1_ARUSER),
    .m_axi_gmem1_RVALID(gmem1_RVALID),
    .m_axi_gmem1_RREADY(readLenM2S_U0_m_axi_gmem1_RREADY),
    .m_axi_gmem1_RDATA(gmem1_RDATA),
    .m_axi_gmem1_RLAST(gmem1_RLAST),
    .m_axi_gmem1_RID(gmem1_RID),
    .m_axi_gmem1_RUSER(gmem1_RUSER),
    .m_axi_gmem1_RRESP(gmem1_RRESP),
    .m_axi_gmem1_BVALID(1'b0),
    .m_axi_gmem1_BREADY(readLenM2S_U0_m_axi_gmem1_BREADY),
    .m_axi_gmem1_BRESP(2'd0),
    .m_axi_gmem1_BID(1'd0),
    .m_axi_gmem1_BUSER(1'd0),
    .outDataStrm_din(readLenM2S_U0_outDataStrm_din),
    .outDataStrm_full_n(lenStrm_full_n),
    .outDataStrm_write(readLenM2S_U0_outDataStrm_write),
    .outData2Strm_din(readLenM2S_U0_outData2Strm_din),
    .outData2Strm_full_n(adlerStrm_full_n),
    .outData2Strm_write(readLenM2S_U0_outData2Strm_write),
    .outEndStrm_din(readLenM2S_U0_outEndStrm_din),
    .outEndStrm_full_n(endStrm_full_n),
    .outEndStrm_write(readLenM2S_U0_outEndStrm_write),
    .n_dout(num_c_dout),
    .n_empty_n(num_c_empty_n),
    .n_read(readLenM2S_U0_n_read),
    .inData_dout(len_c_dout),
    .inData_empty_n(len_c_empty_n),
    .inData_read(readLenM2S_U0_inData_read),
    .inData2_dout(adler_c_dout),
    .inData2_empty_n(adler_c_empty_n),
    .inData2_read(readLenM2S_U0_inData2_read),
    .ap_ext_blocking_n(readLenM2S_U0_ap_ext_blocking_n),
    .ap_str_blocking_n(readLenM2S_U0_ap_str_blocking_n),
    .ap_int_blocking_n(readLenM2S_U0_ap_int_blocking_n)
);

Adler32Kernel_readDataM2S readDataM2S_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(readDataM2S_U0_ap_start),
    .start_full_n(start_for_splitStrm_U0_full_n),
    .ap_done(readDataM2S_U0_ap_done),
    .ap_continue(readDataM2S_U0_ap_continue),
    .ap_idle(readDataM2S_U0_ap_idle),
    .ap_ready(readDataM2S_U0_ap_ready),
    .start_out(readDataM2S_U0_start_out),
    .start_write(readDataM2S_U0_start_write),
    .m_axi_gmem2_AWVALID(readDataM2S_U0_m_axi_gmem2_AWVALID),
    .m_axi_gmem2_AWREADY(1'b0),
    .m_axi_gmem2_AWADDR(readDataM2S_U0_m_axi_gmem2_AWADDR),
    .m_axi_gmem2_AWID(readDataM2S_U0_m_axi_gmem2_AWID),
    .m_axi_gmem2_AWLEN(readDataM2S_U0_m_axi_gmem2_AWLEN),
    .m_axi_gmem2_AWSIZE(readDataM2S_U0_m_axi_gmem2_AWSIZE),
    .m_axi_gmem2_AWBURST(readDataM2S_U0_m_axi_gmem2_AWBURST),
    .m_axi_gmem2_AWLOCK(readDataM2S_U0_m_axi_gmem2_AWLOCK),
    .m_axi_gmem2_AWCACHE(readDataM2S_U0_m_axi_gmem2_AWCACHE),
    .m_axi_gmem2_AWPROT(readDataM2S_U0_m_axi_gmem2_AWPROT),
    .m_axi_gmem2_AWQOS(readDataM2S_U0_m_axi_gmem2_AWQOS),
    .m_axi_gmem2_AWREGION(readDataM2S_U0_m_axi_gmem2_AWREGION),
    .m_axi_gmem2_AWUSER(readDataM2S_U0_m_axi_gmem2_AWUSER),
    .m_axi_gmem2_WVALID(readDataM2S_U0_m_axi_gmem2_WVALID),
    .m_axi_gmem2_WREADY(1'b0),
    .m_axi_gmem2_WDATA(readDataM2S_U0_m_axi_gmem2_WDATA),
    .m_axi_gmem2_WSTRB(readDataM2S_U0_m_axi_gmem2_WSTRB),
    .m_axi_gmem2_WLAST(readDataM2S_U0_m_axi_gmem2_WLAST),
    .m_axi_gmem2_WID(readDataM2S_U0_m_axi_gmem2_WID),
    .m_axi_gmem2_WUSER(readDataM2S_U0_m_axi_gmem2_WUSER),
    .m_axi_gmem2_ARVALID(readDataM2S_U0_m_axi_gmem2_ARVALID),
    .m_axi_gmem2_ARREADY(gmem2_ARREADY),
    .m_axi_gmem2_ARADDR(readDataM2S_U0_m_axi_gmem2_ARADDR),
    .m_axi_gmem2_ARID(readDataM2S_U0_m_axi_gmem2_ARID),
    .m_axi_gmem2_ARLEN(readDataM2S_U0_m_axi_gmem2_ARLEN),
    .m_axi_gmem2_ARSIZE(readDataM2S_U0_m_axi_gmem2_ARSIZE),
    .m_axi_gmem2_ARBURST(readDataM2S_U0_m_axi_gmem2_ARBURST),
    .m_axi_gmem2_ARLOCK(readDataM2S_U0_m_axi_gmem2_ARLOCK),
    .m_axi_gmem2_ARCACHE(readDataM2S_U0_m_axi_gmem2_ARCACHE),
    .m_axi_gmem2_ARPROT(readDataM2S_U0_m_axi_gmem2_ARPROT),
    .m_axi_gmem2_ARQOS(readDataM2S_U0_m_axi_gmem2_ARQOS),
    .m_axi_gmem2_ARREGION(readDataM2S_U0_m_axi_gmem2_ARREGION),
    .m_axi_gmem2_ARUSER(readDataM2S_U0_m_axi_gmem2_ARUSER),
    .m_axi_gmem2_RVALID(gmem2_RVALID),
    .m_axi_gmem2_RREADY(readDataM2S_U0_m_axi_gmem2_RREADY),
    .m_axi_gmem2_RDATA(gmem2_RDATA),
    .m_axi_gmem2_RLAST(gmem2_RLAST),
    .m_axi_gmem2_RID(gmem2_RID),
    .m_axi_gmem2_RUSER(gmem2_RUSER),
    .m_axi_gmem2_RRESP(gmem2_RRESP),
    .m_axi_gmem2_BVALID(1'b0),
    .m_axi_gmem2_BREADY(readDataM2S_U0_m_axi_gmem2_BREADY),
    .m_axi_gmem2_BRESP(2'd0),
    .m_axi_gmem2_BID(1'd0),
    .m_axi_gmem2_BUSER(1'd0),
    .outDataStrm_din(readDataM2S_U0_outDataStrm_din),
    .outDataStrm_full_n(data512Strm_full_n),
    .outDataStrm_write(readDataM2S_U0_outDataStrm_write),
    .n_dout(size_c_dout),
    .n_empty_n(size_c_empty_n),
    .n_read(readDataM2S_U0_n_read),
    .inData_dout(inData_c_dout),
    .inData_empty_n(inData_c_empty_n),
    .inData_read(readDataM2S_U0_inData_read),
    .n_out_din(readDataM2S_U0_n_out_din),
    .n_out_full_n(size_c14_full_n),
    .n_out_write(readDataM2S_U0_n_out_write),
    .ap_ext_blocking_n(readDataM2S_U0_ap_ext_blocking_n),
    .ap_str_blocking_n(readDataM2S_U0_ap_str_blocking_n),
    .ap_int_blocking_n(readDataM2S_U0_ap_int_blocking_n)
);

Adler32Kernel_splitStrm splitStrm_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(splitStrm_U0_ap_start),
    .ap_done(splitStrm_U0_ap_done),
    .ap_continue(splitStrm_U0_ap_continue),
    .ap_idle(splitStrm_U0_ap_idle),
    .ap_ready(splitStrm_U0_ap_ready),
    .inStrm_dout(data512Strm_dout),
    .inStrm_empty_n(data512Strm_empty_n),
    .inStrm_read(splitStrm_U0_inStrm_read),
    .outStrm_din(splitStrm_U0_outStrm_din),
    .outStrm_full_n(dataStrm_full_n),
    .outStrm_write(splitStrm_U0_outStrm_write),
    .n_dout(size_c14_dout),
    .n_empty_n(size_c14_empty_n),
    .n_read(splitStrm_U0_n_read),
    .ap_ext_blocking_n(splitStrm_U0_ap_ext_blocking_n),
    .ap_str_blocking_n(splitStrm_U0_ap_str_blocking_n),
    .ap_int_blocking_n(splitStrm_U0_ap_int_blocking_n)
);

Adler32Kernel_adler32_16_s adler32_16_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(adler32_16_U0_ap_start),
    .ap_done(adler32_16_U0_ap_done),
    .ap_continue(adler32_16_U0_ap_continue),
    .ap_idle(adler32_16_U0_ap_idle),
    .ap_ready(adler32_16_U0_ap_ready),
    .adlerStrm_dout(adlerStrm_dout),
    .adlerStrm_empty_n(adlerStrm_empty_n),
    .adlerStrm_read(adler32_16_U0_adlerStrm_read),
    .inStrm_dout(dataStrm_dout),
    .inStrm_empty_n(dataStrm_empty_n),
    .inStrm_read(adler32_16_U0_inStrm_read),
    .inLenStrm_dout(lenStrm_dout),
    .inLenStrm_empty_n(lenStrm_empty_n),
    .inLenStrm_read(adler32_16_U0_inLenStrm_read),
    .endInLenStrm_dout(endStrm_dout),
    .endInLenStrm_empty_n(endStrm_empty_n),
    .endInLenStrm_read(adler32_16_U0_endInLenStrm_read),
    .outStrm_din(adler32_16_U0_outStrm_din),
    .outStrm_full_n(adler32Strm_full_n),
    .outStrm_write(adler32_16_U0_outStrm_write),
    .endOutStrm_din(adler32_16_U0_endOutStrm_din),
    .endOutStrm_full_n(adler32EndStrm_full_n),
    .endOutStrm_write(adler32_16_U0_endOutStrm_write),
    .ap_ext_blocking_n(adler32_16_U0_ap_ext_blocking_n),
    .ap_str_blocking_n(adler32_16_U0_ap_str_blocking_n),
    .ap_int_blocking_n(adler32_16_U0_ap_int_blocking_n)
);

Adler32Kernel_writeS2M writeS2M_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(writeS2M_U0_ap_start),
    .ap_done(writeS2M_U0_ap_done),
    .ap_continue(writeS2M_U0_ap_continue),
    .ap_idle(writeS2M_U0_ap_idle),
    .ap_ready(writeS2M_U0_ap_ready),
    .inStrm_dout(adler32Strm_dout),
    .inStrm_empty_n(adler32Strm_empty_n),
    .inStrm_read(writeS2M_U0_inStrm_read),
    .endStrm_dout(adler32EndStrm_dout),
    .endStrm_empty_n(adler32EndStrm_empty_n),
    .endStrm_read(writeS2M_U0_endStrm_read),
    .m_axi_gmem3_AWVALID(writeS2M_U0_m_axi_gmem3_AWVALID),
    .m_axi_gmem3_AWREADY(gmem3_AWREADY),
    .m_axi_gmem3_AWADDR(writeS2M_U0_m_axi_gmem3_AWADDR),
    .m_axi_gmem3_AWID(writeS2M_U0_m_axi_gmem3_AWID),
    .m_axi_gmem3_AWLEN(writeS2M_U0_m_axi_gmem3_AWLEN),
    .m_axi_gmem3_AWSIZE(writeS2M_U0_m_axi_gmem3_AWSIZE),
    .m_axi_gmem3_AWBURST(writeS2M_U0_m_axi_gmem3_AWBURST),
    .m_axi_gmem3_AWLOCK(writeS2M_U0_m_axi_gmem3_AWLOCK),
    .m_axi_gmem3_AWCACHE(writeS2M_U0_m_axi_gmem3_AWCACHE),
    .m_axi_gmem3_AWPROT(writeS2M_U0_m_axi_gmem3_AWPROT),
    .m_axi_gmem3_AWQOS(writeS2M_U0_m_axi_gmem3_AWQOS),
    .m_axi_gmem3_AWREGION(writeS2M_U0_m_axi_gmem3_AWREGION),
    .m_axi_gmem3_AWUSER(writeS2M_U0_m_axi_gmem3_AWUSER),
    .m_axi_gmem3_WVALID(writeS2M_U0_m_axi_gmem3_WVALID),
    .m_axi_gmem3_WREADY(gmem3_WREADY),
    .m_axi_gmem3_WDATA(writeS2M_U0_m_axi_gmem3_WDATA),
    .m_axi_gmem3_WSTRB(writeS2M_U0_m_axi_gmem3_WSTRB),
    .m_axi_gmem3_WLAST(writeS2M_U0_m_axi_gmem3_WLAST),
    .m_axi_gmem3_WID(writeS2M_U0_m_axi_gmem3_WID),
    .m_axi_gmem3_WUSER(writeS2M_U0_m_axi_gmem3_WUSER),
    .m_axi_gmem3_ARVALID(writeS2M_U0_m_axi_gmem3_ARVALID),
    .m_axi_gmem3_ARREADY(1'b0),
    .m_axi_gmem3_ARADDR(writeS2M_U0_m_axi_gmem3_ARADDR),
    .m_axi_gmem3_ARID(writeS2M_U0_m_axi_gmem3_ARID),
    .m_axi_gmem3_ARLEN(writeS2M_U0_m_axi_gmem3_ARLEN),
    .m_axi_gmem3_ARSIZE(writeS2M_U0_m_axi_gmem3_ARSIZE),
    .m_axi_gmem3_ARBURST(writeS2M_U0_m_axi_gmem3_ARBURST),
    .m_axi_gmem3_ARLOCK(writeS2M_U0_m_axi_gmem3_ARLOCK),
    .m_axi_gmem3_ARCACHE(writeS2M_U0_m_axi_gmem3_ARCACHE),
    .m_axi_gmem3_ARPROT(writeS2M_U0_m_axi_gmem3_ARPROT),
    .m_axi_gmem3_ARQOS(writeS2M_U0_m_axi_gmem3_ARQOS),
    .m_axi_gmem3_ARREGION(writeS2M_U0_m_axi_gmem3_ARREGION),
    .m_axi_gmem3_ARUSER(writeS2M_U0_m_axi_gmem3_ARUSER),
    .m_axi_gmem3_RVALID(1'b0),
    .m_axi_gmem3_RREADY(writeS2M_U0_m_axi_gmem3_RREADY),
    .m_axi_gmem3_RDATA(32'd0),
    .m_axi_gmem3_RLAST(1'b0),
    .m_axi_gmem3_RID(1'd0),
    .m_axi_gmem3_RUSER(1'd0),
    .m_axi_gmem3_RRESP(2'd0),
    .m_axi_gmem3_BVALID(gmem3_BVALID),
    .m_axi_gmem3_BREADY(writeS2M_U0_m_axi_gmem3_BREADY),
    .m_axi_gmem3_BRESP(gmem3_BRESP),
    .m_axi_gmem3_BID(gmem3_BID),
    .m_axi_gmem3_BUSER(gmem3_BUSER),
    .n_dout(num_c13_dout),
    .n_empty_n(num_c13_empty_n),
    .n_read(writeS2M_U0_n_read),
    .adler32Result_dout(adler32Result_c_dout),
    .adler32Result_empty_n(adler32Result_c_empty_n),
    .adler32Result_read(writeS2M_U0_adler32Result_read),
    .ap_ext_blocking_n(writeS2M_U0_ap_ext_blocking_n),
    .ap_str_blocking_n(writeS2M_U0_ap_str_blocking_n),
    .ap_int_blocking_n(writeS2M_U0_ap_int_blocking_n)
);

Adler32Kernel_fifo_w32_d2_S num_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Adler32Kernel_entry3_U0_num_out_din),
    .if_full_n(num_c_full_n),
    .if_write(Adler32Kernel_entry3_U0_num_out_write),
    .if_dout(num_c_dout),
    .if_empty_n(num_c_empty_n),
    .if_read(readLenM2S_U0_n_read)
);

Adler32Kernel_fifo_w32_d5_S num_c13_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Adler32Kernel_entry3_U0_num_out1_din),
    .if_full_n(num_c13_full_n),
    .if_write(Adler32Kernel_entry3_U0_num_out1_write),
    .if_dout(num_c13_dout),
    .if_empty_n(num_c13_empty_n),
    .if_read(writeS2M_U0_n_read)
);

Adler32Kernel_fifo_w32_d2_S size_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Adler32Kernel_entry3_U0_size_out_din),
    .if_full_n(size_c_full_n),
    .if_write(Adler32Kernel_entry3_U0_size_out_write),
    .if_dout(size_c_dout),
    .if_empty_n(size_c_empty_n),
    .if_read(readDataM2S_U0_n_read)
);

Adler32Kernel_fifo_w64_d2_S len_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Adler32Kernel_entry3_U0_len_out_din),
    .if_full_n(len_c_full_n),
    .if_write(Adler32Kernel_entry3_U0_len_out_write),
    .if_dout(len_c_dout),
    .if_empty_n(len_c_empty_n),
    .if_read(readLenM2S_U0_inData_read)
);

Adler32Kernel_fifo_w64_d2_S adler_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Adler32Kernel_entry3_U0_adler_out_din),
    .if_full_n(adler_c_full_n),
    .if_write(Adler32Kernel_entry3_U0_adler_out_write),
    .if_dout(adler_c_dout),
    .if_empty_n(adler_c_empty_n),
    .if_read(readLenM2S_U0_inData2_read)
);

Adler32Kernel_fifo_w64_d2_S inData_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Adler32Kernel_entry3_U0_inData_out_din),
    .if_full_n(inData_c_full_n),
    .if_write(Adler32Kernel_entry3_U0_inData_out_write),
    .if_dout(inData_c_dout),
    .if_empty_n(inData_c_empty_n),
    .if_read(readDataM2S_U0_inData_read)
);

Adler32Kernel_fifo_w64_d5_S adler32Result_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Adler32Kernel_entry3_U0_adler32Result_out_din),
    .if_full_n(adler32Result_c_full_n),
    .if_write(Adler32Kernel_entry3_U0_adler32Result_out_write),
    .if_dout(adler32Result_c_dout),
    .if_empty_n(adler32Result_c_empty_n),
    .if_read(writeS2M_U0_adler32Result_read)
);

Adler32Kernel_fifo_w32_d16_S lenStrm_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(readLenM2S_U0_outDataStrm_din),
    .if_full_n(lenStrm_full_n),
    .if_write(readLenM2S_U0_outDataStrm_write),
    .if_dout(lenStrm_dout),
    .if_empty_n(lenStrm_empty_n),
    .if_read(adler32_16_U0_inLenStrm_read)
);

Adler32Kernel_fifo_w32_d16_S adlerStrm_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(readLenM2S_U0_outData2Strm_din),
    .if_full_n(adlerStrm_full_n),
    .if_write(readLenM2S_U0_outData2Strm_write),
    .if_dout(adlerStrm_dout),
    .if_empty_n(adlerStrm_empty_n),
    .if_read(adler32_16_U0_adlerStrm_read)
);

Adler32Kernel_fifo_w1_d16_S endStrm_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(readLenM2S_U0_outEndStrm_din),
    .if_full_n(endStrm_full_n),
    .if_write(readLenM2S_U0_outEndStrm_write),
    .if_dout(endStrm_dout),
    .if_empty_n(endStrm_empty_n),
    .if_read(adler32_16_U0_endInLenStrm_read)
);

Adler32Kernel_fifo_w512_d64_A data512Strm_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(readDataM2S_U0_outDataStrm_din),
    .if_full_n(data512Strm_full_n),
    .if_write(readDataM2S_U0_outDataStrm_write),
    .if_dout(data512Strm_dout),
    .if_empty_n(data512Strm_empty_n),
    .if_read(splitStrm_U0_inStrm_read)
);

Adler32Kernel_fifo_w32_d2_S size_c14_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(readDataM2S_U0_n_out_din),
    .if_full_n(size_c14_full_n),
    .if_write(readDataM2S_U0_n_out_write),
    .if_dout(size_c14_dout),
    .if_empty_n(size_c14_empty_n),
    .if_read(splitStrm_U0_n_read)
);

Adler32Kernel_fifo_w128_d16_A dataStrm_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(splitStrm_U0_outStrm_din),
    .if_full_n(dataStrm_full_n),
    .if_write(splitStrm_U0_outStrm_write),
    .if_dout(dataStrm_dout),
    .if_empty_n(dataStrm_empty_n),
    .if_read(adler32_16_U0_inStrm_read)
);

Adler32Kernel_fifo_w32_d16_S adler32Strm_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(adler32_16_U0_outStrm_din),
    .if_full_n(adler32Strm_full_n),
    .if_write(adler32_16_U0_outStrm_write),
    .if_dout(adler32Strm_dout),
    .if_empty_n(adler32Strm_empty_n),
    .if_read(writeS2M_U0_inStrm_read)
);

Adler32Kernel_fifo_w1_d16_S adler32EndStrm_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(adler32_16_U0_endOutStrm_din),
    .if_full_n(adler32EndStrm_full_n),
    .if_write(adler32_16_U0_endOutStrm_write),
    .if_dout(adler32EndStrm_dout),
    .if_empty_n(adler32EndStrm_empty_n),
    .if_read(writeS2M_U0_endStrm_read)
);

Adler32Kernel_start_for_writeS2M_U0 start_for_writeS2M_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_writeS2M_U0_din),
    .if_full_n(start_for_writeS2M_U0_full_n),
    .if_write(Adler32Kernel_entry3_U0_start_write),
    .if_dout(start_for_writeS2M_U0_dout),
    .if_empty_n(start_for_writeS2M_U0_empty_n),
    .if_read(writeS2M_U0_ap_ready)
);

Adler32Kernel_start_for_adler32_16_U0 start_for_adler32_16_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_adler32_16_U0_din),
    .if_full_n(start_for_adler32_16_U0_full_n),
    .if_write(readLenM2S_U0_start_write),
    .if_dout(start_for_adler32_16_U0_dout),
    .if_empty_n(start_for_adler32_16_U0_empty_n),
    .if_read(adler32_16_U0_ap_ready)
);

Adler32Kernel_start_for_splitStrm_U0 start_for_splitStrm_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_splitStrm_U0_din),
    .if_full_n(start_for_splitStrm_U0_full_n),
    .if_write(readDataM2S_U0_start_write),
    .if_dout(start_for_splitStrm_U0_dout),
    .if_empty_n(start_for_splitStrm_U0_empty_n),
    .if_read(splitStrm_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready <= ap_sync_Adler32Kernel_entry3_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_readDataM2S_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_readDataM2S_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_readDataM2S_U0_ap_ready <= ap_sync_readDataM2S_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_readLenM2S_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_readLenM2S_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_readLenM2S_U0_ap_ready <= ap_sync_readLenM2S_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == Adler32Kernel_entry3_U0_ap_ready) & (ap_sync_ready == 1'b1))) begin
        Adler32Kernel_entry3_U0_ap_ready_count <= (Adler32Kernel_entry3_U0_ap_ready_count - 2'd1);
    end else if (((1'b1 == Adler32Kernel_entry3_U0_ap_ready) & (ap_sync_ready == 1'b0))) begin
        Adler32Kernel_entry3_U0_ap_ready_count <= (Adler32Kernel_entry3_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    ap_ext_blocking_n_reg <= ap_ext_blocking_n;
end

always @ (posedge ap_clk) begin
    ap_int_blocking_n_reg <= ap_int_blocking_n;
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    ap_str_blocking_n_reg <= ap_str_blocking_n;
end

always @ (posedge ap_clk) begin
    if (((readDataM2S_U0_ap_ready == 1'b0) & (ap_sync_ready == 1'b1))) begin
        readDataM2S_U0_ap_ready_count <= (readDataM2S_U0_ap_ready_count - 2'd1);
    end else if (((readDataM2S_U0_ap_ready == 1'b1) & (ap_sync_ready == 1'b0))) begin
        readDataM2S_U0_ap_ready_count <= (readDataM2S_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((readLenM2S_U0_ap_ready == 1'b0) & (ap_sync_ready == 1'b1))) begin
        readLenM2S_U0_ap_ready_count <= (readLenM2S_U0_ap_ready_count - 2'd1);
    end else if (((readLenM2S_U0_ap_ready == 1'b1) & (ap_sync_ready == 1'b0))) begin
        readLenM2S_U0_ap_ready_count <= (readLenM2S_U0_ap_ready_count + 2'd1);
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b0) & (ap_ext_blocking_n == 1'b1))) begin
        stall_done_ext = 1'b1;
    end else begin
        stall_done_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b0) & (ap_int_blocking_n == 1'b1))) begin
        stall_done_int = 1'b1;
    end else begin
        stall_done_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b0) & (ap_str_blocking_n == 1'b1))) begin
        stall_done_str = 1'b1;
    end else begin
        stall_done_str = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b1) & (ap_ext_blocking_n == 1'b0))) begin
        stall_start_ext = 1'b1;
    end else begin
        stall_start_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b1) & (ap_int_blocking_n == 1'b0))) begin
        stall_start_int = 1'b1;
    end else begin
        stall_start_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b1) & (ap_str_blocking_n == 1'b0))) begin
        stall_start_str = 1'b1;
    end else begin
        stall_start_str = 1'b0;
    end
end

assign Adler32Kernel_entry3_U0_ap_continue = 1'b1;

assign Adler32Kernel_entry3_U0_ap_start = ((ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready ^ 1'b1) & ap_start);

assign adler32_16_U0_ap_continue = 1'b1;

assign adler32_16_U0_ap_start = start_for_adler32_16_U0_empty_n;

assign adler32_16_U0_start_full_n = 1'b1;

assign adler32_16_U0_start_write = 1'b0;

assign ap_done = writeS2M_U0_ap_done;

assign ap_ext_blocking_cur_n = 1'b1;

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & ap_ext_blocking_cur_n);

assign ap_ext_blocking_sub_n = (writeS2M_U0_ap_ext_blocking_n & splitStrm_U0_ap_ext_blocking_n & readLenM2S_U0_ap_ext_blocking_n & readDataM2S_U0_ap_ext_blocking_n & adler32_16_U0_ap_ext_blocking_n & Adler32Kernel_entry3_U0_ap_ext_blocking_n);

assign ap_idle = (writeS2M_U0_ap_idle & splitStrm_U0_ap_idle & readLenM2S_U0_ap_idle & readDataM2S_U0_ap_idle & adler32_16_U0_ap_idle & Adler32Kernel_entry3_U0_ap_idle);

assign ap_int_blocking_cur_n = 1'b1;

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_int_blocking_sub_n = (writeS2M_U0_ap_int_blocking_n & splitStrm_U0_ap_int_blocking_n & readLenM2S_U0_ap_int_blocking_n & readDataM2S_U0_ap_int_blocking_n & adler32_16_U0_ap_int_blocking_n & Adler32Kernel_entry3_U0_ap_int_blocking_n);

assign ap_ready = ap_sync_ready;

assign ap_str_blocking_cur_n = 1'b1;

assign ap_str_blocking_n = (ap_str_blocking_sub_n & ap_str_blocking_cur_n);

assign ap_str_blocking_sub_n = (writeS2M_U0_ap_str_blocking_n & splitStrm_U0_ap_str_blocking_n & readLenM2S_U0_ap_str_blocking_n & readDataM2S_U0_ap_str_blocking_n & adler32_16_U0_ap_str_blocking_n & Adler32Kernel_entry3_U0_ap_str_blocking_n);

assign ap_sync_Adler32Kernel_entry3_U0_ap_ready = (ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready | Adler32Kernel_entry3_U0_ap_ready);

assign ap_sync_continue = ap_continue;

assign ap_sync_done = writeS2M_U0_ap_done;

assign ap_sync_readDataM2S_U0_ap_ready = (readDataM2S_U0_ap_ready | ap_sync_reg_readDataM2S_U0_ap_ready);

assign ap_sync_readLenM2S_U0_ap_ready = (readLenM2S_U0_ap_ready | ap_sync_reg_readLenM2S_U0_ap_ready);

assign ap_sync_ready = (ap_sync_readLenM2S_U0_ap_ready & ap_sync_readDataM2S_U0_ap_ready & ap_sync_Adler32Kernel_entry3_U0_ap_ready);

assign event_done = ap_done;

assign readDataM2S_U0_ap_continue = 1'b1;

assign readDataM2S_U0_ap_start = ((ap_sync_reg_readDataM2S_U0_ap_ready ^ 1'b1) & ap_start);

assign readLenM2S_U0_ap_continue = 1'b1;

assign readLenM2S_U0_ap_start = ((ap_sync_reg_readLenM2S_U0_ap_ready ^ 1'b1) & ap_start);

assign splitStrm_U0_ap_continue = 1'b1;

assign splitStrm_U0_ap_start = start_for_splitStrm_U0_empty_n;

assign splitStrm_U0_start_full_n = 1'b1;

assign splitStrm_U0_start_write = 1'b0;

assign start_for_adler32_16_U0_din = 1'b1;

assign start_for_splitStrm_U0_din = 1'b1;

assign start_for_writeS2M_U0_din = 1'b1;

assign writeS2M_U0_ap_continue = ap_continue;

assign writeS2M_U0_ap_start = start_for_writeS2M_U0_empty_n;

assign writeS2M_U0_start_full_n = 1'b1;

assign writeS2M_U0_start_write = 1'b0;

endmodule //Adler32Kernel
