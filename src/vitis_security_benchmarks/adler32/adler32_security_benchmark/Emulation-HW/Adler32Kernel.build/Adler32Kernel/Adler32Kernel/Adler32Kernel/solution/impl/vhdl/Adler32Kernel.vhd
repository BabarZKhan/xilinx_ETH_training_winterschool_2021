-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Adler32Kernel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM3_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    event_done : OUT STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    event_start : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_WUSER_WIDTH-1 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_RUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_BUSER_WIDTH-1 downto 0);
    stall_start_ext : OUT STD_LOGIC;
    stall_done_ext : OUT STD_LOGIC;
    stall_start_str : OUT STD_LOGIC;
    stall_done_str : OUT STD_LOGIC;
    stall_start_int : OUT STD_LOGIC;
    stall_done_int : OUT STD_LOGIC );
end;


architecture behav of Adler32Kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Adler32Kernel_Adler32Kernel,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=42.940000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=55,HLS_SYN_DSP=0,HLS_SYN_FF=9960,HLS_SYN_LUT=15654,HLS_VERSION=2020_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_4 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal num : STD_LOGIC_VECTOR (31 downto 0);
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal len : STD_LOGIC_VECTOR (63 downto 0);
    signal adler : STD_LOGIC_VECTOR (63 downto 0);
    signal inData : STD_LOGIC_VECTOR (63 downto 0);
    signal adler32Result : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem2_RLAST : STD_LOGIC;
    signal gmem2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_AWREADY : STD_LOGIC;
    signal gmem3_WREADY : STD_LOGIC;
    signal gmem3_ARREADY : STD_LOGIC;
    signal gmem3_RVALID : STD_LOGIC;
    signal gmem3_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_RLAST : STD_LOGIC;
    signal gmem3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BVALID : STD_LOGIC;
    signal gmem3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Adler32Kernel_entry3_U0_ap_start : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_ap_done : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_ap_continue : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_ap_idle : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_ap_ready : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_start_out : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_start_write : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_num_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Adler32Kernel_entry3_U0_num_out_write : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_num_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Adler32Kernel_entry3_U0_num_out1_write : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Adler32Kernel_entry3_U0_size_out_write : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_len_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal Adler32Kernel_entry3_U0_len_out_write : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_adler_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal Adler32Kernel_entry3_U0_adler_out_write : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_inData_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal Adler32Kernel_entry3_U0_inData_out_write : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_adler32Result_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal Adler32Kernel_entry3_U0_adler32Result_out_write : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_ap_ext_blocking_n : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_ap_str_blocking_n : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_ap_int_blocking_n : STD_LOGIC;
    signal readLenM2S_U0_ap_start : STD_LOGIC;
    signal readLenM2S_U0_ap_done : STD_LOGIC;
    signal readLenM2S_U0_ap_continue : STD_LOGIC;
    signal readLenM2S_U0_ap_idle : STD_LOGIC;
    signal readLenM2S_U0_ap_ready : STD_LOGIC;
    signal readLenM2S_U0_start_out : STD_LOGIC;
    signal readLenM2S_U0_start_write : STD_LOGIC;
    signal readLenM2S_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal readLenM2S_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal readLenM2S_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal readLenM2S_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal readLenM2S_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readLenM2S_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal readLenM2S_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal readLenM2S_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal readLenM2S_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal readLenM2S_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal readLenM2S_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal readLenM2S_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readLenM2S_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal readLenM2S_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal readLenM2S_U0_outDataStrm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal readLenM2S_U0_outDataStrm_write : STD_LOGIC;
    signal readLenM2S_U0_outData2Strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal readLenM2S_U0_outData2Strm_write : STD_LOGIC;
    signal readLenM2S_U0_outEndStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal readLenM2S_U0_outEndStrm_write : STD_LOGIC;
    signal readLenM2S_U0_n_read : STD_LOGIC;
    signal readLenM2S_U0_inData_read : STD_LOGIC;
    signal readLenM2S_U0_inData2_read : STD_LOGIC;
    signal readLenM2S_U0_ap_ext_blocking_n : STD_LOGIC;
    signal readLenM2S_U0_ap_str_blocking_n : STD_LOGIC;
    signal readLenM2S_U0_ap_int_blocking_n : STD_LOGIC;
    signal readDataM2S_U0_ap_start : STD_LOGIC;
    signal readDataM2S_U0_ap_done : STD_LOGIC;
    signal readDataM2S_U0_ap_continue : STD_LOGIC;
    signal readDataM2S_U0_ap_idle : STD_LOGIC;
    signal readDataM2S_U0_ap_ready : STD_LOGIC;
    signal readDataM2S_U0_start_out : STD_LOGIC;
    signal readDataM2S_U0_start_write : STD_LOGIC;
    signal readDataM2S_U0_m_axi_gmem2_AWVALID : STD_LOGIC;
    signal readDataM2S_U0_m_axi_gmem2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_WVALID : STD_LOGIC;
    signal readDataM2S_U0_m_axi_gmem2_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_WLAST : STD_LOGIC;
    signal readDataM2S_U0_m_axi_gmem2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_ARVALID : STD_LOGIC;
    signal readDataM2S_U0_m_axi_gmem2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readDataM2S_U0_m_axi_gmem2_RREADY : STD_LOGIC;
    signal readDataM2S_U0_m_axi_gmem2_BREADY : STD_LOGIC;
    signal readDataM2S_U0_outDataStrm_din : STD_LOGIC_VECTOR (511 downto 0);
    signal readDataM2S_U0_outDataStrm_write : STD_LOGIC;
    signal readDataM2S_U0_n_read : STD_LOGIC;
    signal readDataM2S_U0_inData_read : STD_LOGIC;
    signal readDataM2S_U0_n_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal readDataM2S_U0_n_out_write : STD_LOGIC;
    signal readDataM2S_U0_ap_ext_blocking_n : STD_LOGIC;
    signal readDataM2S_U0_ap_str_blocking_n : STD_LOGIC;
    signal readDataM2S_U0_ap_int_blocking_n : STD_LOGIC;
    signal splitStrm_U0_ap_start : STD_LOGIC;
    signal splitStrm_U0_ap_done : STD_LOGIC;
    signal splitStrm_U0_ap_continue : STD_LOGIC;
    signal splitStrm_U0_ap_idle : STD_LOGIC;
    signal splitStrm_U0_ap_ready : STD_LOGIC;
    signal splitStrm_U0_inStrm_read : STD_LOGIC;
    signal splitStrm_U0_outStrm_din : STD_LOGIC_VECTOR (127 downto 0);
    signal splitStrm_U0_outStrm_write : STD_LOGIC;
    signal splitStrm_U0_n_read : STD_LOGIC;
    signal splitStrm_U0_ap_ext_blocking_n : STD_LOGIC;
    signal splitStrm_U0_ap_str_blocking_n : STD_LOGIC;
    signal splitStrm_U0_ap_int_blocking_n : STD_LOGIC;
    signal adler32_16_U0_ap_start : STD_LOGIC;
    signal adler32_16_U0_ap_done : STD_LOGIC;
    signal adler32_16_U0_ap_continue : STD_LOGIC;
    signal adler32_16_U0_ap_idle : STD_LOGIC;
    signal adler32_16_U0_ap_ready : STD_LOGIC;
    signal adler32_16_U0_adlerStrm_read : STD_LOGIC;
    signal adler32_16_U0_inStrm_read : STD_LOGIC;
    signal adler32_16_U0_inLenStrm_read : STD_LOGIC;
    signal adler32_16_U0_endInLenStrm_read : STD_LOGIC;
    signal adler32_16_U0_outStrm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal adler32_16_U0_outStrm_write : STD_LOGIC;
    signal adler32_16_U0_endOutStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal adler32_16_U0_endOutStrm_write : STD_LOGIC;
    signal adler32_16_U0_ap_ext_blocking_n : STD_LOGIC;
    signal adler32_16_U0_ap_str_blocking_n : STD_LOGIC;
    signal adler32_16_U0_ap_int_blocking_n : STD_LOGIC;
    signal writeS2M_U0_ap_start : STD_LOGIC;
    signal writeS2M_U0_ap_done : STD_LOGIC;
    signal writeS2M_U0_ap_continue : STD_LOGIC;
    signal writeS2M_U0_ap_idle : STD_LOGIC;
    signal writeS2M_U0_ap_ready : STD_LOGIC;
    signal writeS2M_U0_inStrm_read : STD_LOGIC;
    signal writeS2M_U0_endStrm_read : STD_LOGIC;
    signal writeS2M_U0_m_axi_gmem3_AWVALID : STD_LOGIC;
    signal writeS2M_U0_m_axi_gmem3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writeS2M_U0_m_axi_gmem3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeS2M_U0_m_axi_gmem3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeS2M_U0_m_axi_gmem3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeS2M_U0_m_axi_gmem3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeS2M_U0_m_axi_gmem3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeS2M_U0_m_axi_gmem3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeS2M_U0_m_axi_gmem3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeS2M_U0_m_axi_gmem3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeS2M_U0_m_axi_gmem3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeS2M_U0_m_axi_gmem3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeS2M_U0_m_axi_gmem3_WVALID : STD_LOGIC;
    signal writeS2M_U0_m_axi_gmem3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal writeS2M_U0_m_axi_gmem3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal writeS2M_U0_m_axi_gmem3_WLAST : STD_LOGIC;
    signal writeS2M_U0_m_axi_gmem3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeS2M_U0_m_axi_gmem3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeS2M_U0_m_axi_gmem3_ARVALID : STD_LOGIC;
    signal writeS2M_U0_m_axi_gmem3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writeS2M_U0_m_axi_gmem3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeS2M_U0_m_axi_gmem3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeS2M_U0_m_axi_gmem3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeS2M_U0_m_axi_gmem3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeS2M_U0_m_axi_gmem3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeS2M_U0_m_axi_gmem3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeS2M_U0_m_axi_gmem3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeS2M_U0_m_axi_gmem3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeS2M_U0_m_axi_gmem3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeS2M_U0_m_axi_gmem3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeS2M_U0_m_axi_gmem3_RREADY : STD_LOGIC;
    signal writeS2M_U0_m_axi_gmem3_BREADY : STD_LOGIC;
    signal writeS2M_U0_n_read : STD_LOGIC;
    signal writeS2M_U0_adler32Result_read : STD_LOGIC;
    signal writeS2M_U0_ap_ext_blocking_n : STD_LOGIC;
    signal writeS2M_U0_ap_str_blocking_n : STD_LOGIC;
    signal writeS2M_U0_ap_int_blocking_n : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal num_c_full_n : STD_LOGIC;
    signal num_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c_empty_n : STD_LOGIC;
    signal num_c13_full_n : STD_LOGIC;
    signal num_c13_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal num_c13_empty_n : STD_LOGIC;
    signal size_c_full_n : STD_LOGIC;
    signal size_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal size_c_empty_n : STD_LOGIC;
    signal len_c_full_n : STD_LOGIC;
    signal len_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal len_c_empty_n : STD_LOGIC;
    signal adler_c_full_n : STD_LOGIC;
    signal adler_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal adler_c_empty_n : STD_LOGIC;
    signal inData_c_full_n : STD_LOGIC;
    signal inData_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal inData_c_empty_n : STD_LOGIC;
    signal adler32Result_c_full_n : STD_LOGIC;
    signal adler32Result_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal adler32Result_c_empty_n : STD_LOGIC;
    signal lenStrm_full_n : STD_LOGIC;
    signal lenStrm_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal lenStrm_empty_n : STD_LOGIC;
    signal adlerStrm_full_n : STD_LOGIC;
    signal adlerStrm_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal adlerStrm_empty_n : STD_LOGIC;
    signal endStrm_full_n : STD_LOGIC;
    signal endStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endStrm_empty_n : STD_LOGIC;
    signal data512Strm_full_n : STD_LOGIC;
    signal data512Strm_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal data512Strm_empty_n : STD_LOGIC;
    signal size_c14_full_n : STD_LOGIC;
    signal size_c14_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal size_c14_empty_n : STD_LOGIC;
    signal dataStrm_full_n : STD_LOGIC;
    signal dataStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal dataStrm_empty_n : STD_LOGIC;
    signal adler32Strm_full_n : STD_LOGIC;
    signal adler32Strm_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal adler32Strm_empty_n : STD_LOGIC;
    signal adler32EndStrm_full_n : STD_LOGIC;
    signal adler32EndStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal adler32EndStrm_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Adler32Kernel_entry3_U0_ap_ready : STD_LOGIC;
    signal Adler32Kernel_entry3_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_readLenM2S_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_readLenM2S_U0_ap_ready : STD_LOGIC;
    signal readLenM2S_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_readDataM2S_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_readDataM2S_U0_ap_ready : STD_LOGIC;
    signal readDataM2S_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_writeS2M_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_writeS2M_U0_full_n : STD_LOGIC;
    signal start_for_writeS2M_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_writeS2M_U0_empty_n : STD_LOGIC;
    signal start_for_adler32_16_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_adler32_16_U0_full_n : STD_LOGIC;
    signal start_for_adler32_16_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_adler32_16_U0_empty_n : STD_LOGIC;
    signal start_for_splitStrm_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_splitStrm_U0_full_n : STD_LOGIC;
    signal start_for_splitStrm_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_splitStrm_U0_empty_n : STD_LOGIC;
    signal splitStrm_U0_start_full_n : STD_LOGIC;
    signal splitStrm_U0_start_write : STD_LOGIC;
    signal adler32_16_U0_start_full_n : STD_LOGIC;
    signal adler32_16_U0_start_write : STD_LOGIC;
    signal writeS2M_U0_start_full_n : STD_LOGIC;
    signal writeS2M_U0_start_write : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_ext_blocking_n : STD_LOGIC;
    signal ap_str_blocking_n : STD_LOGIC;
    signal ap_int_blocking_n : STD_LOGIC;
    signal ap_ext_blocking_n_reg : STD_LOGIC;
    signal ap_str_blocking_n_reg : STD_LOGIC;
    signal ap_int_blocking_n_reg : STD_LOGIC;

    component Adler32Kernel_Adler32Kernel_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        num : IN STD_LOGIC_VECTOR (31 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        len : IN STD_LOGIC_VECTOR (63 downto 0);
        adler : IN STD_LOGIC_VECTOR (63 downto 0);
        inData : IN STD_LOGIC_VECTOR (63 downto 0);
        adler32Result : IN STD_LOGIC_VECTOR (63 downto 0);
        num_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_out_full_n : IN STD_LOGIC;
        num_out_write : OUT STD_LOGIC;
        num_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_out1_full_n : IN STD_LOGIC;
        num_out1_write : OUT STD_LOGIC;
        size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        size_out_full_n : IN STD_LOGIC;
        size_out_write : OUT STD_LOGIC;
        len_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        len_out_full_n : IN STD_LOGIC;
        len_out_write : OUT STD_LOGIC;
        adler_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        adler_out_full_n : IN STD_LOGIC;
        adler_out_write : OUT STD_LOGIC;
        inData_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        inData_out_full_n : IN STD_LOGIC;
        inData_out_write : OUT STD_LOGIC;
        adler32Result_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        adler32Result_out_full_n : IN STD_LOGIC;
        adler32Result_out_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Adler32Kernel_readLenM2S IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outDataStrm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outDataStrm_full_n : IN STD_LOGIC;
        outDataStrm_write : OUT STD_LOGIC;
        outData2Strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outData2Strm_full_n : IN STD_LOGIC;
        outData2Strm_write : OUT STD_LOGIC;
        outEndStrm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        outEndStrm_full_n : IN STD_LOGIC;
        outEndStrm_write : OUT STD_LOGIC;
        n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        n_empty_n : IN STD_LOGIC;
        n_read : OUT STD_LOGIC;
        inData_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        inData_empty_n : IN STD_LOGIC;
        inData_read : OUT STD_LOGIC;
        inData2_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        inData2_empty_n : IN STD_LOGIC;
        inData2_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Adler32Kernel_readDataM2S IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem2_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_WREADY : IN STD_LOGIC;
        m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RVALID : IN STD_LOGIC;
        m_axi_gmem2_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem2_RLAST : IN STD_LOGIC;
        m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BVALID : IN STD_LOGIC;
        m_axi_gmem2_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outDataStrm_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        outDataStrm_full_n : IN STD_LOGIC;
        outDataStrm_write : OUT STD_LOGIC;
        n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        n_empty_n : IN STD_LOGIC;
        n_read : OUT STD_LOGIC;
        inData_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        inData_empty_n : IN STD_LOGIC;
        inData_read : OUT STD_LOGIC;
        n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_out_full_n : IN STD_LOGIC;
        n_out_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Adler32Kernel_splitStrm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStrm_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        inStrm_empty_n : IN STD_LOGIC;
        inStrm_read : OUT STD_LOGIC;
        outStrm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        outStrm_full_n : IN STD_LOGIC;
        outStrm_write : OUT STD_LOGIC;
        n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        n_empty_n : IN STD_LOGIC;
        n_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Adler32Kernel_adler32_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        adlerStrm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        adlerStrm_empty_n : IN STD_LOGIC;
        adlerStrm_read : OUT STD_LOGIC;
        inStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        inStrm_empty_n : IN STD_LOGIC;
        inStrm_read : OUT STD_LOGIC;
        inLenStrm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inLenStrm_empty_n : IN STD_LOGIC;
        inLenStrm_read : OUT STD_LOGIC;
        endInLenStrm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        endInLenStrm_empty_n : IN STD_LOGIC;
        endInLenStrm_read : OUT STD_LOGIC;
        outStrm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outStrm_full_n : IN STD_LOGIC;
        outStrm_write : OUT STD_LOGIC;
        endOutStrm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        endOutStrm_full_n : IN STD_LOGIC;
        endOutStrm_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Adler32Kernel_writeS2M IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStrm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inStrm_empty_n : IN STD_LOGIC;
        inStrm_read : OUT STD_LOGIC;
        endStrm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        endStrm_empty_n : IN STD_LOGIC;
        endStrm_read : OUT STD_LOGIC;
        m_axi_gmem3_AWVALID : OUT STD_LOGIC;
        m_axi_gmem3_AWREADY : IN STD_LOGIC;
        m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WVALID : OUT STD_LOGIC;
        m_axi_gmem3_WREADY : IN STD_LOGIC;
        m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_WLAST : OUT STD_LOGIC;
        m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARVALID : OUT STD_LOGIC;
        m_axi_gmem3_ARREADY : IN STD_LOGIC;
        m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RVALID : IN STD_LOGIC;
        m_axi_gmem3_RREADY : OUT STD_LOGIC;
        m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_RLAST : IN STD_LOGIC;
        m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BVALID : IN STD_LOGIC;
        m_axi_gmem3_BREADY : OUT STD_LOGIC;
        m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        n_empty_n : IN STD_LOGIC;
        n_read : OUT STD_LOGIC;
        adler32Result_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        adler32Result_empty_n : IN STD_LOGIC;
        adler32Result_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Adler32Kernel_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Adler32Kernel_fifo_w32_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Adler32Kernel_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Adler32Kernel_fifo_w64_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Adler32Kernel_fifo_w32_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Adler32Kernel_fifo_w1_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Adler32Kernel_fifo_w512_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Adler32Kernel_fifo_w128_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Adler32Kernel_start_for_writeS2M_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Adler32Kernel_start_for_adler32_16_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Adler32Kernel_start_for_splitStrm_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Adler32Kernel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        num : OUT STD_LOGIC_VECTOR (31 downto 0);
        size : OUT STD_LOGIC_VECTOR (31 downto 0);
        len : OUT STD_LOGIC_VECTOR (63 downto 0);
        adler : OUT STD_LOGIC_VECTOR (63 downto 0);
        inData : OUT STD_LOGIC_VECTOR (63 downto 0);
        adler32Result : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        event_start : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component Adler32Kernel_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Adler32Kernel_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Adler32Kernel_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Adler32Kernel_gmem3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component Adler32Kernel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        num => num,
        size => size,
        len => len,
        adler => adler,
        inData => inData,
        adler32Result => adler32Result,
        ap_start => ap_start,
        interrupt => interrupt,
        event_start => event_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component Adler32Kernel_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 37,
        NUM_READ_OUTSTANDING => 32,
        NUM_WRITE_OUTSTANDING => 1,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 2,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => readLenM2S_U0_m_axi_gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => readLenM2S_U0_m_axi_gmem0_ARADDR,
        I_ARID => readLenM2S_U0_m_axi_gmem0_ARID,
        I_ARLEN => readLenM2S_U0_m_axi_gmem0_ARLEN,
        I_ARSIZE => readLenM2S_U0_m_axi_gmem0_ARSIZE,
        I_ARLOCK => readLenM2S_U0_m_axi_gmem0_ARLOCK,
        I_ARCACHE => readLenM2S_U0_m_axi_gmem0_ARCACHE,
        I_ARQOS => readLenM2S_U0_m_axi_gmem0_ARQOS,
        I_ARPROT => readLenM2S_U0_m_axi_gmem0_ARPROT,
        I_ARUSER => readLenM2S_U0_m_axi_gmem0_ARUSER,
        I_ARBURST => readLenM2S_U0_m_axi_gmem0_ARBURST,
        I_ARREGION => readLenM2S_U0_m_axi_gmem0_ARREGION,
        I_RVALID => gmem0_RVALID,
        I_RREADY => readLenM2S_U0_m_axi_gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    gmem1_m_axi_U : component Adler32Kernel_gmem1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 37,
        NUM_READ_OUTSTANDING => 32,
        NUM_WRITE_OUTSTANDING => 1,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 2,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => readLenM2S_U0_m_axi_gmem1_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => readLenM2S_U0_m_axi_gmem1_ARADDR,
        I_ARID => readLenM2S_U0_m_axi_gmem1_ARID,
        I_ARLEN => readLenM2S_U0_m_axi_gmem1_ARLEN,
        I_ARSIZE => readLenM2S_U0_m_axi_gmem1_ARSIZE,
        I_ARLOCK => readLenM2S_U0_m_axi_gmem1_ARLOCK,
        I_ARCACHE => readLenM2S_U0_m_axi_gmem1_ARCACHE,
        I_ARQOS => readLenM2S_U0_m_axi_gmem1_ARQOS,
        I_ARPROT => readLenM2S_U0_m_axi_gmem1_ARPROT,
        I_ARUSER => readLenM2S_U0_m_axi_gmem1_ARUSER,
        I_ARBURST => readLenM2S_U0_m_axi_gmem1_ARBURST,
        I_ARREGION => readLenM2S_U0_m_axi_gmem1_ARREGION,
        I_RVALID => gmem1_RVALID,
        I_RREADY => readLenM2S_U0_m_axi_gmem1_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    gmem2_m_axi_U : component Adler32Kernel_gmem2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 37,
        NUM_READ_OUTSTANDING => 32,
        NUM_WRITE_OUTSTANDING => 1,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 2,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => readDataM2S_U0_m_axi_gmem2_ARVALID,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => readDataM2S_U0_m_axi_gmem2_ARADDR,
        I_ARID => readDataM2S_U0_m_axi_gmem2_ARID,
        I_ARLEN => readDataM2S_U0_m_axi_gmem2_ARLEN,
        I_ARSIZE => readDataM2S_U0_m_axi_gmem2_ARSIZE,
        I_ARLOCK => readDataM2S_U0_m_axi_gmem2_ARLOCK,
        I_ARCACHE => readDataM2S_U0_m_axi_gmem2_ARCACHE,
        I_ARQOS => readDataM2S_U0_m_axi_gmem2_ARQOS,
        I_ARPROT => readDataM2S_U0_m_axi_gmem2_ARPROT,
        I_ARUSER => readDataM2S_U0_m_axi_gmem2_ARUSER,
        I_ARBURST => readDataM2S_U0_m_axi_gmem2_ARBURST,
        I_ARREGION => readDataM2S_U0_m_axi_gmem2_ARREGION,
        I_RVALID => gmem2_RVALID,
        I_RREADY => readDataM2S_U0_m_axi_gmem2_RREADY,
        I_RDATA => gmem2_RDATA,
        I_RID => gmem2_RID,
        I_RUSER => gmem2_RUSER,
        I_RRESP => gmem2_RRESP,
        I_RLAST => gmem2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem2_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem2_BRESP,
        I_BID => gmem2_BID,
        I_BUSER => gmem2_BUSER);

    gmem3_m_axi_U : component Adler32Kernel_gmem3_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 37,
        NUM_READ_OUTSTANDING => 1,
        NUM_WRITE_OUTSTANDING => 32,
        MAX_READ_BURST_LENGTH => 2,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem3_AWVALID,
        AWREADY => m_axi_gmem3_AWREADY,
        AWADDR => m_axi_gmem3_AWADDR,
        AWID => m_axi_gmem3_AWID,
        AWLEN => m_axi_gmem3_AWLEN,
        AWSIZE => m_axi_gmem3_AWSIZE,
        AWBURST => m_axi_gmem3_AWBURST,
        AWLOCK => m_axi_gmem3_AWLOCK,
        AWCACHE => m_axi_gmem3_AWCACHE,
        AWPROT => m_axi_gmem3_AWPROT,
        AWQOS => m_axi_gmem3_AWQOS,
        AWREGION => m_axi_gmem3_AWREGION,
        AWUSER => m_axi_gmem3_AWUSER,
        WVALID => m_axi_gmem3_WVALID,
        WREADY => m_axi_gmem3_WREADY,
        WDATA => m_axi_gmem3_WDATA,
        WSTRB => m_axi_gmem3_WSTRB,
        WLAST => m_axi_gmem3_WLAST,
        WID => m_axi_gmem3_WID,
        WUSER => m_axi_gmem3_WUSER,
        ARVALID => m_axi_gmem3_ARVALID,
        ARREADY => m_axi_gmem3_ARREADY,
        ARADDR => m_axi_gmem3_ARADDR,
        ARID => m_axi_gmem3_ARID,
        ARLEN => m_axi_gmem3_ARLEN,
        ARSIZE => m_axi_gmem3_ARSIZE,
        ARBURST => m_axi_gmem3_ARBURST,
        ARLOCK => m_axi_gmem3_ARLOCK,
        ARCACHE => m_axi_gmem3_ARCACHE,
        ARPROT => m_axi_gmem3_ARPROT,
        ARQOS => m_axi_gmem3_ARQOS,
        ARREGION => m_axi_gmem3_ARREGION,
        ARUSER => m_axi_gmem3_ARUSER,
        RVALID => m_axi_gmem3_RVALID,
        RREADY => m_axi_gmem3_RREADY,
        RDATA => m_axi_gmem3_RDATA,
        RLAST => m_axi_gmem3_RLAST,
        RID => m_axi_gmem3_RID,
        RUSER => m_axi_gmem3_RUSER,
        RRESP => m_axi_gmem3_RRESP,
        BVALID => m_axi_gmem3_BVALID,
        BREADY => m_axi_gmem3_BREADY,
        BRESP => m_axi_gmem3_BRESP,
        BID => m_axi_gmem3_BID,
        BUSER => m_axi_gmem3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem3_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem3_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem3_RDATA,
        I_RID => gmem3_RID,
        I_RUSER => gmem3_RUSER,
        I_RRESP => gmem3_RRESP,
        I_RLAST => gmem3_RLAST,
        I_AWVALID => writeS2M_U0_m_axi_gmem3_AWVALID,
        I_AWREADY => gmem3_AWREADY,
        I_AWADDR => writeS2M_U0_m_axi_gmem3_AWADDR,
        I_AWID => writeS2M_U0_m_axi_gmem3_AWID,
        I_AWLEN => writeS2M_U0_m_axi_gmem3_AWLEN,
        I_AWSIZE => writeS2M_U0_m_axi_gmem3_AWSIZE,
        I_AWLOCK => writeS2M_U0_m_axi_gmem3_AWLOCK,
        I_AWCACHE => writeS2M_U0_m_axi_gmem3_AWCACHE,
        I_AWQOS => writeS2M_U0_m_axi_gmem3_AWQOS,
        I_AWPROT => writeS2M_U0_m_axi_gmem3_AWPROT,
        I_AWUSER => writeS2M_U0_m_axi_gmem3_AWUSER,
        I_AWBURST => writeS2M_U0_m_axi_gmem3_AWBURST,
        I_AWREGION => writeS2M_U0_m_axi_gmem3_AWREGION,
        I_WVALID => writeS2M_U0_m_axi_gmem3_WVALID,
        I_WREADY => gmem3_WREADY,
        I_WDATA => writeS2M_U0_m_axi_gmem3_WDATA,
        I_WID => writeS2M_U0_m_axi_gmem3_WID,
        I_WUSER => writeS2M_U0_m_axi_gmem3_WUSER,
        I_WLAST => writeS2M_U0_m_axi_gmem3_WLAST,
        I_WSTRB => writeS2M_U0_m_axi_gmem3_WSTRB,
        I_BVALID => gmem3_BVALID,
        I_BREADY => writeS2M_U0_m_axi_gmem3_BREADY,
        I_BRESP => gmem3_BRESP,
        I_BID => gmem3_BID,
        I_BUSER => gmem3_BUSER);

    Adler32Kernel_entry3_U0 : component Adler32Kernel_Adler32Kernel_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Adler32Kernel_entry3_U0_ap_start,
        start_full_n => start_for_writeS2M_U0_full_n,
        ap_done => Adler32Kernel_entry3_U0_ap_done,
        ap_continue => Adler32Kernel_entry3_U0_ap_continue,
        ap_idle => Adler32Kernel_entry3_U0_ap_idle,
        ap_ready => Adler32Kernel_entry3_U0_ap_ready,
        start_out => Adler32Kernel_entry3_U0_start_out,
        start_write => Adler32Kernel_entry3_U0_start_write,
        num => num,
        size => size,
        len => len,
        adler => adler,
        inData => inData,
        adler32Result => adler32Result,
        num_out_din => Adler32Kernel_entry3_U0_num_out_din,
        num_out_full_n => num_c_full_n,
        num_out_write => Adler32Kernel_entry3_U0_num_out_write,
        num_out1_din => Adler32Kernel_entry3_U0_num_out1_din,
        num_out1_full_n => num_c13_full_n,
        num_out1_write => Adler32Kernel_entry3_U0_num_out1_write,
        size_out_din => Adler32Kernel_entry3_U0_size_out_din,
        size_out_full_n => size_c_full_n,
        size_out_write => Adler32Kernel_entry3_U0_size_out_write,
        len_out_din => Adler32Kernel_entry3_U0_len_out_din,
        len_out_full_n => len_c_full_n,
        len_out_write => Adler32Kernel_entry3_U0_len_out_write,
        adler_out_din => Adler32Kernel_entry3_U0_adler_out_din,
        adler_out_full_n => adler_c_full_n,
        adler_out_write => Adler32Kernel_entry3_U0_adler_out_write,
        inData_out_din => Adler32Kernel_entry3_U0_inData_out_din,
        inData_out_full_n => inData_c_full_n,
        inData_out_write => Adler32Kernel_entry3_U0_inData_out_write,
        adler32Result_out_din => Adler32Kernel_entry3_U0_adler32Result_out_din,
        adler32Result_out_full_n => adler32Result_c_full_n,
        adler32Result_out_write => Adler32Kernel_entry3_U0_adler32Result_out_write,
        ap_ext_blocking_n => Adler32Kernel_entry3_U0_ap_ext_blocking_n,
        ap_str_blocking_n => Adler32Kernel_entry3_U0_ap_str_blocking_n,
        ap_int_blocking_n => Adler32Kernel_entry3_U0_ap_int_blocking_n);

    readLenM2S_U0 : component Adler32Kernel_readLenM2S
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => readLenM2S_U0_ap_start,
        start_full_n => start_for_adler32_16_U0_full_n,
        ap_done => readLenM2S_U0_ap_done,
        ap_continue => readLenM2S_U0_ap_continue,
        ap_idle => readLenM2S_U0_ap_idle,
        ap_ready => readLenM2S_U0_ap_ready,
        start_out => readLenM2S_U0_start_out,
        start_write => readLenM2S_U0_start_write,
        m_axi_gmem0_AWVALID => readLenM2S_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => readLenM2S_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => readLenM2S_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => readLenM2S_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => readLenM2S_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => readLenM2S_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => readLenM2S_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => readLenM2S_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => readLenM2S_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => readLenM2S_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => readLenM2S_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => readLenM2S_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => readLenM2S_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => readLenM2S_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => readLenM2S_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => readLenM2S_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => readLenM2S_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => readLenM2S_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => readLenM2S_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => readLenM2S_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => readLenM2S_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => readLenM2S_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => readLenM2S_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => readLenM2S_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => readLenM2S_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => readLenM2S_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => readLenM2S_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => readLenM2S_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => readLenM2S_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => readLenM2S_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => readLenM2S_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => gmem0_RLAST,
        m_axi_gmem0_RID => gmem0_RID,
        m_axi_gmem0_RUSER => gmem0_RUSER,
        m_axi_gmem0_RRESP => gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => readLenM2S_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        m_axi_gmem1_AWVALID => readLenM2S_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => readLenM2S_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => readLenM2S_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => readLenM2S_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => readLenM2S_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => readLenM2S_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => readLenM2S_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => readLenM2S_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => readLenM2S_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => readLenM2S_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => readLenM2S_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => readLenM2S_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => readLenM2S_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => readLenM2S_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => readLenM2S_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => readLenM2S_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => readLenM2S_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => readLenM2S_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => readLenM2S_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => gmem1_ARREADY,
        m_axi_gmem1_ARADDR => readLenM2S_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => readLenM2S_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => readLenM2S_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => readLenM2S_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => readLenM2S_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => readLenM2S_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => readLenM2S_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => readLenM2S_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => readLenM2S_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => readLenM2S_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => readLenM2S_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => gmem1_RVALID,
        m_axi_gmem1_RREADY => readLenM2S_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => gmem1_RDATA,
        m_axi_gmem1_RLAST => gmem1_RLAST,
        m_axi_gmem1_RID => gmem1_RID,
        m_axi_gmem1_RUSER => gmem1_RUSER,
        m_axi_gmem1_RRESP => gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => readLenM2S_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        outDataStrm_din => readLenM2S_U0_outDataStrm_din,
        outDataStrm_full_n => lenStrm_full_n,
        outDataStrm_write => readLenM2S_U0_outDataStrm_write,
        outData2Strm_din => readLenM2S_U0_outData2Strm_din,
        outData2Strm_full_n => adlerStrm_full_n,
        outData2Strm_write => readLenM2S_U0_outData2Strm_write,
        outEndStrm_din => readLenM2S_U0_outEndStrm_din,
        outEndStrm_full_n => endStrm_full_n,
        outEndStrm_write => readLenM2S_U0_outEndStrm_write,
        n_dout => num_c_dout,
        n_empty_n => num_c_empty_n,
        n_read => readLenM2S_U0_n_read,
        inData_dout => len_c_dout,
        inData_empty_n => len_c_empty_n,
        inData_read => readLenM2S_U0_inData_read,
        inData2_dout => adler_c_dout,
        inData2_empty_n => adler_c_empty_n,
        inData2_read => readLenM2S_U0_inData2_read,
        ap_ext_blocking_n => readLenM2S_U0_ap_ext_blocking_n,
        ap_str_blocking_n => readLenM2S_U0_ap_str_blocking_n,
        ap_int_blocking_n => readLenM2S_U0_ap_int_blocking_n);

    readDataM2S_U0 : component Adler32Kernel_readDataM2S
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => readDataM2S_U0_ap_start,
        start_full_n => start_for_splitStrm_U0_full_n,
        ap_done => readDataM2S_U0_ap_done,
        ap_continue => readDataM2S_U0_ap_continue,
        ap_idle => readDataM2S_U0_ap_idle,
        ap_ready => readDataM2S_U0_ap_ready,
        start_out => readDataM2S_U0_start_out,
        start_write => readDataM2S_U0_start_write,
        m_axi_gmem2_AWVALID => readDataM2S_U0_m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY => ap_const_logic_0,
        m_axi_gmem2_AWADDR => readDataM2S_U0_m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID => readDataM2S_U0_m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN => readDataM2S_U0_m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE => readDataM2S_U0_m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST => readDataM2S_U0_m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK => readDataM2S_U0_m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE => readDataM2S_U0_m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT => readDataM2S_U0_m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS => readDataM2S_U0_m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION => readDataM2S_U0_m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER => readDataM2S_U0_m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID => readDataM2S_U0_m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY => ap_const_logic_0,
        m_axi_gmem2_WDATA => readDataM2S_U0_m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB => readDataM2S_U0_m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST => readDataM2S_U0_m_axi_gmem2_WLAST,
        m_axi_gmem2_WID => readDataM2S_U0_m_axi_gmem2_WID,
        m_axi_gmem2_WUSER => readDataM2S_U0_m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID => readDataM2S_U0_m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY => gmem2_ARREADY,
        m_axi_gmem2_ARADDR => readDataM2S_U0_m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID => readDataM2S_U0_m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN => readDataM2S_U0_m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE => readDataM2S_U0_m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST => readDataM2S_U0_m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK => readDataM2S_U0_m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE => readDataM2S_U0_m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT => readDataM2S_U0_m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS => readDataM2S_U0_m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION => readDataM2S_U0_m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER => readDataM2S_U0_m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID => gmem2_RVALID,
        m_axi_gmem2_RREADY => readDataM2S_U0_m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA => gmem2_RDATA,
        m_axi_gmem2_RLAST => gmem2_RLAST,
        m_axi_gmem2_RID => gmem2_RID,
        m_axi_gmem2_RUSER => gmem2_RUSER,
        m_axi_gmem2_RRESP => gmem2_RRESP,
        m_axi_gmem2_BVALID => ap_const_logic_0,
        m_axi_gmem2_BREADY => readDataM2S_U0_m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP => ap_const_lv2_0,
        m_axi_gmem2_BID => ap_const_lv1_0,
        m_axi_gmem2_BUSER => ap_const_lv1_0,
        outDataStrm_din => readDataM2S_U0_outDataStrm_din,
        outDataStrm_full_n => data512Strm_full_n,
        outDataStrm_write => readDataM2S_U0_outDataStrm_write,
        n_dout => size_c_dout,
        n_empty_n => size_c_empty_n,
        n_read => readDataM2S_U0_n_read,
        inData_dout => inData_c_dout,
        inData_empty_n => inData_c_empty_n,
        inData_read => readDataM2S_U0_inData_read,
        n_out_din => readDataM2S_U0_n_out_din,
        n_out_full_n => size_c14_full_n,
        n_out_write => readDataM2S_U0_n_out_write,
        ap_ext_blocking_n => readDataM2S_U0_ap_ext_blocking_n,
        ap_str_blocking_n => readDataM2S_U0_ap_str_blocking_n,
        ap_int_blocking_n => readDataM2S_U0_ap_int_blocking_n);

    splitStrm_U0 : component Adler32Kernel_splitStrm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => splitStrm_U0_ap_start,
        ap_done => splitStrm_U0_ap_done,
        ap_continue => splitStrm_U0_ap_continue,
        ap_idle => splitStrm_U0_ap_idle,
        ap_ready => splitStrm_U0_ap_ready,
        inStrm_dout => data512Strm_dout,
        inStrm_empty_n => data512Strm_empty_n,
        inStrm_read => splitStrm_U0_inStrm_read,
        outStrm_din => splitStrm_U0_outStrm_din,
        outStrm_full_n => dataStrm_full_n,
        outStrm_write => splitStrm_U0_outStrm_write,
        n_dout => size_c14_dout,
        n_empty_n => size_c14_empty_n,
        n_read => splitStrm_U0_n_read,
        ap_ext_blocking_n => splitStrm_U0_ap_ext_blocking_n,
        ap_str_blocking_n => splitStrm_U0_ap_str_blocking_n,
        ap_int_blocking_n => splitStrm_U0_ap_int_blocking_n);

    adler32_16_U0 : component Adler32Kernel_adler32_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => adler32_16_U0_ap_start,
        ap_done => adler32_16_U0_ap_done,
        ap_continue => adler32_16_U0_ap_continue,
        ap_idle => adler32_16_U0_ap_idle,
        ap_ready => adler32_16_U0_ap_ready,
        adlerStrm_dout => adlerStrm_dout,
        adlerStrm_empty_n => adlerStrm_empty_n,
        adlerStrm_read => adler32_16_U0_adlerStrm_read,
        inStrm_dout => dataStrm_dout,
        inStrm_empty_n => dataStrm_empty_n,
        inStrm_read => adler32_16_U0_inStrm_read,
        inLenStrm_dout => lenStrm_dout,
        inLenStrm_empty_n => lenStrm_empty_n,
        inLenStrm_read => adler32_16_U0_inLenStrm_read,
        endInLenStrm_dout => endStrm_dout,
        endInLenStrm_empty_n => endStrm_empty_n,
        endInLenStrm_read => adler32_16_U0_endInLenStrm_read,
        outStrm_din => adler32_16_U0_outStrm_din,
        outStrm_full_n => adler32Strm_full_n,
        outStrm_write => adler32_16_U0_outStrm_write,
        endOutStrm_din => adler32_16_U0_endOutStrm_din,
        endOutStrm_full_n => adler32EndStrm_full_n,
        endOutStrm_write => adler32_16_U0_endOutStrm_write,
        ap_ext_blocking_n => adler32_16_U0_ap_ext_blocking_n,
        ap_str_blocking_n => adler32_16_U0_ap_str_blocking_n,
        ap_int_blocking_n => adler32_16_U0_ap_int_blocking_n);

    writeS2M_U0 : component Adler32Kernel_writeS2M
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => writeS2M_U0_ap_start,
        ap_done => writeS2M_U0_ap_done,
        ap_continue => writeS2M_U0_ap_continue,
        ap_idle => writeS2M_U0_ap_idle,
        ap_ready => writeS2M_U0_ap_ready,
        inStrm_dout => adler32Strm_dout,
        inStrm_empty_n => adler32Strm_empty_n,
        inStrm_read => writeS2M_U0_inStrm_read,
        endStrm_dout => adler32EndStrm_dout,
        endStrm_empty_n => adler32EndStrm_empty_n,
        endStrm_read => writeS2M_U0_endStrm_read,
        m_axi_gmem3_AWVALID => writeS2M_U0_m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY => gmem3_AWREADY,
        m_axi_gmem3_AWADDR => writeS2M_U0_m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID => writeS2M_U0_m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN => writeS2M_U0_m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE => writeS2M_U0_m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST => writeS2M_U0_m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK => writeS2M_U0_m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE => writeS2M_U0_m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT => writeS2M_U0_m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS => writeS2M_U0_m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION => writeS2M_U0_m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER => writeS2M_U0_m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID => writeS2M_U0_m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY => gmem3_WREADY,
        m_axi_gmem3_WDATA => writeS2M_U0_m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB => writeS2M_U0_m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST => writeS2M_U0_m_axi_gmem3_WLAST,
        m_axi_gmem3_WID => writeS2M_U0_m_axi_gmem3_WID,
        m_axi_gmem3_WUSER => writeS2M_U0_m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID => writeS2M_U0_m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY => ap_const_logic_0,
        m_axi_gmem3_ARADDR => writeS2M_U0_m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID => writeS2M_U0_m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN => writeS2M_U0_m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE => writeS2M_U0_m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST => writeS2M_U0_m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK => writeS2M_U0_m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE => writeS2M_U0_m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT => writeS2M_U0_m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS => writeS2M_U0_m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION => writeS2M_U0_m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER => writeS2M_U0_m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID => ap_const_logic_0,
        m_axi_gmem3_RREADY => writeS2M_U0_m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA => ap_const_lv32_0,
        m_axi_gmem3_RLAST => ap_const_logic_0,
        m_axi_gmem3_RID => ap_const_lv1_0,
        m_axi_gmem3_RUSER => ap_const_lv1_0,
        m_axi_gmem3_RRESP => ap_const_lv2_0,
        m_axi_gmem3_BVALID => gmem3_BVALID,
        m_axi_gmem3_BREADY => writeS2M_U0_m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP => gmem3_BRESP,
        m_axi_gmem3_BID => gmem3_BID,
        m_axi_gmem3_BUSER => gmem3_BUSER,
        n_dout => num_c13_dout,
        n_empty_n => num_c13_empty_n,
        n_read => writeS2M_U0_n_read,
        adler32Result_dout => adler32Result_c_dout,
        adler32Result_empty_n => adler32Result_c_empty_n,
        adler32Result_read => writeS2M_U0_adler32Result_read,
        ap_ext_blocking_n => writeS2M_U0_ap_ext_blocking_n,
        ap_str_blocking_n => writeS2M_U0_ap_str_blocking_n,
        ap_int_blocking_n => writeS2M_U0_ap_int_blocking_n);

    num_c_U : component Adler32Kernel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Adler32Kernel_entry3_U0_num_out_din,
        if_full_n => num_c_full_n,
        if_write => Adler32Kernel_entry3_U0_num_out_write,
        if_dout => num_c_dout,
        if_empty_n => num_c_empty_n,
        if_read => readLenM2S_U0_n_read);

    num_c13_U : component Adler32Kernel_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Adler32Kernel_entry3_U0_num_out1_din,
        if_full_n => num_c13_full_n,
        if_write => Adler32Kernel_entry3_U0_num_out1_write,
        if_dout => num_c13_dout,
        if_empty_n => num_c13_empty_n,
        if_read => writeS2M_U0_n_read);

    size_c_U : component Adler32Kernel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Adler32Kernel_entry3_U0_size_out_din,
        if_full_n => size_c_full_n,
        if_write => Adler32Kernel_entry3_U0_size_out_write,
        if_dout => size_c_dout,
        if_empty_n => size_c_empty_n,
        if_read => readDataM2S_U0_n_read);

    len_c_U : component Adler32Kernel_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Adler32Kernel_entry3_U0_len_out_din,
        if_full_n => len_c_full_n,
        if_write => Adler32Kernel_entry3_U0_len_out_write,
        if_dout => len_c_dout,
        if_empty_n => len_c_empty_n,
        if_read => readLenM2S_U0_inData_read);

    adler_c_U : component Adler32Kernel_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Adler32Kernel_entry3_U0_adler_out_din,
        if_full_n => adler_c_full_n,
        if_write => Adler32Kernel_entry3_U0_adler_out_write,
        if_dout => adler_c_dout,
        if_empty_n => adler_c_empty_n,
        if_read => readLenM2S_U0_inData2_read);

    inData_c_U : component Adler32Kernel_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Adler32Kernel_entry3_U0_inData_out_din,
        if_full_n => inData_c_full_n,
        if_write => Adler32Kernel_entry3_U0_inData_out_write,
        if_dout => inData_c_dout,
        if_empty_n => inData_c_empty_n,
        if_read => readDataM2S_U0_inData_read);

    adler32Result_c_U : component Adler32Kernel_fifo_w64_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Adler32Kernel_entry3_U0_adler32Result_out_din,
        if_full_n => adler32Result_c_full_n,
        if_write => Adler32Kernel_entry3_U0_adler32Result_out_write,
        if_dout => adler32Result_c_dout,
        if_empty_n => adler32Result_c_empty_n,
        if_read => writeS2M_U0_adler32Result_read);

    lenStrm_U : component Adler32Kernel_fifo_w32_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readLenM2S_U0_outDataStrm_din,
        if_full_n => lenStrm_full_n,
        if_write => readLenM2S_U0_outDataStrm_write,
        if_dout => lenStrm_dout,
        if_empty_n => lenStrm_empty_n,
        if_read => adler32_16_U0_inLenStrm_read);

    adlerStrm_U : component Adler32Kernel_fifo_w32_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readLenM2S_U0_outData2Strm_din,
        if_full_n => adlerStrm_full_n,
        if_write => readLenM2S_U0_outData2Strm_write,
        if_dout => adlerStrm_dout,
        if_empty_n => adlerStrm_empty_n,
        if_read => adler32_16_U0_adlerStrm_read);

    endStrm_U : component Adler32Kernel_fifo_w1_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readLenM2S_U0_outEndStrm_din,
        if_full_n => endStrm_full_n,
        if_write => readLenM2S_U0_outEndStrm_write,
        if_dout => endStrm_dout,
        if_empty_n => endStrm_empty_n,
        if_read => adler32_16_U0_endInLenStrm_read);

    data512Strm_U : component Adler32Kernel_fifo_w512_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readDataM2S_U0_outDataStrm_din,
        if_full_n => data512Strm_full_n,
        if_write => readDataM2S_U0_outDataStrm_write,
        if_dout => data512Strm_dout,
        if_empty_n => data512Strm_empty_n,
        if_read => splitStrm_U0_inStrm_read);

    size_c14_U : component Adler32Kernel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readDataM2S_U0_n_out_din,
        if_full_n => size_c14_full_n,
        if_write => readDataM2S_U0_n_out_write,
        if_dout => size_c14_dout,
        if_empty_n => size_c14_empty_n,
        if_read => splitStrm_U0_n_read);

    dataStrm_U : component Adler32Kernel_fifo_w128_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => splitStrm_U0_outStrm_din,
        if_full_n => dataStrm_full_n,
        if_write => splitStrm_U0_outStrm_write,
        if_dout => dataStrm_dout,
        if_empty_n => dataStrm_empty_n,
        if_read => adler32_16_U0_inStrm_read);

    adler32Strm_U : component Adler32Kernel_fifo_w32_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adler32_16_U0_outStrm_din,
        if_full_n => adler32Strm_full_n,
        if_write => adler32_16_U0_outStrm_write,
        if_dout => adler32Strm_dout,
        if_empty_n => adler32Strm_empty_n,
        if_read => writeS2M_U0_inStrm_read);

    adler32EndStrm_U : component Adler32Kernel_fifo_w1_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => adler32_16_U0_endOutStrm_din,
        if_full_n => adler32EndStrm_full_n,
        if_write => adler32_16_U0_endOutStrm_write,
        if_dout => adler32EndStrm_dout,
        if_empty_n => adler32EndStrm_empty_n,
        if_read => writeS2M_U0_endStrm_read);

    start_for_writeS2M_U0_U : component Adler32Kernel_start_for_writeS2M_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_writeS2M_U0_din,
        if_full_n => start_for_writeS2M_U0_full_n,
        if_write => Adler32Kernel_entry3_U0_start_write,
        if_dout => start_for_writeS2M_U0_dout,
        if_empty_n => start_for_writeS2M_U0_empty_n,
        if_read => writeS2M_U0_ap_ready);

    start_for_adler32_16_U0_U : component Adler32Kernel_start_for_adler32_16_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_adler32_16_U0_din,
        if_full_n => start_for_adler32_16_U0_full_n,
        if_write => readLenM2S_U0_start_write,
        if_dout => start_for_adler32_16_U0_dout,
        if_empty_n => start_for_adler32_16_U0_empty_n,
        if_read => adler32_16_U0_ap_ready);

    start_for_splitStrm_U0_U : component Adler32Kernel_start_for_splitStrm_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_splitStrm_U0_din,
        if_full_n => start_for_splitStrm_U0_full_n,
        if_write => readDataM2S_U0_start_write,
        if_dout => start_for_splitStrm_U0_dout,
        if_empty_n => start_for_splitStrm_U0_empty_n,
        if_read => splitStrm_U0_ap_ready);





    ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready <= ap_sync_Adler32Kernel_entry3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_readDataM2S_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_readDataM2S_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_readDataM2S_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_readDataM2S_U0_ap_ready <= ap_sync_readDataM2S_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_readLenM2S_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_readLenM2S_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_readLenM2S_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_readLenM2S_U0_ap_ready <= ap_sync_readLenM2S_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    Adler32Kernel_entry3_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Adler32Kernel_entry3_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Adler32Kernel_entry3_U0_ap_ready_count <= std_logic_vector(unsigned(Adler32Kernel_entry3_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Adler32Kernel_entry3_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Adler32Kernel_entry3_U0_ap_ready_count <= std_logic_vector(unsigned(Adler32Kernel_entry3_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    ap_ext_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ext_blocking_n_reg <= ap_ext_blocking_n;
        end if;
    end process;

    ap_int_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_int_blocking_n_reg <= ap_int_blocking_n;
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    ap_str_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_str_blocking_n_reg <= ap_str_blocking_n;
        end if;
    end process;

    readDataM2S_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((readDataM2S_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                readDataM2S_U0_ap_ready_count <= std_logic_vector(unsigned(readDataM2S_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((readDataM2S_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                readDataM2S_U0_ap_ready_count <= std_logic_vector(unsigned(readDataM2S_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    readLenM2S_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((readLenM2S_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                readLenM2S_U0_ap_ready_count <= std_logic_vector(unsigned(readLenM2S_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((readLenM2S_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                readLenM2S_U0_ap_ready_count <= std_logic_vector(unsigned(readLenM2S_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Adler32Kernel_entry3_U0_ap_continue <= ap_const_logic_1;
    Adler32Kernel_entry3_U0_ap_start <= ((ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    adler32_16_U0_ap_continue <= ap_const_logic_1;
    adler32_16_U0_ap_start <= start_for_adler32_16_U0_empty_n;
    adler32_16_U0_start_full_n <= ap_const_logic_1;
    adler32_16_U0_start_write <= ap_const_logic_0;
    ap_done <= writeS2M_U0_ap_done;
    ap_ext_blocking_cur_n <= ap_const_logic_1;
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_ext_blocking_cur_n);
    ap_ext_blocking_sub_n <= (writeS2M_U0_ap_ext_blocking_n and splitStrm_U0_ap_ext_blocking_n and readLenM2S_U0_ap_ext_blocking_n and readDataM2S_U0_ap_ext_blocking_n and adler32_16_U0_ap_ext_blocking_n and Adler32Kernel_entry3_U0_ap_ext_blocking_n);
    ap_idle <= (writeS2M_U0_ap_idle and splitStrm_U0_ap_idle and readLenM2S_U0_ap_idle and readDataM2S_U0_ap_idle and adler32_16_U0_ap_idle and Adler32Kernel_entry3_U0_ap_idle);
    ap_int_blocking_cur_n <= ap_const_logic_1;
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);
    ap_int_blocking_sub_n <= (writeS2M_U0_ap_int_blocking_n and splitStrm_U0_ap_int_blocking_n and readLenM2S_U0_ap_int_blocking_n and readDataM2S_U0_ap_int_blocking_n and adler32_16_U0_ap_int_blocking_n and Adler32Kernel_entry3_U0_ap_int_blocking_n);
    ap_ready <= ap_sync_ready;
    ap_str_blocking_cur_n <= ap_const_logic_1;
    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_str_blocking_cur_n);
    ap_str_blocking_sub_n <= (writeS2M_U0_ap_str_blocking_n and splitStrm_U0_ap_str_blocking_n and readLenM2S_U0_ap_str_blocking_n and readDataM2S_U0_ap_str_blocking_n and adler32_16_U0_ap_str_blocking_n and Adler32Kernel_entry3_U0_ap_str_blocking_n);
    ap_sync_Adler32Kernel_entry3_U0_ap_ready <= (ap_sync_reg_Adler32Kernel_entry3_U0_ap_ready or Adler32Kernel_entry3_U0_ap_ready);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= writeS2M_U0_ap_done;
    ap_sync_readDataM2S_U0_ap_ready <= (readDataM2S_U0_ap_ready or ap_sync_reg_readDataM2S_U0_ap_ready);
    ap_sync_readLenM2S_U0_ap_ready <= (readLenM2S_U0_ap_ready or ap_sync_reg_readLenM2S_U0_ap_ready);
    ap_sync_ready <= (ap_sync_readLenM2S_U0_ap_ready and ap_sync_readDataM2S_U0_ap_ready and ap_sync_Adler32Kernel_entry3_U0_ap_ready);
    event_done <= ap_done;
    readDataM2S_U0_ap_continue <= ap_const_logic_1;
    readDataM2S_U0_ap_start <= ((ap_sync_reg_readDataM2S_U0_ap_ready xor ap_const_logic_1) and ap_start);
    readLenM2S_U0_ap_continue <= ap_const_logic_1;
    readLenM2S_U0_ap_start <= ((ap_sync_reg_readLenM2S_U0_ap_ready xor ap_const_logic_1) and ap_start);
    splitStrm_U0_ap_continue <= ap_const_logic_1;
    splitStrm_U0_ap_start <= start_for_splitStrm_U0_empty_n;
    splitStrm_U0_start_full_n <= ap_const_logic_1;
    splitStrm_U0_start_write <= ap_const_logic_0;

    stall_done_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_0) and (ap_ext_blocking_n = ap_const_logic_1))) then 
            stall_done_ext <= ap_const_logic_1;
        else 
            stall_done_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_0) and (ap_int_blocking_n = ap_const_logic_1))) then 
            stall_done_int <= ap_const_logic_1;
        else 
            stall_done_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_0) and (ap_str_blocking_n = ap_const_logic_1))) then 
            stall_done_str <= ap_const_logic_1;
        else 
            stall_done_str <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_1) and (ap_ext_blocking_n = ap_const_logic_0))) then 
            stall_start_ext <= ap_const_logic_1;
        else 
            stall_start_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_1) and (ap_int_blocking_n = ap_const_logic_0))) then 
            stall_start_int <= ap_const_logic_1;
        else 
            stall_start_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_1) and (ap_str_blocking_n = ap_const_logic_0))) then 
            stall_start_str <= ap_const_logic_1;
        else 
            stall_start_str <= ap_const_logic_0;
        end if; 
    end process;

    start_for_adler32_16_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_splitStrm_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_writeS2M_U0_din <= (0=>ap_const_logic_1, others=>'-');
    writeS2M_U0_ap_continue <= ap_continue;
    writeS2M_U0_ap_start <= start_for_writeS2M_U0_empty_n;
    writeS2M_U0_start_full_n <= ap_const_logic_1;
    writeS2M_U0_start_write <= ap_const_logic_0;
end behav;
