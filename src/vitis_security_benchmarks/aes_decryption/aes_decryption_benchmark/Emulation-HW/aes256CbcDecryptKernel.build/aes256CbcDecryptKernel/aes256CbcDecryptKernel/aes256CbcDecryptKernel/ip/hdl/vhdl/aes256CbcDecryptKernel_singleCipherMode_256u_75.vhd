-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256CbcDecryptKernel_singleCipherMode_256u_75 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    taskNum_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    taskNum_empty_n : IN STD_LOGIC;
    taskNum_read : OUT STD_LOGIC;
    IVStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    IVStrm_empty_n : IN STD_LOGIC;
    IVStrm_read : OUT STD_LOGIC;
    cipherkeyStrm_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    cipherkeyStrm_empty_n : IN STD_LOGIC;
    cipherkeyStrm_read : OUT STD_LOGIC;
    textInStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    textInStrm_empty_n : IN STD_LOGIC;
    textInStrm_read : OUT STD_LOGIC;
    endTextInStrm_dout : IN STD_LOGIC;
    endTextInStrm_empty_n : IN STD_LOGIC;
    endTextInStrm_read : OUT STD_LOGIC;
    textOutStrm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    textOutStrm_full_n : IN STD_LOGIC;
    textOutStrm_write : OUT STD_LOGIC;
    endTextOutStrm_din : OUT STD_LOGIC;
    endTextOutStrm_full_n : IN STD_LOGIC;
    endTextOutStrm_write : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of aes256CbcDecryptKernel_singleCipherMode_256u_75 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal decipher_0_496_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal decipher_0_496_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal taskNum_blk_n : STD_LOGIC;
    signal IVStrm_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal cipherkeyStrm_blk_n : STD_LOGIC;
    signal textInStrm_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal e_7_reg_147 : STD_LOGIC_VECTOR (0 downto 0);
    signal endTextInStrm_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_phi_mux_e_7_phi_fu_150_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal textOutStrm_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal e_7_reg_147_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal endTextOutStrm_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal e_7_reg_147_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal e_7_reg_147_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal e_7_reg_147_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal e_7_reg_147_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal e_7_reg_147_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal e_7_reg_147_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal e_7_reg_147_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal e_7_reg_147_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal e_7_reg_147_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal e_7_reg_147_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal e_7_reg_147_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal e_7_reg_147_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal e_7_reg_147_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_load_04474_i_i_reg_157 : STD_LOGIC_VECTOR (127 downto 0);
    signal taskNum_read_reg_280 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal add_ln695_fu_207_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln695_reg_288 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal cipherkeyStrm_read_reg_293 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal IV_V_reg_298 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_reg_303 : STD_LOGIC_VECTOR (0 downto 0);
    signal decipher_key_list_V_0_reg_308 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_updateKey_fu_192_ap_ready : STD_LOGIC;
    signal grp_updateKey_fu_192_ap_done : STD_LOGIC;
    signal decipher_key_list_V_1_reg_313 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_2_reg_318 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_3_reg_323 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_4_reg_328 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_5_reg_333 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_6_reg_338 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_7_reg_343 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_8_reg_348 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_9_reg_353 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_10_reg_358 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_11_reg_363 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_12_reg_368 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_13_reg_373 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_14_reg_378 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_6_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal textInStrm_read_reg_388 : STD_LOGIC_VECTOR (127 downto 0);
    signal textInStrm_read_reg_388_pp0_iter2_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal textInStrm_read_reg_388_pp0_iter3_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal textInStrm_read_reg_388_pp0_iter4_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal textInStrm_read_reg_388_pp0_iter5_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal textInStrm_read_reg_388_pp0_iter6_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal textInStrm_read_reg_388_pp0_iter7_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal textInStrm_read_reg_388_pp0_iter8_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal textInStrm_read_reg_388_pp0_iter9_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal textInStrm_read_reg_388_pp0_iter10_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal textInStrm_read_reg_388_pp0_iter11_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal textInStrm_read_reg_388_pp0_iter12_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal textInStrm_read_reg_388_pp0_iter13_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal textInStrm_read_reg_388_pp0_iter14_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter14_state19 : STD_LOGIC;
    signal grp_process_r_fu_167_ap_start : STD_LOGIC;
    signal grp_process_r_fu_167_ap_done : STD_LOGIC;
    signal grp_process_r_fu_167_ap_idle : STD_LOGIC;
    signal grp_process_r_fu_167_ap_ready : STD_LOGIC;
    signal grp_process_r_fu_167_ap_ce : STD_LOGIC;
    signal grp_process_r_fu_167_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_process_r_fu_167_ap_ext_blocking_n : STD_LOGIC;
    signal grp_process_r_fu_167_ap_str_blocking_n : STD_LOGIC;
    signal grp_process_r_fu_167_ap_int_blocking_n : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter0_ignore_call3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1_ignore_call3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2_ignore_call3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3_ignore_call3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4_ignore_call3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter5_ignore_call3 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter6_ignore_call3 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter7_ignore_call3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter8_ignore_call3 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter9_ignore_call3 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter10_ignore_call3 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter11_ignore_call3 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter12_ignore_call3 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter13_ignore_call3 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter14_ignore_call3 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter15_ignore_call3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp90 : BOOLEAN;
    signal grp_updateKey_fu_192_ap_start : STD_LOGIC;
    signal grp_updateKey_fu_192_ap_idle : STD_LOGIC;
    signal grp_updateKey_fu_192_this_0_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_updateKey_fu_192_this_0_4_ce0 : STD_LOGIC;
    signal grp_updateKey_fu_192_this_0_4_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_updateKey_fu_192_this_0_4_ce1 : STD_LOGIC;
    signal grp_updateKey_fu_192_ap_return_0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_3 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_4 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_5 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_6 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_7 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_8 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_9 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_10 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_11 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_12 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_13 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_return_14 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_192_ap_ext_blocking_n : STD_LOGIC;
    signal grp_updateKey_fu_192_ap_str_blocking_n : STD_LOGIC;
    signal grp_updateKey_fu_192_ap_int_blocking_n : STD_LOGIC;
    signal empty_reg_136 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_process_r_fu_167_ap_start_reg : STD_LOGIC := '0';
    signal grp_updateKey_fu_192_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state3_ignore_call13 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln882_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_wait_0 : STD_LOGIC;
    signal ap_sub_ext_blocking_0 : STD_LOGIC;
    signal ap_wait_1 : STD_LOGIC;
    signal ap_sub_ext_blocking_1 : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_sub_str_blocking_0 : STD_LOGIC;
    signal ap_sub_str_blocking_1 : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_sub_int_blocking_0 : STD_LOGIC;
    signal ap_sub_int_blocking_1 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component aes256CbcDecryptKernel_process_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (127 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (127 downto 0);
        ciphertext : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component aes256CbcDecryptKernel_updateKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        this_0_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        this_0_4_ce0 : OUT STD_LOGIC;
        this_0_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        this_0_4_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        this_0_4_ce1 : OUT STD_LOGIC;
        this_0_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        cipherkey : IN STD_LOGIC_VECTOR (255 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component aes256CbcDecryptKernel_singleCipherMode_256u_75_decipher_0_496 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    decipher_0_496_U : component aes256CbcDecryptKernel_singleCipherMode_256u_75_decipher_0_496
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_updateKey_fu_192_this_0_4_address0,
        ce0 => grp_updateKey_fu_192_this_0_4_ce0,
        q0 => decipher_0_496_q0,
        address1 => grp_updateKey_fu_192_this_0_4_address1,
        ce1 => grp_updateKey_fu_192_this_0_4_ce1,
        q1 => decipher_0_496_q1);

    grp_process_r_fu_167 : component aes256CbcDecryptKernel_process_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_process_r_fu_167_ap_start,
        ap_done => grp_process_r_fu_167_ap_done,
        ap_idle => grp_process_r_fu_167_ap_idle,
        ap_ready => grp_process_r_fu_167_ap_ready,
        ap_ce => grp_process_r_fu_167_ap_ce,
        p_read => decipher_key_list_V_0_reg_308,
        p_read1 => decipher_key_list_V_1_reg_313,
        p_read2 => decipher_key_list_V_2_reg_318,
        p_read3 => decipher_key_list_V_3_reg_323,
        p_read4 => decipher_key_list_V_4_reg_328,
        p_read5 => decipher_key_list_V_5_reg_333,
        p_read6 => decipher_key_list_V_6_reg_338,
        p_read7 => decipher_key_list_V_7_reg_343,
        p_read8 => decipher_key_list_V_8_reg_348,
        p_read9 => decipher_key_list_V_9_reg_353,
        p_read10 => decipher_key_list_V_10_reg_358,
        p_read11 => decipher_key_list_V_11_reg_363,
        p_read12 => decipher_key_list_V_12_reg_368,
        p_read13 => decipher_key_list_V_13_reg_373,
        p_read14 => decipher_key_list_V_14_reg_378,
        ciphertext => textInStrm_dout,
        ap_return => grp_process_r_fu_167_ap_return,
        ap_ext_blocking_n => grp_process_r_fu_167_ap_ext_blocking_n,
        ap_str_blocking_n => grp_process_r_fu_167_ap_str_blocking_n,
        ap_int_blocking_n => grp_process_r_fu_167_ap_int_blocking_n);

    grp_updateKey_fu_192 : component aes256CbcDecryptKernel_updateKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_updateKey_fu_192_ap_start,
        ap_done => grp_updateKey_fu_192_ap_done,
        ap_idle => grp_updateKey_fu_192_ap_idle,
        ap_ready => grp_updateKey_fu_192_ap_ready,
        this_0_4_address0 => grp_updateKey_fu_192_this_0_4_address0,
        this_0_4_ce0 => grp_updateKey_fu_192_this_0_4_ce0,
        this_0_4_q0 => decipher_0_496_q0,
        this_0_4_address1 => grp_updateKey_fu_192_this_0_4_address1,
        this_0_4_ce1 => grp_updateKey_fu_192_this_0_4_ce1,
        this_0_4_q1 => decipher_0_496_q1,
        cipherkey => cipherkeyStrm_read_reg_293,
        ap_return_0 => grp_updateKey_fu_192_ap_return_0,
        ap_return_1 => grp_updateKey_fu_192_ap_return_1,
        ap_return_2 => grp_updateKey_fu_192_ap_return_2,
        ap_return_3 => grp_updateKey_fu_192_ap_return_3,
        ap_return_4 => grp_updateKey_fu_192_ap_return_4,
        ap_return_5 => grp_updateKey_fu_192_ap_return_5,
        ap_return_6 => grp_updateKey_fu_192_ap_return_6,
        ap_return_7 => grp_updateKey_fu_192_ap_return_7,
        ap_return_8 => grp_updateKey_fu_192_ap_return_8,
        ap_return_9 => grp_updateKey_fu_192_ap_return_9,
        ap_return_10 => grp_updateKey_fu_192_ap_return_10,
        ap_return_11 => grp_updateKey_fu_192_ap_return_11,
        ap_return_12 => grp_updateKey_fu_192_ap_return_12,
        ap_return_13 => grp_updateKey_fu_192_ap_return_13,
        ap_return_14 => grp_updateKey_fu_192_ap_return_14,
        ap_ext_blocking_n => grp_updateKey_fu_192_ap_ext_blocking_n,
        ap_str_blocking_n => grp_updateKey_fu_192_ap_str_blocking_n,
        ap_int_blocking_n => grp_updateKey_fu_192_ap_int_blocking_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln882_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_updateKey_fu_192_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter14_state19)) or ((grp_updateKey_fu_192_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter14_state19))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter13;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                elsif (((grp_updateKey_fu_192_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_process_r_fu_167_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_process_r_fu_167_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_phi_mux_e_7_phi_fu_150_p4 = ap_const_lv1_0))) then 
                    grp_process_r_fu_167_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_process_r_fu_167_ap_ready = ap_const_logic_1)) then 
                    grp_process_r_fu_167_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_updateKey_fu_192_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_updateKey_fu_192_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((endTextInStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_updateKey_fu_192_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateKey_fu_192_ap_ready = ap_const_logic_1)) then 
                    grp_updateKey_fu_192_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    e_7_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((e_7_reg_147 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                e_7_reg_147 <= tmp_6_reg_383;
            elsif (((grp_updateKey_fu_192_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                e_7_reg_147 <= tmp_reg_303;
            end if; 
        end if;
    end process;

    empty_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((endTextOutStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                empty_reg_136 <= add_ln695_reg_288;
            elsif ((not(((taskNum_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_136 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_load_04474_i_i_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
                p_load_04474_i_i_reg_157 <= textInStrm_read_reg_388_pp0_iter14_reg;
            elsif (((grp_updateKey_fu_192_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_load_04474_i_i_reg_157 <= IV_V_reg_298;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((endTextInStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                IV_V_reg_298 <= IVStrm_dout;
                cipherkeyStrm_read_reg_293 <= cipherkeyStrm_dout;
                tmp_reg_303 <= (0=>endTextInStrm_dout, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln695_reg_288 <= add_ln695_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_fu_192_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                decipher_key_list_V_0_reg_308 <= grp_updateKey_fu_192_ap_return_0;
                decipher_key_list_V_10_reg_358 <= grp_updateKey_fu_192_ap_return_10;
                decipher_key_list_V_11_reg_363 <= grp_updateKey_fu_192_ap_return_11;
                decipher_key_list_V_12_reg_368 <= grp_updateKey_fu_192_ap_return_12;
                decipher_key_list_V_13_reg_373 <= grp_updateKey_fu_192_ap_return_13;
                decipher_key_list_V_14_reg_378 <= grp_updateKey_fu_192_ap_return_14;
                decipher_key_list_V_1_reg_313 <= grp_updateKey_fu_192_ap_return_1;
                decipher_key_list_V_2_reg_318 <= grp_updateKey_fu_192_ap_return_2;
                decipher_key_list_V_3_reg_323 <= grp_updateKey_fu_192_ap_return_3;
                decipher_key_list_V_4_reg_328 <= grp_updateKey_fu_192_ap_return_4;
                decipher_key_list_V_5_reg_333 <= grp_updateKey_fu_192_ap_return_5;
                decipher_key_list_V_6_reg_338 <= grp_updateKey_fu_192_ap_return_6;
                decipher_key_list_V_7_reg_343 <= grp_updateKey_fu_192_ap_return_7;
                decipher_key_list_V_8_reg_348 <= grp_updateKey_fu_192_ap_return_8;
                decipher_key_list_V_9_reg_353 <= grp_updateKey_fu_192_ap_return_9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                e_7_reg_147_pp0_iter10_reg <= e_7_reg_147_pp0_iter9_reg;
                e_7_reg_147_pp0_iter11_reg <= e_7_reg_147_pp0_iter10_reg;
                e_7_reg_147_pp0_iter12_reg <= e_7_reg_147_pp0_iter11_reg;
                e_7_reg_147_pp0_iter13_reg <= e_7_reg_147_pp0_iter12_reg;
                e_7_reg_147_pp0_iter14_reg <= e_7_reg_147_pp0_iter13_reg;
                e_7_reg_147_pp0_iter2_reg <= e_7_reg_147_pp0_iter1_reg;
                e_7_reg_147_pp0_iter3_reg <= e_7_reg_147_pp0_iter2_reg;
                e_7_reg_147_pp0_iter4_reg <= e_7_reg_147_pp0_iter3_reg;
                e_7_reg_147_pp0_iter5_reg <= e_7_reg_147_pp0_iter4_reg;
                e_7_reg_147_pp0_iter6_reg <= e_7_reg_147_pp0_iter5_reg;
                e_7_reg_147_pp0_iter7_reg <= e_7_reg_147_pp0_iter6_reg;
                e_7_reg_147_pp0_iter8_reg <= e_7_reg_147_pp0_iter7_reg;
                e_7_reg_147_pp0_iter9_reg <= e_7_reg_147_pp0_iter8_reg;
                textInStrm_read_reg_388_pp0_iter10_reg <= textInStrm_read_reg_388_pp0_iter9_reg;
                textInStrm_read_reg_388_pp0_iter11_reg <= textInStrm_read_reg_388_pp0_iter10_reg;
                textInStrm_read_reg_388_pp0_iter12_reg <= textInStrm_read_reg_388_pp0_iter11_reg;
                textInStrm_read_reg_388_pp0_iter13_reg <= textInStrm_read_reg_388_pp0_iter12_reg;
                textInStrm_read_reg_388_pp0_iter14_reg <= textInStrm_read_reg_388_pp0_iter13_reg;
                textInStrm_read_reg_388_pp0_iter2_reg <= textInStrm_read_reg_388;
                textInStrm_read_reg_388_pp0_iter3_reg <= textInStrm_read_reg_388_pp0_iter2_reg;
                textInStrm_read_reg_388_pp0_iter4_reg <= textInStrm_read_reg_388_pp0_iter3_reg;
                textInStrm_read_reg_388_pp0_iter5_reg <= textInStrm_read_reg_388_pp0_iter4_reg;
                textInStrm_read_reg_388_pp0_iter6_reg <= textInStrm_read_reg_388_pp0_iter5_reg;
                textInStrm_read_reg_388_pp0_iter7_reg <= textInStrm_read_reg_388_pp0_iter6_reg;
                textInStrm_read_reg_388_pp0_iter8_reg <= textInStrm_read_reg_388_pp0_iter7_reg;
                textInStrm_read_reg_388_pp0_iter9_reg <= textInStrm_read_reg_388_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                e_7_reg_147_pp0_iter1_reg <= e_7_reg_147;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((taskNum_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                taskNum_read_reg_280 <= taskNum_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((e_7_reg_147 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                textInStrm_read_reg_388 <= textInStrm_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_phi_mux_e_7_phi_fu_150_p4 = ap_const_lv1_0))) then
                tmp_6_reg_383 <= (0=>endTextInStrm_dout, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, taskNum_empty_n, IVStrm_empty_n, cipherkeyStrm_empty_n, endTextInStrm_empty_n, endTextOutStrm_full_n, ap_CS_fsm_state3, ap_CS_fsm_state21, ap_CS_fsm_state2, ap_CS_fsm_state4, grp_updateKey_fu_192_ap_done, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, icmp_ln882_fu_202_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((taskNum_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln882_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((endTextInStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_updateKey_fu_192_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                if (((endTextOutStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    IVStrm_blk_n_assign_proc : process(IVStrm_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IVStrm_blk_n <= IVStrm_empty_n;
        else 
            IVStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    IVStrm_read_assign_proc : process(IVStrm_empty_n, cipherkeyStrm_empty_n, endTextInStrm_empty_n, ap_CS_fsm_state3)
    begin
        if ((not(((endTextInStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            IVStrm_read <= ap_const_logic_1;
        else 
            IVStrm_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln695_fu_207_p2 <= std_logic_vector(unsigned(empty_reg_136) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(5);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(textInStrm_empty_n, endTextInStrm_empty_n, textOutStrm_full_n, endTextOutStrm_full_n, ap_enable_reg_pp0_iter1, e_7_reg_147, ap_enable_reg_pp0_iter0, ap_phi_mux_e_7_phi_fu_150_p4, ap_enable_reg_pp0_iter15, e_7_reg_147_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (endTextInStrm_empty_n = ap_const_logic_0) and (ap_phi_mux_e_7_phi_fu_150_p4 = ap_const_lv1_0)) or ((e_7_reg_147 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (textInStrm_empty_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (((endTextOutStrm_full_n = ap_const_logic_0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0)) or ((textOutStrm_full_n = ap_const_logic_0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(textInStrm_empty_n, endTextInStrm_empty_n, textOutStrm_full_n, endTextOutStrm_full_n, ap_enable_reg_pp0_iter1, e_7_reg_147, ap_enable_reg_pp0_iter0, ap_phi_mux_e_7_phi_fu_150_p4, ap_enable_reg_pp0_iter15, e_7_reg_147_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (endTextInStrm_empty_n = ap_const_logic_0) and (ap_phi_mux_e_7_phi_fu_150_p4 = ap_const_lv1_0)) or ((e_7_reg_147 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (textInStrm_empty_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (((endTextOutStrm_full_n = ap_const_logic_0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0)) or ((textOutStrm_full_n = ap_const_logic_0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp90_assign_proc : process(textInStrm_empty_n, endTextInStrm_empty_n, textOutStrm_full_n, endTextOutStrm_full_n, ap_enable_reg_pp0_iter1, e_7_reg_147, ap_enable_reg_pp0_iter0, ap_phi_mux_e_7_phi_fu_150_p4, ap_enable_reg_pp0_iter15, e_7_reg_147_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp90 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (endTextInStrm_empty_n = ap_const_logic_0) and (ap_phi_mux_e_7_phi_fu_150_p4 = ap_const_lv1_0)) or ((e_7_reg_147 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (textInStrm_empty_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (((endTextOutStrm_full_n = ap_const_logic_0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0)) or ((textOutStrm_full_n = ap_const_logic_0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(textInStrm_empty_n, endTextInStrm_empty_n, textOutStrm_full_n, endTextOutStrm_full_n, ap_enable_reg_pp0_iter1, e_7_reg_147, ap_enable_reg_pp0_iter0, ap_phi_mux_e_7_phi_fu_150_p4, ap_enable_reg_pp0_iter15, e_7_reg_147_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (endTextInStrm_empty_n = ap_const_logic_0) and (ap_phi_mux_e_7_phi_fu_150_p4 = ap_const_lv1_0)) or ((e_7_reg_147 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (textInStrm_empty_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (((endTextOutStrm_full_n = ap_const_logic_0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0)) or ((textOutStrm_full_n = ap_const_logic_0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, taskNum_empty_n)
    begin
                ap_block_state1 <= ((taskNum_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter5_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter6_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter7_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter8_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter9_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter10_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter11_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter12_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter13_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter14_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp0_stage0_iter15_assign_proc : process(textOutStrm_full_n, endTextOutStrm_full_n, e_7_reg_147_pp0_iter14_reg)
    begin
                ap_block_state20_pp0_stage0_iter15 <= (((endTextOutStrm_full_n = ap_const_logic_0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0)) or ((textOutStrm_full_n = ap_const_logic_0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0)));
    end process;


    ap_block_state20_pp0_stage0_iter15_ignore_call3_assign_proc : process(textOutStrm_full_n, endTextOutStrm_full_n, e_7_reg_147_pp0_iter14_reg)
    begin
                ap_block_state20_pp0_stage0_iter15_ignore_call3 <= (((endTextOutStrm_full_n = ap_const_logic_0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0)) or ((textOutStrm_full_n = ap_const_logic_0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0)));
    end process;


    ap_block_state3_assign_proc : process(IVStrm_empty_n, cipherkeyStrm_empty_n, endTextInStrm_empty_n)
    begin
                ap_block_state3 <= ((endTextInStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n));
    end process;


    ap_block_state3_ignore_call13_assign_proc : process(IVStrm_empty_n, cipherkeyStrm_empty_n, endTextInStrm_empty_n)
    begin
                ap_block_state3_ignore_call13 <= ((endTextInStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n));
    end process;


    ap_block_state5_pp0_stage0_iter0_assign_proc : process(endTextInStrm_empty_n, ap_phi_mux_e_7_phi_fu_150_p4)
    begin
                ap_block_state5_pp0_stage0_iter0 <= ((endTextInStrm_empty_n = ap_const_logic_0) and (ap_phi_mux_e_7_phi_fu_150_p4 = ap_const_lv1_0));
    end process;


    ap_block_state5_pp0_stage0_iter0_ignore_call3_assign_proc : process(endTextInStrm_empty_n, ap_phi_mux_e_7_phi_fu_150_p4)
    begin
                ap_block_state5_pp0_stage0_iter0_ignore_call3 <= ((endTextInStrm_empty_n = ap_const_logic_0) and (ap_phi_mux_e_7_phi_fu_150_p4 = ap_const_lv1_0));
    end process;


    ap_block_state6_pp0_stage0_iter1_assign_proc : process(textInStrm_empty_n, e_7_reg_147)
    begin
                ap_block_state6_pp0_stage0_iter1 <= ((e_7_reg_147 = ap_const_lv1_0) and (textInStrm_empty_n = ap_const_logic_0));
    end process;


    ap_block_state6_pp0_stage0_iter1_ignore_call3_assign_proc : process(textInStrm_empty_n, e_7_reg_147)
    begin
                ap_block_state6_pp0_stage0_iter1_ignore_call3 <= ((e_7_reg_147 = ap_const_lv1_0) and (textInStrm_empty_n = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter14_state19_assign_proc : process(ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter14_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter14_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_e_7_phi_fu_150_p4, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_phi_mux_e_7_phi_fu_150_p4 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln882_fu_202_p2)
    begin
        if (((icmp_ln882_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_const_logic_1);

    ap_ext_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_ext_blocking_0, ap_wait_1, ap_sub_ext_blocking_1)
    begin
        if ((((ap_wait_1 and ap_sub_ext_blocking_1) = ap_const_logic_1) and ((ap_wait_0 and ap_sub_ext_blocking_0) = ap_const_logic_1))) then 
            ap_ext_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_ext_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (textOutStrm_blk_n and textInStrm_blk_n and taskNum_blk_n and endTextOutStrm_blk_n and endTextInStrm_blk_n and cipherkeyStrm_blk_n and IVStrm_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);

    ap_int_blocking_sub_n_assign_proc : process(ap_wait_0, ap_wait_1, ap_sub_int_blocking_0, ap_sub_int_blocking_1)
    begin
        if ((((ap_wait_1 and ap_sub_int_blocking_1) = ap_const_logic_1) and ((ap_wait_0 and ap_sub_int_blocking_0) = ap_const_logic_1))) then 
            ap_int_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_int_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_phi_mux_e_7_phi_fu_150_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, e_7_reg_147, tmp_6_reg_383)
    begin
        if (((e_7_reg_147 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_e_7_phi_fu_150_p4 <= tmp_6_reg_383;
        else 
            ap_phi_mux_e_7_phi_fu_150_p4 <= e_7_reg_147;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln882_fu_202_p2)
    begin
        if (((icmp_ln882_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_const_logic_1);

    ap_str_blocking_sub_n_assign_proc : process(ap_wait_0, ap_wait_1, ap_sub_str_blocking_0, ap_sub_str_blocking_1)
    begin
        if ((((ap_wait_1 and ap_sub_str_blocking_1) = ap_const_logic_1) and ((ap_wait_0 and ap_sub_str_blocking_0) = ap_const_logic_1))) then 
            ap_str_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_str_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_sub_ext_blocking_0_assign_proc : process(grp_process_r_fu_167_ap_ext_blocking_n)
    begin
        if ((grp_process_r_fu_167_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_ext_blocking_1_assign_proc : process(grp_updateKey_fu_192_ap_ext_blocking_n)
    begin
        if ((grp_updateKey_fu_192_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_1 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_0_assign_proc : process(grp_process_r_fu_167_ap_int_blocking_n)
    begin
        if ((grp_process_r_fu_167_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_1_assign_proc : process(grp_updateKey_fu_192_ap_int_blocking_n)
    begin
        if ((grp_updateKey_fu_192_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_1 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_0_assign_proc : process(grp_process_r_fu_167_ap_str_blocking_n)
    begin
        if ((grp_process_r_fu_167_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_1_assign_proc : process(grp_updateKey_fu_192_ap_str_blocking_n)
    begin
        if ((grp_updateKey_fu_192_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_1 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm)) then 
            ap_wait_0 <= ap_const_logic_1;
        else 
            ap_wait_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_1_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state4 = ap_CS_fsm)) then 
            ap_wait_1 <= ap_const_logic_1;
        else 
            ap_wait_1 <= ap_const_logic_0;
        end if; 
    end process;


    cipherkeyStrm_blk_n_assign_proc : process(cipherkeyStrm_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cipherkeyStrm_blk_n <= cipherkeyStrm_empty_n;
        else 
            cipherkeyStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cipherkeyStrm_read_assign_proc : process(IVStrm_empty_n, cipherkeyStrm_empty_n, endTextInStrm_empty_n, ap_CS_fsm_state3)
    begin
        if ((not(((endTextInStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            cipherkeyStrm_read <= ap_const_logic_1;
        else 
            cipherkeyStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    endTextInStrm_blk_n_assign_proc : process(endTextInStrm_empty_n, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_phi_mux_e_7_phi_fu_150_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_phi_mux_e_7_phi_fu_150_p4 = ap_const_lv1_0)))) then 
            endTextInStrm_blk_n <= endTextInStrm_empty_n;
        else 
            endTextInStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    endTextInStrm_read_assign_proc : process(IVStrm_empty_n, cipherkeyStrm_empty_n, endTextInStrm_empty_n, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_phi_mux_e_7_phi_fu_150_p4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_phi_mux_e_7_phi_fu_150_p4 = ap_const_lv1_0)) or (not(((endTextInStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            endTextInStrm_read <= ap_const_logic_1;
        else 
            endTextInStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    endTextOutStrm_blk_n_assign_proc : process(endTextOutStrm_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter15, e_7_reg_147_pp0_iter14_reg, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)))) then 
            endTextOutStrm_blk_n <= endTextOutStrm_full_n;
        else 
            endTextOutStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    endTextOutStrm_din_assign_proc : process(endTextOutStrm_full_n, ap_enable_reg_pp0_iter15, e_7_reg_147_pp0_iter14_reg, ap_CS_fsm_state21, ap_block_pp0_stage0_01001)
    begin
        if (((endTextOutStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            endTextOutStrm_din <= ap_const_logic_1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            endTextOutStrm_din <= ap_const_logic_0;
        else 
            endTextOutStrm_din <= 'X';
        end if; 
    end process;


    endTextOutStrm_write_assign_proc : process(endTextOutStrm_full_n, ap_enable_reg_pp0_iter15, e_7_reg_147_pp0_iter14_reg, ap_CS_fsm_state21, ap_block_pp0_stage0_11001)
    begin
        if ((((endTextOutStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)))) then 
            endTextOutStrm_write <= ap_const_logic_1;
        else 
            endTextOutStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_process_r_fu_167_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp90) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_process_r_fu_167_ap_ce <= ap_const_logic_1;
        else 
            grp_process_r_fu_167_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_process_r_fu_167_ap_start <= grp_process_r_fu_167_ap_start_reg;
    grp_updateKey_fu_192_ap_start <= grp_updateKey_fu_192_ap_start_reg;
    icmp_ln882_fu_202_p2 <= "1" when (empty_reg_136 = taskNum_read_reg_280) else "0";

    taskNum_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, taskNum_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            taskNum_blk_n <= taskNum_empty_n;
        else 
            taskNum_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    taskNum_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, taskNum_empty_n)
    begin
        if ((not(((taskNum_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            taskNum_read <= ap_const_logic_1;
        else 
            taskNum_read <= ap_const_logic_0;
        end if; 
    end process;


    textInStrm_blk_n_assign_proc : process(textInStrm_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, e_7_reg_147)
    begin
        if (((e_7_reg_147 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            textInStrm_blk_n <= textInStrm_empty_n;
        else 
            textInStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    textInStrm_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, e_7_reg_147, ap_block_pp0_stage0_11001)
    begin
        if (((e_7_reg_147 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            textInStrm_read <= ap_const_logic_1;
        else 
            textInStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    textOutStrm_blk_n_assign_proc : process(textOutStrm_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter15, e_7_reg_147_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            textOutStrm_blk_n <= textOutStrm_full_n;
        else 
            textOutStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    textOutStrm_din <= (p_load_04474_i_i_reg_157 xor grp_process_r_fu_167_ap_return);

    textOutStrm_write_assign_proc : process(ap_enable_reg_pp0_iter15, e_7_reg_147_pp0_iter14_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (e_7_reg_147_pp0_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            textOutStrm_write <= ap_const_logic_1;
        else 
            textOutStrm_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
