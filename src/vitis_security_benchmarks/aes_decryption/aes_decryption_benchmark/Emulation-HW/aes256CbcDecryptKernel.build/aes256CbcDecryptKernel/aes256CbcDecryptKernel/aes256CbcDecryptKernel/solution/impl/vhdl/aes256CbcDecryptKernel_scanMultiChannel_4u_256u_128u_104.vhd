-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256CbcDecryptKernel_scanMultiChannel_4u_256u_128u_104 is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    m_axi_gmem0_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem0_0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem0_0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    msgNumStrm_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    msgNumStrm_full_n : IN STD_LOGIC;
    msgNumStrm_write : OUT STD_LOGIC;
    taskNumStrm_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    taskNumStrm_full_n : IN STD_LOGIC;
    taskNumStrm_write : OUT STD_LOGIC;
    taskNumStrm2_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    taskNumStrm2_full_n : IN STD_LOGIC;
    taskNumStrm2_write : OUT STD_LOGIC;
    ptr : IN STD_LOGIC_VECTOR (63 downto 0);
    IVStrm_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    IVStrm_V_V_full_n : IN STD_LOGIC;
    IVStrm_V_V_write : OUT STD_LOGIC;
    IVStrm_1_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    IVStrm_1_V_V_full_n : IN STD_LOGIC;
    IVStrm_1_V_V_write : OUT STD_LOGIC;
    IVStrm_2_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    IVStrm_2_V_V_full_n : IN STD_LOGIC;
    IVStrm_2_V_V_write : OUT STD_LOGIC;
    IVStrm_3_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    IVStrm_3_V_V_full_n : IN STD_LOGIC;
    IVStrm_3_V_V_write : OUT STD_LOGIC;
    cipherkeyStrm_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    cipherkeyStrm_V_V_full_n : IN STD_LOGIC;
    cipherkeyStrm_V_V_write : OUT STD_LOGIC;
    cipherkeyStrm_1_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    cipherkeyStrm_1_V_V_full_n : IN STD_LOGIC;
    cipherkeyStrm_1_V_V_write : OUT STD_LOGIC;
    cipherkeyStrm_2_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    cipherkeyStrm_2_V_V_full_n : IN STD_LOGIC;
    cipherkeyStrm_2_V_V_write : OUT STD_LOGIC;
    cipherkeyStrm_3_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    cipherkeyStrm_3_V_V_full_n : IN STD_LOGIC;
    cipherkeyStrm_3_V_V_write : OUT STD_LOGIC;
    textStrm_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    textStrm_V_V_full_n : IN STD_LOGIC;
    textStrm_V_V_write : OUT STD_LOGIC;
    textStrm_1_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    textStrm_1_V_V_full_n : IN STD_LOGIC;
    textStrm_1_V_V_write : OUT STD_LOGIC;
    textStrm_2_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    textStrm_2_V_V_full_n : IN STD_LOGIC;
    textStrm_2_V_V_write : OUT STD_LOGIC;
    textStrm_3_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    textStrm_3_V_V_full_n : IN STD_LOGIC;
    textStrm_3_V_V_write : OUT STD_LOGIC;
    endTextStrm_V_din : OUT STD_LOGIC;
    endTextStrm_V_full_n : IN STD_LOGIC;
    endTextStrm_V_write : OUT STD_LOGIC;
    endTextStrm_1_V_din : OUT STD_LOGIC;
    endTextStrm_1_V_full_n : IN STD_LOGIC;
    endTextStrm_1_V_write : OUT STD_LOGIC;
    endTextStrm_2_V_din : OUT STD_LOGIC;
    endTextStrm_2_V_full_n : IN STD_LOGIC;
    endTextStrm_2_V_write : OUT STD_LOGIC;
    endTextStrm_3_V_din : OUT STD_LOGIC;
    endTextStrm_3_V_full_n : IN STD_LOGIC;
    endTextStrm_3_V_write : OUT STD_LOGIC;
    outputData : IN STD_LOGIC_VECTOR (63 downto 0);
    outputData_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    outputData_out_full_n : IN STD_LOGIC;
    outputData_out_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    outputData_ap_vld : IN STD_LOGIC;
    ptr_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of aes256CbcDecryptKernel_scanMultiChannel_4u_256u_128u_104 is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_ap_start : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_ap_done : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_ap_continue : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_ap_idle : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_ap_ready : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_start_out : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_start_write : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_outputData_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal readBlock_128u_4u_256u_107_U0_outputData_out_write : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWVALID : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_WVALID : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_WLAST : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARVALID : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_RREADY : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_BREADY : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_textBlkStrm_i_i_din : STD_LOGIC_VECTOR (511 downto 0);
    signal readBlock_128u_4u_256u_107_U0_textBlkStrm_i_i_write : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_msgNumStrm_din : STD_LOGIC_VECTOR (63 downto 0);
    signal readBlock_128u_4u_256u_107_U0_msgNumStrm_write : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_msgNumStrm1_i_i_din : STD_LOGIC_VECTOR (63 downto 0);
    signal readBlock_128u_4u_256u_107_U0_msgNumStrm1_i_i_write : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_taskNumStrm_din : STD_LOGIC_VECTOR (63 downto 0);
    signal readBlock_128u_4u_256u_107_U0_taskNumStrm_write : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_taskNumStrm1_i_i_din : STD_LOGIC_VECTOR (63 downto 0);
    signal readBlock_128u_4u_256u_107_U0_taskNumStrm1_i_i_write : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_taskNumStrm2_din : STD_LOGIC_VECTOR (63 downto 0);
    signal readBlock_128u_4u_256u_107_U0_taskNumStrm2_write : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_IVInStrm_i_i_din : STD_LOGIC_VECTOR (127 downto 0);
    signal readBlock_128u_4u_256u_107_U0_IVInStrm_i_i_write : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_cipherkeyInStrm_i_i_din : STD_LOGIC_VECTOR (255 downto 0);
    signal readBlock_128u_4u_256u_107_U0_cipherkeyInStrm_i_i_write : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_ap_ext_blocking_n : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_ap_str_blocking_n : STD_LOGIC;
    signal readBlock_128u_4u_256u_107_U0_ap_int_blocking_n : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal splitText_4u_256u_U0_ap_start : STD_LOGIC;
    signal splitText_4u_256u_U0_ap_done : STD_LOGIC;
    signal splitText_4u_256u_U0_ap_continue : STD_LOGIC;
    signal splitText_4u_256u_U0_ap_idle : STD_LOGIC;
    signal splitText_4u_256u_U0_ap_ready : STD_LOGIC;
    signal splitText_4u_256u_U0_textBlkStrm_read : STD_LOGIC;
    signal splitText_4u_256u_U0_msgNumStrm_read : STD_LOGIC;
    signal splitText_4u_256u_U0_taskNumStrm_read : STD_LOGIC;
    signal splitText_4u_256u_U0_IVInStrm_read : STD_LOGIC;
    signal splitText_4u_256u_U0_cipherkeyInStrm_read : STD_LOGIC;
    signal splitText_4u_256u_U0_textStrm_V_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal splitText_4u_256u_U0_textStrm_V_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_textStrm_1_V_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal splitText_4u_256u_U0_textStrm_1_V_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_textStrm_2_V_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal splitText_4u_256u_U0_textStrm_2_V_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_textStrm_3_V_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal splitText_4u_256u_U0_textStrm_3_V_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_endTextStrm_V_din : STD_LOGIC;
    signal splitText_4u_256u_U0_endTextStrm_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_endTextStrm_1_V_din : STD_LOGIC;
    signal splitText_4u_256u_U0_endTextStrm_1_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_endTextStrm_2_V_din : STD_LOGIC;
    signal splitText_4u_256u_U0_endTextStrm_2_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_endTextStrm_3_V_din : STD_LOGIC;
    signal splitText_4u_256u_U0_endTextStrm_3_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_IVStrm_V_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal splitText_4u_256u_U0_IVStrm_V_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_IVStrm_1_V_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal splitText_4u_256u_U0_IVStrm_1_V_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_IVStrm_2_V_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal splitText_4u_256u_U0_IVStrm_2_V_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_IVStrm_3_V_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal splitText_4u_256u_U0_IVStrm_3_V_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_cipherkeyStrm_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal splitText_4u_256u_U0_cipherkeyStrm_V_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_cipherkeyStrm_1_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal splitText_4u_256u_U0_cipherkeyStrm_1_V_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_cipherkeyStrm_2_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal splitText_4u_256u_U0_cipherkeyStrm_2_V_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_cipherkeyStrm_3_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal splitText_4u_256u_U0_cipherkeyStrm_3_V_V_write : STD_LOGIC;
    signal splitText_4u_256u_U0_ap_ext_blocking_n : STD_LOGIC;
    signal splitText_4u_256u_U0_ap_str_blocking_n : STD_LOGIC;
    signal splitText_4u_256u_U0_ap_int_blocking_n : STD_LOGIC;
    signal textBlkStrm_full_n : STD_LOGIC;
    signal textBlkStrm_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal textBlkStrm_empty_n : STD_LOGIC;
    signal msgNumStrm1_full_n : STD_LOGIC;
    signal msgNumStrm1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal msgNumStrm1_empty_n : STD_LOGIC;
    signal taskNumStrm1_full_n : STD_LOGIC;
    signal taskNumStrm1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal taskNumStrm1_empty_n : STD_LOGIC;
    signal IVInStrm_full_n : STD_LOGIC;
    signal IVInStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal IVInStrm_empty_n : STD_LOGIC;
    signal cipherkeyInStrm_full_n : STD_LOGIC;
    signal cipherkeyInStrm_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal cipherkeyInStrm_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_splitText_4u_256u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_splitText_4u_256u_U0_full_n : STD_LOGIC;
    signal start_for_splitText_4u_256u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_splitText_4u_256u_U0_empty_n : STD_LOGIC;
    signal splitText_4u_256u_U0_start_full_n : STD_LOGIC;
    signal splitText_4u_256u_U0_start_write : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;

    component aes256CbcDecryptKernel_readBlock_128u_4u_256u_107 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        outputData : IN STD_LOGIC_VECTOR (63 downto 0);
        outputData_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        outputData_out_full_n : IN STD_LOGIC;
        outputData_out_write : OUT STD_LOGIC;
        m_axi_gmem0_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        textBlkStrm_i_i_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        textBlkStrm_i_i_full_n : IN STD_LOGIC;
        textBlkStrm_i_i_write : OUT STD_LOGIC;
        msgNumStrm_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        msgNumStrm_full_n : IN STD_LOGIC;
        msgNumStrm_write : OUT STD_LOGIC;
        msgNumStrm1_i_i_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        msgNumStrm1_i_i_full_n : IN STD_LOGIC;
        msgNumStrm1_i_i_write : OUT STD_LOGIC;
        taskNumStrm_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        taskNumStrm_full_n : IN STD_LOGIC;
        taskNumStrm_write : OUT STD_LOGIC;
        taskNumStrm1_i_i_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        taskNumStrm1_i_i_full_n : IN STD_LOGIC;
        taskNumStrm1_i_i_write : OUT STD_LOGIC;
        taskNumStrm2_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        taskNumStrm2_full_n : IN STD_LOGIC;
        taskNumStrm2_write : OUT STD_LOGIC;
        IVInStrm_i_i_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        IVInStrm_i_i_full_n : IN STD_LOGIC;
        IVInStrm_i_i_write : OUT STD_LOGIC;
        cipherkeyInStrm_i_i_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        cipherkeyInStrm_i_i_full_n : IN STD_LOGIC;
        cipherkeyInStrm_i_i_write : OUT STD_LOGIC;
        ptr : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component aes256CbcDecryptKernel_splitText_4u_256u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        textBlkStrm_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        textBlkStrm_empty_n : IN STD_LOGIC;
        textBlkStrm_read : OUT STD_LOGIC;
        msgNumStrm_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        msgNumStrm_empty_n : IN STD_LOGIC;
        msgNumStrm_read : OUT STD_LOGIC;
        taskNumStrm_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        taskNumStrm_empty_n : IN STD_LOGIC;
        taskNumStrm_read : OUT STD_LOGIC;
        IVInStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        IVInStrm_empty_n : IN STD_LOGIC;
        IVInStrm_read : OUT STD_LOGIC;
        cipherkeyInStrm_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        cipherkeyInStrm_empty_n : IN STD_LOGIC;
        cipherkeyInStrm_read : OUT STD_LOGIC;
        textStrm_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        textStrm_V_V_full_n : IN STD_LOGIC;
        textStrm_V_V_write : OUT STD_LOGIC;
        textStrm_1_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        textStrm_1_V_V_full_n : IN STD_LOGIC;
        textStrm_1_V_V_write : OUT STD_LOGIC;
        textStrm_2_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        textStrm_2_V_V_full_n : IN STD_LOGIC;
        textStrm_2_V_V_write : OUT STD_LOGIC;
        textStrm_3_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        textStrm_3_V_V_full_n : IN STD_LOGIC;
        textStrm_3_V_V_write : OUT STD_LOGIC;
        endTextStrm_V_din : OUT STD_LOGIC;
        endTextStrm_V_full_n : IN STD_LOGIC;
        endTextStrm_V_write : OUT STD_LOGIC;
        endTextStrm_1_V_din : OUT STD_LOGIC;
        endTextStrm_1_V_full_n : IN STD_LOGIC;
        endTextStrm_1_V_write : OUT STD_LOGIC;
        endTextStrm_2_V_din : OUT STD_LOGIC;
        endTextStrm_2_V_full_n : IN STD_LOGIC;
        endTextStrm_2_V_write : OUT STD_LOGIC;
        endTextStrm_3_V_din : OUT STD_LOGIC;
        endTextStrm_3_V_full_n : IN STD_LOGIC;
        endTextStrm_3_V_write : OUT STD_LOGIC;
        IVStrm_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        IVStrm_V_V_full_n : IN STD_LOGIC;
        IVStrm_V_V_write : OUT STD_LOGIC;
        IVStrm_1_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        IVStrm_1_V_V_full_n : IN STD_LOGIC;
        IVStrm_1_V_V_write : OUT STD_LOGIC;
        IVStrm_2_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        IVStrm_2_V_V_full_n : IN STD_LOGIC;
        IVStrm_2_V_V_write : OUT STD_LOGIC;
        IVStrm_3_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        IVStrm_3_V_V_full_n : IN STD_LOGIC;
        IVStrm_3_V_V_write : OUT STD_LOGIC;
        cipherkeyStrm_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        cipherkeyStrm_V_V_full_n : IN STD_LOGIC;
        cipherkeyStrm_V_V_write : OUT STD_LOGIC;
        cipherkeyStrm_1_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        cipherkeyStrm_1_V_V_full_n : IN STD_LOGIC;
        cipherkeyStrm_1_V_V_write : OUT STD_LOGIC;
        cipherkeyStrm_2_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        cipherkeyStrm_2_V_V_full_n : IN STD_LOGIC;
        cipherkeyStrm_2_V_V_write : OUT STD_LOGIC;
        cipherkeyStrm_3_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        cipherkeyStrm_3_V_V_full_n : IN STD_LOGIC;
        cipherkeyStrm_3_V_V_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component aes256CbcDecryptKernel_fifo_w512_d256_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component aes256CbcDecryptKernel_fifo_w64_d2_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component aes256CbcDecryptKernel_fifo_w128_d32_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component aes256CbcDecryptKernel_fifo_w256_d32_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component aes256CbcDecryptKernel_start_for_splitText_4u_256u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    readBlock_128u_4u_256u_107_U0 : component aes256CbcDecryptKernel_readBlock_128u_4u_256u_107
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => readBlock_128u_4u_256u_107_U0_ap_start,
        start_full_n => start_for_splitText_4u_256u_U0_full_n,
        ap_done => readBlock_128u_4u_256u_107_U0_ap_done,
        ap_continue => readBlock_128u_4u_256u_107_U0_ap_continue,
        ap_idle => readBlock_128u_4u_256u_107_U0_ap_idle,
        ap_ready => readBlock_128u_4u_256u_107_U0_ap_ready,
        start_out => readBlock_128u_4u_256u_107_U0_start_out,
        start_write => readBlock_128u_4u_256u_107_U0_start_write,
        outputData => outputData,
        outputData_out_din => readBlock_128u_4u_256u_107_U0_outputData_out_din,
        outputData_out_full_n => outputData_out_full_n,
        outputData_out_write => readBlock_128u_4u_256u_107_U0_outputData_out_write,
        m_axi_gmem0_0_AWVALID => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWVALID,
        m_axi_gmem0_0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_0_AWADDR => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWADDR,
        m_axi_gmem0_0_AWID => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWID,
        m_axi_gmem0_0_AWLEN => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWLEN,
        m_axi_gmem0_0_AWSIZE => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWSIZE,
        m_axi_gmem0_0_AWBURST => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWBURST,
        m_axi_gmem0_0_AWLOCK => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWLOCK,
        m_axi_gmem0_0_AWCACHE => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWCACHE,
        m_axi_gmem0_0_AWPROT => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWPROT,
        m_axi_gmem0_0_AWQOS => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWQOS,
        m_axi_gmem0_0_AWREGION => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWREGION,
        m_axi_gmem0_0_AWUSER => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_AWUSER,
        m_axi_gmem0_0_WVALID => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_WVALID,
        m_axi_gmem0_0_WREADY => ap_const_logic_0,
        m_axi_gmem0_0_WDATA => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_WDATA,
        m_axi_gmem0_0_WSTRB => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_WSTRB,
        m_axi_gmem0_0_WLAST => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_WLAST,
        m_axi_gmem0_0_WID => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_WID,
        m_axi_gmem0_0_WUSER => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_WUSER,
        m_axi_gmem0_0_ARVALID => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARVALID,
        m_axi_gmem0_0_ARREADY => m_axi_gmem0_0_ARREADY,
        m_axi_gmem0_0_ARADDR => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARADDR,
        m_axi_gmem0_0_ARID => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARID,
        m_axi_gmem0_0_ARLEN => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARLEN,
        m_axi_gmem0_0_ARSIZE => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARSIZE,
        m_axi_gmem0_0_ARBURST => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARBURST,
        m_axi_gmem0_0_ARLOCK => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARLOCK,
        m_axi_gmem0_0_ARCACHE => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARCACHE,
        m_axi_gmem0_0_ARPROT => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARPROT,
        m_axi_gmem0_0_ARQOS => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARQOS,
        m_axi_gmem0_0_ARREGION => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARREGION,
        m_axi_gmem0_0_ARUSER => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARUSER,
        m_axi_gmem0_0_RVALID => m_axi_gmem0_0_RVALID,
        m_axi_gmem0_0_RREADY => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_RREADY,
        m_axi_gmem0_0_RDATA => m_axi_gmem0_0_RDATA,
        m_axi_gmem0_0_RLAST => m_axi_gmem0_0_RLAST,
        m_axi_gmem0_0_RID => m_axi_gmem0_0_RID,
        m_axi_gmem0_0_RUSER => m_axi_gmem0_0_RUSER,
        m_axi_gmem0_0_RRESP => m_axi_gmem0_0_RRESP,
        m_axi_gmem0_0_BVALID => ap_const_logic_0,
        m_axi_gmem0_0_BREADY => readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_BREADY,
        m_axi_gmem0_0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_0_BID => ap_const_lv1_0,
        m_axi_gmem0_0_BUSER => ap_const_lv1_0,
        textBlkStrm_i_i_din => readBlock_128u_4u_256u_107_U0_textBlkStrm_i_i_din,
        textBlkStrm_i_i_full_n => textBlkStrm_full_n,
        textBlkStrm_i_i_write => readBlock_128u_4u_256u_107_U0_textBlkStrm_i_i_write,
        msgNumStrm_din => readBlock_128u_4u_256u_107_U0_msgNumStrm_din,
        msgNumStrm_full_n => msgNumStrm_full_n,
        msgNumStrm_write => readBlock_128u_4u_256u_107_U0_msgNumStrm_write,
        msgNumStrm1_i_i_din => readBlock_128u_4u_256u_107_U0_msgNumStrm1_i_i_din,
        msgNumStrm1_i_i_full_n => msgNumStrm1_full_n,
        msgNumStrm1_i_i_write => readBlock_128u_4u_256u_107_U0_msgNumStrm1_i_i_write,
        taskNumStrm_din => readBlock_128u_4u_256u_107_U0_taskNumStrm_din,
        taskNumStrm_full_n => taskNumStrm_full_n,
        taskNumStrm_write => readBlock_128u_4u_256u_107_U0_taskNumStrm_write,
        taskNumStrm1_i_i_din => readBlock_128u_4u_256u_107_U0_taskNumStrm1_i_i_din,
        taskNumStrm1_i_i_full_n => taskNumStrm1_full_n,
        taskNumStrm1_i_i_write => readBlock_128u_4u_256u_107_U0_taskNumStrm1_i_i_write,
        taskNumStrm2_din => readBlock_128u_4u_256u_107_U0_taskNumStrm2_din,
        taskNumStrm2_full_n => taskNumStrm2_full_n,
        taskNumStrm2_write => readBlock_128u_4u_256u_107_U0_taskNumStrm2_write,
        IVInStrm_i_i_din => readBlock_128u_4u_256u_107_U0_IVInStrm_i_i_din,
        IVInStrm_i_i_full_n => IVInStrm_full_n,
        IVInStrm_i_i_write => readBlock_128u_4u_256u_107_U0_IVInStrm_i_i_write,
        cipherkeyInStrm_i_i_din => readBlock_128u_4u_256u_107_U0_cipherkeyInStrm_i_i_din,
        cipherkeyInStrm_i_i_full_n => cipherkeyInStrm_full_n,
        cipherkeyInStrm_i_i_write => readBlock_128u_4u_256u_107_U0_cipherkeyInStrm_i_i_write,
        ptr => ptr,
        ap_ext_blocking_n => readBlock_128u_4u_256u_107_U0_ap_ext_blocking_n,
        ap_str_blocking_n => readBlock_128u_4u_256u_107_U0_ap_str_blocking_n,
        ap_int_blocking_n => readBlock_128u_4u_256u_107_U0_ap_int_blocking_n);

    splitText_4u_256u_U0 : component aes256CbcDecryptKernel_splitText_4u_256u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => splitText_4u_256u_U0_ap_start,
        ap_done => splitText_4u_256u_U0_ap_done,
        ap_continue => splitText_4u_256u_U0_ap_continue,
        ap_idle => splitText_4u_256u_U0_ap_idle,
        ap_ready => splitText_4u_256u_U0_ap_ready,
        textBlkStrm_dout => textBlkStrm_dout,
        textBlkStrm_empty_n => textBlkStrm_empty_n,
        textBlkStrm_read => splitText_4u_256u_U0_textBlkStrm_read,
        msgNumStrm_dout => msgNumStrm1_dout,
        msgNumStrm_empty_n => msgNumStrm1_empty_n,
        msgNumStrm_read => splitText_4u_256u_U0_msgNumStrm_read,
        taskNumStrm_dout => taskNumStrm1_dout,
        taskNumStrm_empty_n => taskNumStrm1_empty_n,
        taskNumStrm_read => splitText_4u_256u_U0_taskNumStrm_read,
        IVInStrm_dout => IVInStrm_dout,
        IVInStrm_empty_n => IVInStrm_empty_n,
        IVInStrm_read => splitText_4u_256u_U0_IVInStrm_read,
        cipherkeyInStrm_dout => cipherkeyInStrm_dout,
        cipherkeyInStrm_empty_n => cipherkeyInStrm_empty_n,
        cipherkeyInStrm_read => splitText_4u_256u_U0_cipherkeyInStrm_read,
        textStrm_V_V_din => splitText_4u_256u_U0_textStrm_V_V_din,
        textStrm_V_V_full_n => textStrm_V_V_full_n,
        textStrm_V_V_write => splitText_4u_256u_U0_textStrm_V_V_write,
        textStrm_1_V_V_din => splitText_4u_256u_U0_textStrm_1_V_V_din,
        textStrm_1_V_V_full_n => textStrm_1_V_V_full_n,
        textStrm_1_V_V_write => splitText_4u_256u_U0_textStrm_1_V_V_write,
        textStrm_2_V_V_din => splitText_4u_256u_U0_textStrm_2_V_V_din,
        textStrm_2_V_V_full_n => textStrm_2_V_V_full_n,
        textStrm_2_V_V_write => splitText_4u_256u_U0_textStrm_2_V_V_write,
        textStrm_3_V_V_din => splitText_4u_256u_U0_textStrm_3_V_V_din,
        textStrm_3_V_V_full_n => textStrm_3_V_V_full_n,
        textStrm_3_V_V_write => splitText_4u_256u_U0_textStrm_3_V_V_write,
        endTextStrm_V_din => splitText_4u_256u_U0_endTextStrm_V_din,
        endTextStrm_V_full_n => endTextStrm_V_full_n,
        endTextStrm_V_write => splitText_4u_256u_U0_endTextStrm_V_write,
        endTextStrm_1_V_din => splitText_4u_256u_U0_endTextStrm_1_V_din,
        endTextStrm_1_V_full_n => endTextStrm_1_V_full_n,
        endTextStrm_1_V_write => splitText_4u_256u_U0_endTextStrm_1_V_write,
        endTextStrm_2_V_din => splitText_4u_256u_U0_endTextStrm_2_V_din,
        endTextStrm_2_V_full_n => endTextStrm_2_V_full_n,
        endTextStrm_2_V_write => splitText_4u_256u_U0_endTextStrm_2_V_write,
        endTextStrm_3_V_din => splitText_4u_256u_U0_endTextStrm_3_V_din,
        endTextStrm_3_V_full_n => endTextStrm_3_V_full_n,
        endTextStrm_3_V_write => splitText_4u_256u_U0_endTextStrm_3_V_write,
        IVStrm_V_V_din => splitText_4u_256u_U0_IVStrm_V_V_din,
        IVStrm_V_V_full_n => IVStrm_V_V_full_n,
        IVStrm_V_V_write => splitText_4u_256u_U0_IVStrm_V_V_write,
        IVStrm_1_V_V_din => splitText_4u_256u_U0_IVStrm_1_V_V_din,
        IVStrm_1_V_V_full_n => IVStrm_1_V_V_full_n,
        IVStrm_1_V_V_write => splitText_4u_256u_U0_IVStrm_1_V_V_write,
        IVStrm_2_V_V_din => splitText_4u_256u_U0_IVStrm_2_V_V_din,
        IVStrm_2_V_V_full_n => IVStrm_2_V_V_full_n,
        IVStrm_2_V_V_write => splitText_4u_256u_U0_IVStrm_2_V_V_write,
        IVStrm_3_V_V_din => splitText_4u_256u_U0_IVStrm_3_V_V_din,
        IVStrm_3_V_V_full_n => IVStrm_3_V_V_full_n,
        IVStrm_3_V_V_write => splitText_4u_256u_U0_IVStrm_3_V_V_write,
        cipherkeyStrm_V_V_din => splitText_4u_256u_U0_cipherkeyStrm_V_V_din,
        cipherkeyStrm_V_V_full_n => cipherkeyStrm_V_V_full_n,
        cipherkeyStrm_V_V_write => splitText_4u_256u_U0_cipherkeyStrm_V_V_write,
        cipherkeyStrm_1_V_V_din => splitText_4u_256u_U0_cipherkeyStrm_1_V_V_din,
        cipherkeyStrm_1_V_V_full_n => cipherkeyStrm_1_V_V_full_n,
        cipherkeyStrm_1_V_V_write => splitText_4u_256u_U0_cipherkeyStrm_1_V_V_write,
        cipherkeyStrm_2_V_V_din => splitText_4u_256u_U0_cipherkeyStrm_2_V_V_din,
        cipherkeyStrm_2_V_V_full_n => cipherkeyStrm_2_V_V_full_n,
        cipherkeyStrm_2_V_V_write => splitText_4u_256u_U0_cipherkeyStrm_2_V_V_write,
        cipherkeyStrm_3_V_V_din => splitText_4u_256u_U0_cipherkeyStrm_3_V_V_din,
        cipherkeyStrm_3_V_V_full_n => cipherkeyStrm_3_V_V_full_n,
        cipherkeyStrm_3_V_V_write => splitText_4u_256u_U0_cipherkeyStrm_3_V_V_write,
        ap_ext_blocking_n => splitText_4u_256u_U0_ap_ext_blocking_n,
        ap_str_blocking_n => splitText_4u_256u_U0_ap_str_blocking_n,
        ap_int_blocking_n => splitText_4u_256u_U0_ap_int_blocking_n);

    textBlkStrm_U : component aes256CbcDecryptKernel_fifo_w512_d256_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readBlock_128u_4u_256u_107_U0_textBlkStrm_i_i_din,
        if_full_n => textBlkStrm_full_n,
        if_write => readBlock_128u_4u_256u_107_U0_textBlkStrm_i_i_write,
        if_dout => textBlkStrm_dout,
        if_empty_n => textBlkStrm_empty_n,
        if_read => splitText_4u_256u_U0_textBlkStrm_read);

    msgNumStrm1_U : component aes256CbcDecryptKernel_fifo_w64_d2_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readBlock_128u_4u_256u_107_U0_msgNumStrm1_i_i_din,
        if_full_n => msgNumStrm1_full_n,
        if_write => readBlock_128u_4u_256u_107_U0_msgNumStrm1_i_i_write,
        if_dout => msgNumStrm1_dout,
        if_empty_n => msgNumStrm1_empty_n,
        if_read => splitText_4u_256u_U0_msgNumStrm_read);

    taskNumStrm1_U : component aes256CbcDecryptKernel_fifo_w64_d2_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readBlock_128u_4u_256u_107_U0_taskNumStrm1_i_i_din,
        if_full_n => taskNumStrm1_full_n,
        if_write => readBlock_128u_4u_256u_107_U0_taskNumStrm1_i_i_write,
        if_dout => taskNumStrm1_dout,
        if_empty_n => taskNumStrm1_empty_n,
        if_read => splitText_4u_256u_U0_taskNumStrm_read);

    IVInStrm_U : component aes256CbcDecryptKernel_fifo_w128_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readBlock_128u_4u_256u_107_U0_IVInStrm_i_i_din,
        if_full_n => IVInStrm_full_n,
        if_write => readBlock_128u_4u_256u_107_U0_IVInStrm_i_i_write,
        if_dout => IVInStrm_dout,
        if_empty_n => IVInStrm_empty_n,
        if_read => splitText_4u_256u_U0_IVInStrm_read);

    cipherkeyInStrm_U : component aes256CbcDecryptKernel_fifo_w256_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readBlock_128u_4u_256u_107_U0_cipherkeyInStrm_i_i_din,
        if_full_n => cipherkeyInStrm_full_n,
        if_write => readBlock_128u_4u_256u_107_U0_cipherkeyInStrm_i_i_write,
        if_dout => cipherkeyInStrm_dout,
        if_empty_n => cipherkeyInStrm_empty_n,
        if_read => splitText_4u_256u_U0_cipherkeyInStrm_read);

    start_for_splitText_4u_256u_U0_U : component aes256CbcDecryptKernel_start_for_splitText_4u_256u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_splitText_4u_256u_U0_din,
        if_full_n => start_for_splitText_4u_256u_U0_full_n,
        if_write => readBlock_128u_4u_256u_107_U0_start_write,
        if_dout => start_for_splitText_4u_256u_U0_dout,
        if_empty_n => start_for_splitText_4u_256u_U0_empty_n,
        if_read => splitText_4u_256u_U0_ap_ready);





    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    IVStrm_1_V_V_din <= splitText_4u_256u_U0_IVStrm_1_V_V_din;
    IVStrm_1_V_V_write <= splitText_4u_256u_U0_IVStrm_1_V_V_write;
    IVStrm_2_V_V_din <= splitText_4u_256u_U0_IVStrm_2_V_V_din;
    IVStrm_2_V_V_write <= splitText_4u_256u_U0_IVStrm_2_V_V_write;
    IVStrm_3_V_V_din <= splitText_4u_256u_U0_IVStrm_3_V_V_din;
    IVStrm_3_V_V_write <= splitText_4u_256u_U0_IVStrm_3_V_V_write;
    IVStrm_V_V_din <= splitText_4u_256u_U0_IVStrm_V_V_din;
    IVStrm_V_V_write <= splitText_4u_256u_U0_IVStrm_V_V_write;
    ap_done <= ap_sync_done;
    ap_ext_blocking_cur_n <= ap_const_logic_1;
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_ext_blocking_cur_n);
    ap_ext_blocking_sub_n <= (splitText_4u_256u_U0_ap_ext_blocking_n and readBlock_128u_4u_256u_107_U0_ap_ext_blocking_n);
    ap_idle <= (splitText_4u_256u_U0_ap_idle and readBlock_128u_4u_256u_107_U0_ap_idle);
    ap_int_blocking_cur_n <= ap_const_logic_1;
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);
    ap_int_blocking_sub_n <= (splitText_4u_256u_U0_ap_int_blocking_n and readBlock_128u_4u_256u_107_U0_ap_int_blocking_n);
    ap_ready <= internal_ap_ready;
    ap_str_blocking_cur_n <= ap_const_logic_1;
    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_str_blocking_cur_n);
    ap_str_blocking_sub_n <= (splitText_4u_256u_U0_ap_str_blocking_n and readBlock_128u_4u_256u_107_U0_ap_str_blocking_n);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (splitText_4u_256u_U0_ap_done and readBlock_128u_4u_256u_107_U0_ap_done);
    ap_sync_ready <= readBlock_128u_4u_256u_107_U0_ap_ready;
    cipherkeyStrm_1_V_V_din <= splitText_4u_256u_U0_cipherkeyStrm_1_V_V_din;
    cipherkeyStrm_1_V_V_write <= splitText_4u_256u_U0_cipherkeyStrm_1_V_V_write;
    cipherkeyStrm_2_V_V_din <= splitText_4u_256u_U0_cipherkeyStrm_2_V_V_din;
    cipherkeyStrm_2_V_V_write <= splitText_4u_256u_U0_cipherkeyStrm_2_V_V_write;
    cipherkeyStrm_3_V_V_din <= splitText_4u_256u_U0_cipherkeyStrm_3_V_V_din;
    cipherkeyStrm_3_V_V_write <= splitText_4u_256u_U0_cipherkeyStrm_3_V_V_write;
    cipherkeyStrm_V_V_din <= splitText_4u_256u_U0_cipherkeyStrm_V_V_din;
    cipherkeyStrm_V_V_write <= splitText_4u_256u_U0_cipherkeyStrm_V_V_write;
    endTextStrm_1_V_din <= splitText_4u_256u_U0_endTextStrm_1_V_din;
    endTextStrm_1_V_write <= splitText_4u_256u_U0_endTextStrm_1_V_write;
    endTextStrm_2_V_din <= splitText_4u_256u_U0_endTextStrm_2_V_din;
    endTextStrm_2_V_write <= splitText_4u_256u_U0_endTextStrm_2_V_write;
    endTextStrm_3_V_din <= splitText_4u_256u_U0_endTextStrm_3_V_din;
    endTextStrm_3_V_write <= splitText_4u_256u_U0_endTextStrm_3_V_write;
    endTextStrm_V_din <= splitText_4u_256u_U0_endTextStrm_V_din;
    endTextStrm_V_write <= splitText_4u_256u_U0_endTextStrm_V_write;
    internal_ap_ready <= ap_sync_ready;
    m_axi_gmem0_0_ARADDR <= readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARADDR;
    m_axi_gmem0_0_ARBURST <= readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARBURST;
    m_axi_gmem0_0_ARCACHE <= readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARCACHE;
    m_axi_gmem0_0_ARID <= readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARID;
    m_axi_gmem0_0_ARLEN <= readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARLEN;
    m_axi_gmem0_0_ARLOCK <= readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARLOCK;
    m_axi_gmem0_0_ARPROT <= readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARPROT;
    m_axi_gmem0_0_ARQOS <= readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARQOS;
    m_axi_gmem0_0_ARREGION <= readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARREGION;
    m_axi_gmem0_0_ARSIZE <= readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARSIZE;
    m_axi_gmem0_0_ARUSER <= readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARUSER;
    m_axi_gmem0_0_ARVALID <= readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_ARVALID;
    m_axi_gmem0_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_0_BREADY <= ap_const_logic_0;
    m_axi_gmem0_0_RREADY <= readBlock_128u_4u_256u_107_U0_m_axi_gmem0_0_RREADY;
    m_axi_gmem0_0_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem0_0_WID <= ap_const_lv1_0;
    m_axi_gmem0_0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_0_WSTRB <= ap_const_lv64_0;
    m_axi_gmem0_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_0_WVALID <= ap_const_logic_0;
    msgNumStrm_din <= readBlock_128u_4u_256u_107_U0_msgNumStrm_din;
    msgNumStrm_write <= readBlock_128u_4u_256u_107_U0_msgNumStrm_write;
    outputData_out_din <= readBlock_128u_4u_256u_107_U0_outputData_out_din;
    outputData_out_write <= readBlock_128u_4u_256u_107_U0_outputData_out_write;
    readBlock_128u_4u_256u_107_U0_ap_continue <= ap_sync_continue;
    readBlock_128u_4u_256u_107_U0_ap_start <= real_start;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    splitText_4u_256u_U0_ap_continue <= ap_sync_continue;
    splitText_4u_256u_U0_ap_start <= start_for_splitText_4u_256u_U0_empty_n;
    splitText_4u_256u_U0_start_full_n <= ap_const_logic_1;
    splitText_4u_256u_U0_start_write <= ap_const_logic_0;
    start_for_splitText_4u_256u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    taskNumStrm2_din <= readBlock_128u_4u_256u_107_U0_taskNumStrm2_din;
    taskNumStrm2_write <= readBlock_128u_4u_256u_107_U0_taskNumStrm2_write;
    taskNumStrm_din <= readBlock_128u_4u_256u_107_U0_taskNumStrm_din;
    taskNumStrm_write <= readBlock_128u_4u_256u_107_U0_taskNumStrm_write;
    textStrm_1_V_V_din <= splitText_4u_256u_U0_textStrm_1_V_V_din;
    textStrm_1_V_V_write <= splitText_4u_256u_U0_textStrm_1_V_V_write;
    textStrm_2_V_V_din <= splitText_4u_256u_U0_textStrm_2_V_V_din;
    textStrm_2_V_V_write <= splitText_4u_256u_U0_textStrm_2_V_V_write;
    textStrm_3_V_V_din <= splitText_4u_256u_U0_textStrm_3_V_V_din;
    textStrm_3_V_V_write <= splitText_4u_256u_U0_textStrm_3_V_V_write;
    textStrm_V_V_din <= splitText_4u_256u_U0_textStrm_V_V_din;
    textStrm_V_V_write <= splitText_4u_256u_U0_textStrm_V_V_write;
end behav;
