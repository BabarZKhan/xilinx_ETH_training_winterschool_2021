-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity aes256CbcDecryptKernel_singleCipherMode_256u_75_decipher_0_496_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of aes256CbcDecryptKernel_singleCipherMode_256u_75_decipher_0_496_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01010000101001111111010001010001", 
    1 => "01010011011001010100000101111110", 
    2 => "11000011101001000001011100011010", 
    3 => "10010110010111100010011100111010", 
    4 => "11001011011010111010101100111011", 
    5 => "11110001010001011001110100011111", 
    6 => "10101011010110001111101010101100", 
    7 => "10010011000000111110001101001011", 
    8 => "01010101111110100011000000100000", 
    9 => "11110110011011010111011010101101", 
    10 => "10010001011101101100110010001000", 
    11 => "00100101010011000000001011110101", 
    12 => "11111100110101111110010101001111", 
    13 => "11010111110010110010101011000101", 
    14 => "10000000010001000011010100100110", 
    15 => "10001111101000110110001010110101", 
    16 => "01001001010110101011000111011110", 
    17 => "01100111000110111011101000100101", 
    18 => "10011000000011101110101001000101", 
    19 => "11100001110000001111111001011101", 
    20 => "00000010011101010010111111000011", 
    21 => "00010010111100000100110010000001", 
    22 => "10100011100101110100011010001101", 
    23 => "11000110111110011101001101101011", 
    24 => "11100111010111111000111100000011", 
    25 => "10010101100111001001001000010101", 
    26 => "11101011011110100110110110111111", 
    27 => "11011010010110010101001010010101", 
    28 => "00101101100000111011111011010100", 
    29 => "11010011001000010111010001011000", 
    30 => "00101001011010011110000001001001", 
    31 => "01000100110010001100100110001110", 
    32 => "01101010100010011100001001110101", 
    33 => "01111000011110011000111011110100", 
    34 => "01101011001111100101100010011001", 
    35 => "11011101011100011011100100100111", 
    36 => "10110110010011111110000110111110", 
    37 => "00010111101011011000100011110000", 
    38 => "01100110101011000010000011001001", 
    39 => "10110100001110101100111001111101", 
    40 => "00011000010010101101111101100011", 
    41 => "10000010001100010001101011100101", 
    42 => "01100000001100110101000110010111", 
    43 => "01000101011111110101001101100010", 
    44 => "11100000011101110110010010110001", 
    45 => "10000100101011100110101110111011", 
    46 => "00011100101000001000000111111110", 
    47 => "10010100001010110000100011111001", 
    48 => "01011000011010000100100001110000", 
    49 => "00011001111111010100010110001111", 
    50 => "10000111011011001101111010010100", 
    51 => "10110111111110000111101101010010", 
    52 => "00100011110100110111001110101011", 
    53 => "11100010000000100100101101110010", 
    54 => "01010111100011110001111111100011", 
    55 => "00101010101010110101010101100110", 
    56 => "00000111001010001110101110110010", 
    57 => "00000011110000101011010100101111", 
    58 => "10011010011110111100010110000110", 
    59 => "10100101000010000011011111010011", 
    60 => "11110010100001110010100000110000", 
    61 => "10110010101001011011111100100011", 
    62 => "10111010011010100000001100000010", 
    63 => "01011100100000100001011011101101", 
    64 => "00101011000111001100111110001010", 
    65 => "10010010101101000111100110100111", 
    66 => "11110000111100100000011111110011", 
    67 => "10100001111000100110100101001110", 
    68 => "11001101111101001101101001100101", 
    69 => "11010101101111100000010100000110", 
    70 => "00011111011000100011010011010001", 
    71 => "10001010111111101010011011000100", 
    72 => "10011101010100110010111000110100", 
    73 => "10100000010101011111001110100010", 
    74 => "00110010111000011000101000000101", 
    75 => "01110101111010111111011010100100", 
    76 => "00111001111011001000001100001011", 
    77 => "10101010111011110110000001000000", 
    78 => "00000110100111110111000101011110", 
    79 => "01010001000100000110111010111101", 
    80 => "11111001100010100010000100111110", 
    81 => "00111101000001101101110110010110", 
    82 => "10101110000001010011111011011101", 
    83 => "01000110101111011110011001001101", 
    84 => "10110101100011010101010010010001", 
    85 => "00000101010111011100010001110001", 
    86 => "01101111110101000000011000000100", 
    87 => "11111111000101010101000001100000", 
    88 => "00100100111110111001100000011001", 
    89 => "10010111111010011011110111010110", 
    90 => "11001100010000110100000010001001", 
    91 => "01110111100111101101100101100111", 
    92 => "10111101010000101110100010110000", 
    93 => "10001000100010111000100100000111", 
    94 => "00111000010110110001100111100111", 
    95 => "11011011111011101100100001111001", 
    96 => "01000111000010100111110010100001", 
    97 => "11101001000011110100001001111100", 
    98 => "11001001000111101000010011111000", 
    99 => "00000000000000000000000000000000", 
    100 => "10000011100001101000000000001001", 
    101 => "01001000111011010010101100110010", 
    102 => "10101100011100000001000100011110", 
    103 => "01001110011100100101101001101100", 
    104 => "11111011111111110000111011111101", 
    105 => "01010110001110001000010100001111", 
    106 => "00011110110101011010111000111101", 
    107 => "00100111001110010010110100110110", 
    108 => "01100100110110010000111100001010", 
    109 => "00100001101001100101110001101000", 
    110 => "11010001010101000101101110011011", 
    111 => "00111010001011100011011000100100", 
    112 => "10110001011001110000101000001100", 
    113 => "00001111111001110101011110010011", 
    114 => "11010010100101101110111010110100", 
    115 => "10011110100100011001101100011011", 
    116 => "01001111110001011100000010000000", 
    117 => "10100010001000001101110001100001", 
    118 => "01101001010010110111011101011010", 
    119 => "00010110000110100001001000011100", 
    120 => "00001010101110101001001111100010", 
    121 => "11100101001010101010000011000000", 
    122 => "01000011111000000010001000111100", 
    123 => "00011101000101110001101100010010", 
    124 => "00001011000011010000100100001110", 
    125 => "10101101110001111000101111110010", 
    126 => "10111001101010001011011000101101", 
    127 => "11001000101010010001111000010100", 
    128 => "10000101000110011111000101010111", 
    129 => "01001100000001110111010110101111", 
    130 => "10111011110111011001100111101110", 
    131 => "11111101011000000111111110100011", 
    132 => "10011111001001100000000111110111", 
    133 => "10111100111101010111001001011100", 
    134 => "11000101001110110110011001000100", 
    135 => "00110100011111101111101101011011", 
    136 => "01110110001010010100001110001011", 
    137 => "11011100110001100010001111001011", 
    138 => "01101000111111001110110110110110", 
    139 => "01100011111100011110010010111000", 
    140 => "11001010110111000011000111010111", 
    141 => "00010000100001010110001101000010", 
    142 => "01000000001000101001011100010011", 
    143 => "00100000000100011100011010000100", 
    144 => "01111101001001000100101010000101", 
    145 => "11111000001111011011101111010010", 
    146 => "00010001001100101111100110101110", 
    147 => "01101101101000010010100111000111", 
    148 => "01001011001011111001111000011101", 
    149 => "11110011001100001011001011011100", 
    150 => "11101100010100101000011000001101", 
    151 => "11010000111000111100000101110111", 
    152 => "01101100000101101011001100101011", 
    153 => "10011001101110010111000010101001", 
    154 => "11111010010010001001010000010001", 
    155 => "00100010011001001110100101000111", 
    156 => "11000100100011001111110010101000", 
    157 => "00011010001111111111000010100000", 
    158 => "11011000001011000111110101010110", 
    159 => "11101111100100000011001100100010", 
    160 => "11000111010011100100100110000111", 
    161 => "11000001110100010011100011011001", 
    162 => "11111110101000101100101010001100", 
    163 => "00110110000010111101010010011000", 
    164 => "11001111100000011111010110100110", 
    165 => "00101000110111100111101010100101", 
    166 => "00100110100011101011011111011010", 
    167 => "10100100101111111010110100111111", 
    168 => "11100100100111010011101000101100", 
    169 => "00001101100100100111100001010000", 
    170 => "10011011110011000101111101101010", 
    171 => "01100010010001100111111001010100", 
    172 => "11000010000100111000110111110110", 
    173 => "11101000101110001101100010010000", 
    174 => "01011110111101110011100100101110", 
    175 => "11110101101011111100001110000010", 
    176 => "10111110100000000101110110011111", 
    177 => "01111100100100111101000001101001", 
    178 => "10101001001011011101010101101111", 
    179 => "10110011000100100010010111001111", 
    180 => "00111011100110011010110011001000", 
    181 => "10100111011111010001100000010000", 
    182 => "01101110011000111001110011101000", 
    183 => "01111011101110110011101111011011", 
    184 => "00001001011110000010011011001101", 
    185 => "11110100000110000101100101101110", 
    186 => "00000001101101111001101011101100", 
    187 => "10101000100110100100111110000011", 
    188 => "01100101011011101001010111100110", 
    189 => "01111110111001101111111110101010", 
    190 => "00001000110011111011110000100001", 
    191 => "11100110111010000001010111101111", 
    192 => "11011001100110111110011110111010", 
    193 => "11001110001101100110111101001010", 
    194 => "11010100000010011001111111101010", 
    195 => "11010110011111001011000000101001", 
    196 => "10101111101100101010010000110001", 
    197 => "00110001001000110011111100101010", 
    198 => "00110000100101001010010111000110", 
    199 => "11000000011001101010001000110101", 
    200 => "00110111101111000100111001110100", 
    201 => "10100110110010101000001011111100", 
    202 => "10110000110100001001000011100000", 
    203 => "00010101110110001010011100110011", 
    204 => "01001010100110000000010011110001", 
    205 => "11110111110110101110110001000001", 
    206 => "00001110010100001100110101111111", 
    207 => "00101111111101101001000100010111", 
    208 => "10001101110101100100110101110110", 
    209 => "01001101101100001110111101000011", 
    210 => "01010100010011011010101011001100", 
    211 => "11011111000001001001011011100100", 
    212 => "11100011101101011101000110011110", 
    213 => "00011011100010000110101001001100", 
    214 => "10111000000111110010110011000001", 
    215 => "01111111010100010110010101000110", 
    216 => "00000100111010100101111010011101", 
    217 => "01011101001101011000110000000001", 
    218 => "01110011011101001000011111111010", 
    219 => "00101110010000010000101111111011", 
    220 => "01011010000111010110011110110011", 
    221 => "01010010110100101101101110010010", 
    222 => "00110011010101100001000011101001", 
    223 => "00010011010001111101011001101101", 
    224 => "10001100011000011101011110011010", 
    225 => "01111010000011001010000100110111", 
    226 => "10001110000101001111100001011001", 
    227 => "10001001001111000001001111101011", 
    228 => "11101110001001111010100111001110", 
    229 => "00110101110010010110000110110111", 
    230 => "11101101111001010001110011100001", 
    231 => "00111100101100010100011101111010", 
    232 => "01011001110111111101001010011100", 
    233 => "00111111011100111111001001010101", 
    234 => "01111001110011100001010000011000", 
    235 => "10111111001101111100011101110011", 
    236 => "11101010110011011111011101010011", 
    237 => "01011011101010101111110101011111", 
    238 => "00010100011011110011110111011111", 
    239 => "10000110110110110100010001111000", 
    240 => "10000001111100111010111111001010", 
    241 => "00111110110001000110100010111001", 
    242 => "00101100001101000010010000111000", 
    243 => "01011111010000001010001111000010", 
    244 => "01110010110000110001110100010110", 
    245 => "00001100001001011110001010111100", 
    246 => "10001011010010010011110000101000", 
    247 => "01000001100101010000110111111111", 
    248 => "01110001000000011010100000111001", 
    249 => "11011110101100110000110000001000", 
    250 => "10011100111001001011010011011000", 
    251 => "10010000110000010101011001100100", 
    252 => "01100001100001001100101101111011", 
    253 => "01110000101101100011001011010101", 
    254 => "01110100010111000110110001001000", 
    255 => "01000010010101111011100011010000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity aes256CbcDecryptKernel_singleCipherMode_256u_75_decipher_0_496 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of aes256CbcDecryptKernel_singleCipherMode_256u_75_decipher_0_496 is
    component aes256CbcDecryptKernel_singleCipherMode_256u_75_decipher_0_496_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    aes256CbcDecryptKernel_singleCipherMode_256u_75_decipher_0_496_rom_U :  component aes256CbcDecryptKernel_singleCipherMode_256u_75_decipher_0_496_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


