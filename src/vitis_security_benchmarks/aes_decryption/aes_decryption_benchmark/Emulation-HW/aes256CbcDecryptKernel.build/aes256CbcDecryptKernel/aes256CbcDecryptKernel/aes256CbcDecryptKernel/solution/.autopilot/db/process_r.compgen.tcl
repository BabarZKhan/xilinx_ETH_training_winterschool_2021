# This script segment is generated automatically by AutoPilot

# Memory (RAM/ROM)  definition:
set ID 73
set hasByteEnable 0
set MemName aes256CbcDecryptKernel_process_r_decipher_0_497
set CoreName ap_simcore_mem
set PortList { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
set DataWd 32
set AddrRange 256
set AddrWd 8
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "01010000101001111111010001010001" "01010011011001010100000101111110" "11000011101001000001011100011010" "10010110010111100010011100111010" "11001011011010111010101100111011" "11110001010001011001110100011111" "10101011010110001111101010101100" "10010011000000111110001101001011" "01010101111110100011000000100000" "11110110011011010111011010101101" "10010001011101101100110010001000" "00100101010011000000001011110101" "11111100110101111110010101001111" "11010111110010110010101011000101" "10000000010001000011010100100110" "10001111101000110110001010110101" "01001001010110101011000111011110" "01100111000110111011101000100101" "10011000000011101110101001000101" "11100001110000001111111001011101" "00000010011101010010111111000011" "00010010111100000100110010000001" "10100011100101110100011010001101" "11000110111110011101001101101011" "11100111010111111000111100000011" "10010101100111001001001000010101" "11101011011110100110110110111111" "11011010010110010101001010010101" "00101101100000111011111011010100" "11010011001000010111010001011000" "00101001011010011110000001001001" "01000100110010001100100110001110" "01101010100010011100001001110101" "01111000011110011000111011110100" "01101011001111100101100010011001" "11011101011100011011100100100111" "10110110010011111110000110111110" "00010111101011011000100011110000" "01100110101011000010000011001001" "10110100001110101100111001111101" "00011000010010101101111101100011" "10000010001100010001101011100101" "01100000001100110101000110010111" "01000101011111110101001101100010" "11100000011101110110010010110001" "10000100101011100110101110111011" "00011100101000001000000111111110" "10010100001010110000100011111001" "01011000011010000100100001110000" "00011001111111010100010110001111" "10000111011011001101111010010100" "10110111111110000111101101010010" "00100011110100110111001110101011" "11100010000000100100101101110010" "01010111100011110001111111100011" "00101010101010110101010101100110" "00000111001010001110101110110010" "00000011110000101011010100101111" "10011010011110111100010110000110" "10100101000010000011011111010011" "11110010100001110010100000110000" "10110010101001011011111100100011" "10111010011010100000001100000010" "01011100100000100001011011101101" "00101011000111001100111110001010" "10010010101101000111100110100111" "11110000111100100000011111110011" "10100001111000100110100101001110" "11001101111101001101101001100101" "11010101101111100000010100000110" "00011111011000100011010011010001" "10001010111111101010011011000100" "10011101010100110010111000110100" "10100000010101011111001110100010" "00110010111000011000101000000101" "01110101111010111111011010100100" "00111001111011001000001100001011" "10101010111011110110000001000000" "00000110100111110111000101011110" "01010001000100000110111010111101" "11111001100010100010000100111110" "00111101000001101101110110010110" "10101110000001010011111011011101" "01000110101111011110011001001101" "10110101100011010101010010010001" "00000101010111011100010001110001" "01101111110101000000011000000100" "11111111000101010101000001100000" "00100100111110111001100000011001" "10010111111010011011110111010110" "11001100010000110100000010001001" "01110111100111101101100101100111" "10111101010000101110100010110000" "10001000100010111000100100000111" "00111000010110110001100111100111" "11011011111011101100100001111001" "01000111000010100111110010100001" "11101001000011110100001001111100" "11001001000111101000010011111000" "00000000000000000000000000000000" "10000011100001101000000000001001" "01001000111011010010101100110010" "10101100011100000001000100011110" "01001110011100100101101001101100" "11111011111111110000111011111101" "01010110001110001000010100001111" "00011110110101011010111000111101" "00100111001110010010110100110110" "01100100110110010000111100001010" "00100001101001100101110001101000" "11010001010101000101101110011011" "00111010001011100011011000100100" "10110001011001110000101000001100" "00001111111001110101011110010011" "11010010100101101110111010110100" "10011110100100011001101100011011" "01001111110001011100000010000000" "10100010001000001101110001100001" "01101001010010110111011101011010" "00010110000110100001001000011100" "00001010101110101001001111100010" "11100101001010101010000011000000" "01000011111000000010001000111100" "00011101000101110001101100010010" "00001011000011010000100100001110" "10101101110001111000101111110010" "10111001101010001011011000101101" "11001000101010010001111000010100" "10000101000110011111000101010111" "01001100000001110111010110101111" "10111011110111011001100111101110" "11111101011000000111111110100011" "10011111001001100000000111110111" "10111100111101010111001001011100" "11000101001110110110011001000100" "00110100011111101111101101011011" "01110110001010010100001110001011" "11011100110001100010001111001011" "01101000111111001110110110110110" "01100011111100011110010010111000" "11001010110111000011000111010111" "00010000100001010110001101000010" "01000000001000101001011100010011" "00100000000100011100011010000100" "01111101001001000100101010000101" "11111000001111011011101111010010" "00010001001100101111100110101110" "01101101101000010010100111000111" "01001011001011111001111000011101" "11110011001100001011001011011100" "11101100010100101000011000001101" "11010000111000111100000101110111" "01101100000101101011001100101011" "10011001101110010111000010101001" "11111010010010001001010000010001" "00100010011001001110100101000111" "11000100100011001111110010101000" "00011010001111111111000010100000" "11011000001011000111110101010110" "11101111100100000011001100100010" "11000111010011100100100110000111" "11000001110100010011100011011001" "11111110101000101100101010001100" "00110110000010111101010010011000" "11001111100000011111010110100110" "00101000110111100111101010100101" "00100110100011101011011111011010" "10100100101111111010110100111111" "11100100100111010011101000101100" "00001101100100100111100001010000" "10011011110011000101111101101010" "01100010010001100111111001010100" "11000010000100111000110111110110" "11101000101110001101100010010000" "01011110111101110011100100101110" "11110101101011111100001110000010" "10111110100000000101110110011111" "01111100100100111101000001101001" "10101001001011011101010101101111" "10110011000100100010010111001111" "00111011100110011010110011001000" "10100111011111010001100000010000" "01101110011000111001110011101000" "01111011101110110011101111011011" "00001001011110000010011011001101" "11110100000110000101100101101110" "00000001101101111001101011101100" "10101000100110100100111110000011" "01100101011011101001010111100110" "01111110111001101111111110101010" "00001000110011111011110000100001" "11100110111010000001010111101111" "11011001100110111110011110111010" "11001110001101100110111101001010" "11010100000010011001111111101010" "11010110011111001011000000101001" "10101111101100101010010000110001" "00110001001000110011111100101010" "00110000100101001010010111000110" "11000000011001101010001000110101" "00110111101111000100111001110100" "10100110110010101000001011111100" "10110000110100001001000011100000" "00010101110110001010011100110011" "01001010100110000000010011110001" "11110111110110101110110001000001" "00001110010100001100110101111111" "00101111111101101001000100010111" "10001101110101100100110101110110" "01001101101100001110111101000011" "01010100010011011010101011001100" "11011111000001001001011011100100" "11100011101101011101000110011110" "00011011100010000110101001001100" "10111000000111110010110011000001" "01111111010100010110010101000110" "00000100111010100101111010011101" "01011101001101011000110000000001" "01110011011101001000011111111010" "00101110010000010000101111111011" "01011010000111010110011110110011" "01010010110100101101101110010010" "00110011010101100001000011101001" "00010011010001111101011001101101" "10001100011000011101011110011010" "01111010000011001010000100110111" "10001110000101001111100001011001" "10001001001111000001001111101011" "11101110001001111010100111001110" "00110101110010010110000110110111" "11101101111001010001110011100001" "00111100101100010100011101111010" "01011001110111111101001010011100" "00111111011100111111001001010101" "01111001110011100001010000011000" "10111111001101111100011101110011" "11101010110011011111011101010011" "01011011101010101111110101011111" "00010100011011110011110111011111" "10000110110110110100010001111000" "10000001111100111010111111001010" "00111110110001000110100010111001" "00101100001101000010010000111000" "01011111010000001010001111000010" "01110010110000110001110100010110" "00001100001001011110001010111100" "10001011010010010011110000101000" "01000001100101010000110111111111" "01110001000000011010100000111001" "11011110101100110000110000001000" "10011100111001001011010011011000" "10010000110000010101011001100100" "01100001100001001100101101111011" "01110000101101100011001011010101" "01110100010111000110110001001000" "01000010010101111011100011010000" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 0.594
set ClkPeriod 4
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 208 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 208 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 74
set hasByteEnable 0
set MemName aes256CbcDecryptKernel_process_r_decipher_0_2
set CoreName ap_simcore_mem
set PortList { 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 }
set DataWd 8
set AddrRange 256
set AddrWd 8
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "01010010" "00001001" "01101010" "11010101" "00110000" "00110110" "10100101" "00111000" "10111111" "01000000" "10100011" "10011110" "10000001" "11110011" "11010111" "11111011" "01111100" "11100011" "00111001" "10000010" "10011011" "00101111" "11111111" "10000111" "00110100" "10001110" "01000011" "01000100" "11000100" "11011110" "11101001" "11001011" "01010100" "01111011" "10010100" "00110010" "10100110" "11000010" "00100011" "00111101" "11101110" "01001100" "10010101" "00001011" "01000010" "11111010" "11000011" "01001110" "00001000" "00101110" "10100001" "01100110" "00101000" "11011001" "00100100" "10110010" "01110110" "01011011" "10100010" "01001001" "01101101" "10001011" "11010001" "00100101" "01110010" "11111000" "11110110" "01100100" "10000110" "01101000" "10011000" "00010110" "11010100" "10100100" "01011100" "11001100" "01011101" "01100101" "10110110" "10010010" "01101100" "01110000" "01001000" "01010000" "11111101" "11101101" "10111001" "11011010" "01011110" "00010101" "01000110" "01010111" "10100111" "10001101" "10011101" "10000100" "10010000" "11011000" "10101011" "00000000" "10001100" "10111100" "11010011" "00001010" "11110111" "11100100" "01011000" "00000101" "10111000" "10110011" "01000101" "00000110" "11010000" "00101100" "00011110" "10001111" "11001010" "00111111" "00001111" "00000010" "11000001" "10101111" "10111101" "00000011" "00000001" "00010011" "10001010" "01101011" "00111010" "10010001" "00010001" "01000001" "01001111" "01100111" "11011100" "11101010" "10010111" "11110010" "11001111" "11001110" "11110000" "10110100" "11100110" "01110011" "10010110" "10101100" "01110100" "00100010" "11100111" "10101101" "00110101" "10000101" "11100010" "11111001" "00110111" "11101000" "00011100" "01110101" "11011111" "01101110" "01000111" "11110001" "00011010" "01110001" "00011101" "00101001" "11000101" "10001001" "01101111" "10110111" "01100010" "00001110" "10101010" "00011000" "10111110" "00011011" "11111100" "01010110" "00111110" "01001011" "11000110" "11010010" "01111001" "00100000" "10011010" "11011011" "11000000" "11111110" "01111000" "11001101" "01011010" "11110100" "00011111" "11011101" "10101000" "00110011" "10001000" "00000111" "11000111" "00110001" "10110001" "00010010" "00010000" "01011001" "00100111" "10000000" "11101100" "01011111" "01100000" "01010001" "01111111" "10101001" "00011001" "10110101" "01001010" "00001101" "00101101" "11100101" "01111010" "10011111" "10010011" "11001001" "10011100" "11101111" "10100000" "11100000" "00111011" "01001101" "10101110" "00101010" "11110101" "10110000" "11001000" "11101011" "10111011" "00111100" "10000011" "01010011" "10011001" "01100001" "00010111" "00101011" "00000100" "01111110" "10111010" "01110111" "11010110" "00100110" "11100001" "01101001" "00010100" "01100011" "01010101" "00100001" "00001100" "01111101" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 0.594
set ClkPeriod 4
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 16 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 16 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# clear list
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_begin
    cg_default_interface_gen_bundle_begin
    AESL_LIB_XILADAPTER::native_axis_begin
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 75 \
    name p_read \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read \
    op interface \
    ports { p_read { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 76 \
    name p_read1 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read1 \
    op interface \
    ports { p_read1 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 77 \
    name p_read2 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read2 \
    op interface \
    ports { p_read2 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 78 \
    name p_read3 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read3 \
    op interface \
    ports { p_read3 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 79 \
    name p_read4 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read4 \
    op interface \
    ports { p_read4 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 80 \
    name p_read5 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read5 \
    op interface \
    ports { p_read5 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 81 \
    name p_read6 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read6 \
    op interface \
    ports { p_read6 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 82 \
    name p_read7 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read7 \
    op interface \
    ports { p_read7 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 83 \
    name p_read8 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read8 \
    op interface \
    ports { p_read8 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 84 \
    name p_read9 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read9 \
    op interface \
    ports { p_read9 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 85 \
    name p_read10 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read10 \
    op interface \
    ports { p_read10 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 86 \
    name p_read11 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read11 \
    op interface \
    ports { p_read11 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 87 \
    name p_read12 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read12 \
    op interface \
    ports { p_read12 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 88 \
    name p_read13 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read13 \
    op interface \
    ports { p_read13 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 89 \
    name p_read14 \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_p_read14 \
    op interface \
    ports { p_read14 { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 90 \
    name ciphertext \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_ciphertext \
    op interface \
    ports { ciphertext { I 128 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -1 \
    name ap_ctrl \
    type ap_ctrl \
    reset_level 1 \
    sync_rst true \
    corename ap_ctrl \
    op interface \
    ports { ap_start { I 1 bit } ap_ready { O 1 bit } ap_done { O 1 bit } ap_idle { O 1 bit } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -2 \
    name ap_return \
    type ap_return \
    reset_level 1 \
    sync_rst true \
    corename ap_return \
    op interface \
    ports { ap_return { O 128 vector } } \
} "
}


# Adapter definition:
set PortName ap_clk
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_clock] == "cg_default_interface_gen_clock"} {
eval "cg_default_interface_gen_clock { \
    id -3 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_clk \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_rst
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_reset] == "cg_default_interface_gen_reset"} {
eval "cg_default_interface_gen_reset { \
    id -4 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_rst \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-114\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_ce
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_ce] == "cg_default_interface_gen_ce"} {
eval "cg_default_interface_gen_ce { \
    id -5 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_ce \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}



# merge
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_end
    cg_default_interface_gen_bundle_end
    AESL_LIB_XILADAPTER::native_axis_end
}


