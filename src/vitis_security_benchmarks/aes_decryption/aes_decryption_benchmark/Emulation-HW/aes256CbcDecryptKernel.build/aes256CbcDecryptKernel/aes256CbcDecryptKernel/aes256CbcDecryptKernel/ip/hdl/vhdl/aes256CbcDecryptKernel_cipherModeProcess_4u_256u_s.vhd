-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256CbcDecryptKernel_cipherModeProcess_4u_256u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    taskNumStrm_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    taskNumStrm_empty_n : IN STD_LOGIC;
    taskNumStrm_read : OUT STD_LOGIC;
    IVStrm_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    IVStrm_V_V_empty_n : IN STD_LOGIC;
    IVStrm_V_V_read : OUT STD_LOGIC;
    IVStrm_1_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    IVStrm_1_V_V_empty_n : IN STD_LOGIC;
    IVStrm_1_V_V_read : OUT STD_LOGIC;
    IVStrm_2_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    IVStrm_2_V_V_empty_n : IN STD_LOGIC;
    IVStrm_2_V_V_read : OUT STD_LOGIC;
    IVStrm_3_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    IVStrm_3_V_V_empty_n : IN STD_LOGIC;
    IVStrm_3_V_V_read : OUT STD_LOGIC;
    cipherkeyStrm_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    cipherkeyStrm_V_V_empty_n : IN STD_LOGIC;
    cipherkeyStrm_V_V_read : OUT STD_LOGIC;
    cipherkeyStrm_1_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    cipherkeyStrm_1_V_V_empty_n : IN STD_LOGIC;
    cipherkeyStrm_1_V_V_read : OUT STD_LOGIC;
    cipherkeyStrm_2_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    cipherkeyStrm_2_V_V_empty_n : IN STD_LOGIC;
    cipherkeyStrm_2_V_V_read : OUT STD_LOGIC;
    cipherkeyStrm_3_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    cipherkeyStrm_3_V_V_empty_n : IN STD_LOGIC;
    cipherkeyStrm_3_V_V_read : OUT STD_LOGIC;
    textInStrm_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    textInStrm_V_V_empty_n : IN STD_LOGIC;
    textInStrm_V_V_read : OUT STD_LOGIC;
    textInStrm_1_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    textInStrm_1_V_V_empty_n : IN STD_LOGIC;
    textInStrm_1_V_V_read : OUT STD_LOGIC;
    textInStrm_2_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    textInStrm_2_V_V_empty_n : IN STD_LOGIC;
    textInStrm_2_V_V_read : OUT STD_LOGIC;
    textInStrm_3_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    textInStrm_3_V_V_empty_n : IN STD_LOGIC;
    textInStrm_3_V_V_read : OUT STD_LOGIC;
    endTextInStrm_V_dout : IN STD_LOGIC;
    endTextInStrm_V_empty_n : IN STD_LOGIC;
    endTextInStrm_V_read : OUT STD_LOGIC;
    endTextInStrm_1_V_dout : IN STD_LOGIC;
    endTextInStrm_1_V_empty_n : IN STD_LOGIC;
    endTextInStrm_1_V_read : OUT STD_LOGIC;
    endTextInStrm_2_V_dout : IN STD_LOGIC;
    endTextInStrm_2_V_empty_n : IN STD_LOGIC;
    endTextInStrm_2_V_read : OUT STD_LOGIC;
    endTextInStrm_3_V_dout : IN STD_LOGIC;
    endTextInStrm_3_V_empty_n : IN STD_LOGIC;
    endTextInStrm_3_V_read : OUT STD_LOGIC;
    textOutStrm_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    textOutStrm_V_V_full_n : IN STD_LOGIC;
    textOutStrm_V_V_write : OUT STD_LOGIC;
    textOutStrm_1_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    textOutStrm_1_V_V_full_n : IN STD_LOGIC;
    textOutStrm_1_V_V_write : OUT STD_LOGIC;
    textOutStrm_2_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    textOutStrm_2_V_V_full_n : IN STD_LOGIC;
    textOutStrm_2_V_V_write : OUT STD_LOGIC;
    textOutStrm_3_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    textOutStrm_3_V_V_full_n : IN STD_LOGIC;
    textOutStrm_3_V_V_write : OUT STD_LOGIC;
    endTextOutStrm_V_din : OUT STD_LOGIC;
    endTextOutStrm_V_full_n : IN STD_LOGIC;
    endTextOutStrm_V_write : OUT STD_LOGIC;
    endTextOutStrm_1_V_din : OUT STD_LOGIC;
    endTextOutStrm_1_V_full_n : IN STD_LOGIC;
    endTextOutStrm_1_V_write : OUT STD_LOGIC;
    endTextOutStrm_2_V_din : OUT STD_LOGIC;
    endTextOutStrm_2_V_full_n : IN STD_LOGIC;
    endTextOutStrm_2_V_write : OUT STD_LOGIC;
    endTextOutStrm_3_V_din : OUT STD_LOGIC;
    endTextOutStrm_3_V_full_n : IN STD_LOGIC;
    endTextOutStrm_3_V_write : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of aes256CbcDecryptKernel_cipherModeProcess_4u_256u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal taskNumStrm_blk_n : STD_LOGIC;
    signal tmp_reg_166 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm1_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm2_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm3_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm4_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm5_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm6_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm7_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm8_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm9_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm10_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm11_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm12_read : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm_write : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm13_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm13_write : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm14_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm14_write : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm15_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm15_write : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm_din : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm_write : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm16_din : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm16_write : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm17_din : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm17_write : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm18_din : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm18_write : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_ap_start : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_ap_done : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_ap_idle : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_ap_continue : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_ap_ext_blocking_n : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_ap_str_blocking_n : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_ap_int_blocking_n : STD_LOGIC;
    signal grp_cipherModeParallel_4u_256u_s_fu_98_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call33 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready : STD_LOGIC;
    signal ap_sync_grp_cipherModeParallel_4u_256u_s_fu_98_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_cipherModeParallel_4u_256u_s_fu_98_ap_done : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_wait_0 : STD_LOGIC;
    signal ap_sub_ext_blocking_0 : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_sub_str_blocking_0 : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_sub_int_blocking_0 : STD_LOGIC;

    component aes256CbcDecryptKernel_cipherModeParallel_4u_256u_s IS
    port (
        taskNum : IN STD_LOGIC_VECTOR (63 downto 0);
        IVStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        IVStrm_empty_n : IN STD_LOGIC;
        IVStrm_read : OUT STD_LOGIC;
        IVStrm1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        IVStrm1_empty_n : IN STD_LOGIC;
        IVStrm1_read : OUT STD_LOGIC;
        IVStrm2_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        IVStrm2_empty_n : IN STD_LOGIC;
        IVStrm2_read : OUT STD_LOGIC;
        IVStrm3_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        IVStrm3_empty_n : IN STD_LOGIC;
        IVStrm3_read : OUT STD_LOGIC;
        cipherkeyStrm_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        cipherkeyStrm_empty_n : IN STD_LOGIC;
        cipherkeyStrm_read : OUT STD_LOGIC;
        cipherkeyStrm4_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        cipherkeyStrm4_empty_n : IN STD_LOGIC;
        cipherkeyStrm4_read : OUT STD_LOGIC;
        cipherkeyStrm5_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        cipherkeyStrm5_empty_n : IN STD_LOGIC;
        cipherkeyStrm5_read : OUT STD_LOGIC;
        cipherkeyStrm6_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        cipherkeyStrm6_empty_n : IN STD_LOGIC;
        cipherkeyStrm6_read : OUT STD_LOGIC;
        textInStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        textInStrm_empty_n : IN STD_LOGIC;
        textInStrm_read : OUT STD_LOGIC;
        textInStrm7_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        textInStrm7_empty_n : IN STD_LOGIC;
        textInStrm7_read : OUT STD_LOGIC;
        textInStrm8_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        textInStrm8_empty_n : IN STD_LOGIC;
        textInStrm8_read : OUT STD_LOGIC;
        textInStrm9_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        textInStrm9_empty_n : IN STD_LOGIC;
        textInStrm9_read : OUT STD_LOGIC;
        endTextInStrm_dout : IN STD_LOGIC;
        endTextInStrm_empty_n : IN STD_LOGIC;
        endTextInStrm_read : OUT STD_LOGIC;
        endTextInStrm10_dout : IN STD_LOGIC;
        endTextInStrm10_empty_n : IN STD_LOGIC;
        endTextInStrm10_read : OUT STD_LOGIC;
        endTextInStrm11_dout : IN STD_LOGIC;
        endTextInStrm11_empty_n : IN STD_LOGIC;
        endTextInStrm11_read : OUT STD_LOGIC;
        endTextInStrm12_dout : IN STD_LOGIC;
        endTextInStrm12_empty_n : IN STD_LOGIC;
        endTextInStrm12_read : OUT STD_LOGIC;
        textOutStrm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        textOutStrm_full_n : IN STD_LOGIC;
        textOutStrm_write : OUT STD_LOGIC;
        textOutStrm13_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        textOutStrm13_full_n : IN STD_LOGIC;
        textOutStrm13_write : OUT STD_LOGIC;
        textOutStrm14_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        textOutStrm14_full_n : IN STD_LOGIC;
        textOutStrm14_write : OUT STD_LOGIC;
        textOutStrm15_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        textOutStrm15_full_n : IN STD_LOGIC;
        textOutStrm15_write : OUT STD_LOGIC;
        endTextOutStrm_din : OUT STD_LOGIC;
        endTextOutStrm_full_n : IN STD_LOGIC;
        endTextOutStrm_write : OUT STD_LOGIC;
        endTextOutStrm16_din : OUT STD_LOGIC;
        endTextOutStrm16_full_n : IN STD_LOGIC;
        endTextOutStrm16_write : OUT STD_LOGIC;
        endTextOutStrm17_din : OUT STD_LOGIC;
        endTextOutStrm17_full_n : IN STD_LOGIC;
        endTextOutStrm17_write : OUT STD_LOGIC;
        endTextOutStrm18_din : OUT STD_LOGIC;
        endTextOutStrm18_full_n : IN STD_LOGIC;
        endTextOutStrm18_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        taskNum_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;



begin
    grp_cipherModeParallel_4u_256u_s_fu_98 : component aes256CbcDecryptKernel_cipherModeParallel_4u_256u_s
    port map (
        taskNum => tmp_reg_166,
        IVStrm_dout => IVStrm_V_V_dout,
        IVStrm_empty_n => IVStrm_V_V_empty_n,
        IVStrm_read => grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm_read,
        IVStrm1_dout => IVStrm_1_V_V_dout,
        IVStrm1_empty_n => IVStrm_1_V_V_empty_n,
        IVStrm1_read => grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm1_read,
        IVStrm2_dout => IVStrm_2_V_V_dout,
        IVStrm2_empty_n => IVStrm_2_V_V_empty_n,
        IVStrm2_read => grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm2_read,
        IVStrm3_dout => IVStrm_3_V_V_dout,
        IVStrm3_empty_n => IVStrm_3_V_V_empty_n,
        IVStrm3_read => grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm3_read,
        cipherkeyStrm_dout => cipherkeyStrm_V_V_dout,
        cipherkeyStrm_empty_n => cipherkeyStrm_V_V_empty_n,
        cipherkeyStrm_read => grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm_read,
        cipherkeyStrm4_dout => cipherkeyStrm_1_V_V_dout,
        cipherkeyStrm4_empty_n => cipherkeyStrm_1_V_V_empty_n,
        cipherkeyStrm4_read => grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm4_read,
        cipherkeyStrm5_dout => cipherkeyStrm_2_V_V_dout,
        cipherkeyStrm5_empty_n => cipherkeyStrm_2_V_V_empty_n,
        cipherkeyStrm5_read => grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm5_read,
        cipherkeyStrm6_dout => cipherkeyStrm_3_V_V_dout,
        cipherkeyStrm6_empty_n => cipherkeyStrm_3_V_V_empty_n,
        cipherkeyStrm6_read => grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm6_read,
        textInStrm_dout => textInStrm_V_V_dout,
        textInStrm_empty_n => textInStrm_V_V_empty_n,
        textInStrm_read => grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm_read,
        textInStrm7_dout => textInStrm_1_V_V_dout,
        textInStrm7_empty_n => textInStrm_1_V_V_empty_n,
        textInStrm7_read => grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm7_read,
        textInStrm8_dout => textInStrm_2_V_V_dout,
        textInStrm8_empty_n => textInStrm_2_V_V_empty_n,
        textInStrm8_read => grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm8_read,
        textInStrm9_dout => textInStrm_3_V_V_dout,
        textInStrm9_empty_n => textInStrm_3_V_V_empty_n,
        textInStrm9_read => grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm9_read,
        endTextInStrm_dout => endTextInStrm_V_dout,
        endTextInStrm_empty_n => endTextInStrm_V_empty_n,
        endTextInStrm_read => grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm_read,
        endTextInStrm10_dout => endTextInStrm_1_V_dout,
        endTextInStrm10_empty_n => endTextInStrm_1_V_empty_n,
        endTextInStrm10_read => grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm10_read,
        endTextInStrm11_dout => endTextInStrm_2_V_dout,
        endTextInStrm11_empty_n => endTextInStrm_2_V_empty_n,
        endTextInStrm11_read => grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm11_read,
        endTextInStrm12_dout => endTextInStrm_3_V_dout,
        endTextInStrm12_empty_n => endTextInStrm_3_V_empty_n,
        endTextInStrm12_read => grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm12_read,
        textOutStrm_din => grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm_din,
        textOutStrm_full_n => textOutStrm_V_V_full_n,
        textOutStrm_write => grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm_write,
        textOutStrm13_din => grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm13_din,
        textOutStrm13_full_n => textOutStrm_1_V_V_full_n,
        textOutStrm13_write => grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm13_write,
        textOutStrm14_din => grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm14_din,
        textOutStrm14_full_n => textOutStrm_2_V_V_full_n,
        textOutStrm14_write => grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm14_write,
        textOutStrm15_din => grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm15_din,
        textOutStrm15_full_n => textOutStrm_3_V_V_full_n,
        textOutStrm15_write => grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm15_write,
        endTextOutStrm_din => grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm_din,
        endTextOutStrm_full_n => endTextOutStrm_V_full_n,
        endTextOutStrm_write => grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm_write,
        endTextOutStrm16_din => grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm16_din,
        endTextOutStrm16_full_n => endTextOutStrm_1_V_full_n,
        endTextOutStrm16_write => grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm16_write,
        endTextOutStrm17_din => grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm17_din,
        endTextOutStrm17_full_n => endTextOutStrm_2_V_full_n,
        endTextOutStrm17_write => grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm17_write,
        endTextOutStrm18_din => grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm18_din,
        endTextOutStrm18_full_n => endTextOutStrm_3_V_full_n,
        endTextOutStrm18_write => grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm18_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        taskNum_ap_vld => ap_const_logic_1,
        ap_start => grp_cipherModeParallel_4u_256u_s_fu_98_ap_start,
        ap_done => grp_cipherModeParallel_4u_256u_s_fu_98_ap_done,
        ap_ready => grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready,
        ap_idle => grp_cipherModeParallel_4u_256u_s_fu_98_ap_idle,
        ap_continue => grp_cipherModeParallel_4u_256u_s_fu_98_ap_continue,
        ap_ext_blocking_n => grp_cipherModeParallel_4u_256u_s_fu_98_ap_ext_blocking_n,
        ap_str_blocking_n => grp_cipherModeParallel_4u_256u_s_fu_98_ap_str_blocking_n,
        ap_int_blocking_n => grp_cipherModeParallel_4u_256u_s_fu_98_ap_int_blocking_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_cipherModeParallel_4u_256u_s_fu_98_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_cipherModeParallel_4u_256u_s_fu_98_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_cipherModeParallel_4u_256u_s_fu_98_ap_done <= ap_const_logic_0;
                elsif ((grp_cipherModeParallel_4u_256u_s_fu_98_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_cipherModeParallel_4u_256u_s_fu_98_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready <= ap_const_logic_0;
                elsif ((grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_cipherModeParallel_4u_256u_s_fu_98_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cipherModeParallel_4u_256u_s_fu_98_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((ap_start = ap_const_logic_0) or (taskNumStrm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_cipherModeParallel_4u_256u_s_fu_98_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready = ap_const_logic_1)) then 
                    grp_cipherModeParallel_4u_256u_s_fu_98_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (taskNumStrm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_166 <= taskNumStrm_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, taskNumStrm_empty_n, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (taskNumStrm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    IVStrm_1_V_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm1_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IVStrm_1_V_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm1_read;
        else 
            IVStrm_1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    IVStrm_2_V_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm2_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IVStrm_2_V_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm2_read;
        else 
            IVStrm_2_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    IVStrm_3_V_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm3_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IVStrm_3_V_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm3_read;
        else 
            IVStrm_3_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    IVStrm_V_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IVStrm_V_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_IVStrm_read;
        else 
            IVStrm_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, taskNumStrm_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (taskNumStrm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call33_assign_proc : process(ap_start, ap_done_reg, taskNumStrm_empty_n)
    begin
                ap_block_state1_ignore_call33 <= ((ap_start = ap_const_logic_0) or (taskNumStrm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready, ap_sync_grp_cipherModeParallel_4u_256u_s_fu_98_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready and ap_sync_grp_cipherModeParallel_4u_256u_s_fu_98_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_const_logic_1);

    ap_ext_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_ext_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_ext_blocking_0) = ap_const_logic_1)) then 
            ap_ext_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_ext_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (taskNumStrm_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);

    ap_int_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_int_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_int_blocking_0) = ap_const_logic_1)) then 
            ap_int_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_int_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_const_logic_1);

    ap_str_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_str_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_str_blocking_0) = ap_const_logic_1)) then 
            ap_str_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_str_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_sub_ext_blocking_0_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_ap_ext_blocking_n)
    begin
        if ((grp_cipherModeParallel_4u_256u_s_fu_98_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_0_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_ap_int_blocking_n)
    begin
        if ((grp_cipherModeParallel_4u_256u_s_fu_98_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_0_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_ap_str_blocking_n)
    begin
        if ((grp_cipherModeParallel_4u_256u_s_fu_98_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_cipherModeParallel_4u_256u_s_fu_98_ap_done <= (grp_cipherModeParallel_4u_256u_s_fu_98_ap_done or ap_sync_reg_grp_cipherModeParallel_4u_256u_s_fu_98_ap_done);
    ap_sync_grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready <= (grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready or ap_sync_reg_grp_cipherModeParallel_4u_256u_s_fu_98_ap_ready);

    ap_wait_0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state2 = ap_CS_fsm)) then 
            ap_wait_0 <= ap_const_logic_1;
        else 
            ap_wait_0 <= ap_const_logic_0;
        end if; 
    end process;


    cipherkeyStrm_1_V_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm4_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cipherkeyStrm_1_V_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm4_read;
        else 
            cipherkeyStrm_1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    cipherkeyStrm_2_V_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm5_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cipherkeyStrm_2_V_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm5_read;
        else 
            cipherkeyStrm_2_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    cipherkeyStrm_3_V_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm6_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cipherkeyStrm_3_V_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm6_read;
        else 
            cipherkeyStrm_3_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    cipherkeyStrm_V_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cipherkeyStrm_V_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_cipherkeyStrm_read;
        else 
            cipherkeyStrm_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    endTextInStrm_1_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm10_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            endTextInStrm_1_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm10_read;
        else 
            endTextInStrm_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    endTextInStrm_2_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm11_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            endTextInStrm_2_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm11_read;
        else 
            endTextInStrm_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    endTextInStrm_3_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm12_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            endTextInStrm_3_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm12_read;
        else 
            endTextInStrm_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    endTextInStrm_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            endTextInStrm_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_endTextInStrm_read;
        else 
            endTextInStrm_V_read <= ap_const_logic_0;
        end if; 
    end process;

    endTextOutStrm_1_V_din <= grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm16_din;

    endTextOutStrm_1_V_write_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm16_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            endTextOutStrm_1_V_write <= grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm16_write;
        else 
            endTextOutStrm_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    endTextOutStrm_2_V_din <= grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm17_din;

    endTextOutStrm_2_V_write_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm17_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            endTextOutStrm_2_V_write <= grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm17_write;
        else 
            endTextOutStrm_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    endTextOutStrm_3_V_din <= grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm18_din;

    endTextOutStrm_3_V_write_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm18_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            endTextOutStrm_3_V_write <= grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm18_write;
        else 
            endTextOutStrm_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    endTextOutStrm_V_din <= grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm_din;

    endTextOutStrm_V_write_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            endTextOutStrm_V_write <= grp_cipherModeParallel_4u_256u_s_fu_98_endTextOutStrm_write;
        else 
            endTextOutStrm_V_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_cipherModeParallel_4u_256u_s_fu_98_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_cipherModeParallel_4u_256u_s_fu_98_ap_continue <= ap_const_logic_1;
        else 
            grp_cipherModeParallel_4u_256u_s_fu_98_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_cipherModeParallel_4u_256u_s_fu_98_ap_start <= grp_cipherModeParallel_4u_256u_s_fu_98_ap_start_reg;

    taskNumStrm_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, taskNumStrm_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            taskNumStrm_blk_n <= taskNumStrm_empty_n;
        else 
            taskNumStrm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    taskNumStrm_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, taskNumStrm_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (taskNumStrm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            taskNumStrm_read <= ap_const_logic_1;
        else 
            taskNumStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    textInStrm_1_V_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm7_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            textInStrm_1_V_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm7_read;
        else 
            textInStrm_1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    textInStrm_2_V_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm8_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            textInStrm_2_V_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm8_read;
        else 
            textInStrm_2_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    textInStrm_3_V_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm9_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            textInStrm_3_V_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm9_read;
        else 
            textInStrm_3_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    textInStrm_V_V_read_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            textInStrm_V_V_read <= grp_cipherModeParallel_4u_256u_s_fu_98_textInStrm_read;
        else 
            textInStrm_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    textOutStrm_1_V_V_din <= grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm13_din;

    textOutStrm_1_V_V_write_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm13_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            textOutStrm_1_V_V_write <= grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm13_write;
        else 
            textOutStrm_1_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    textOutStrm_2_V_V_din <= grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm14_din;

    textOutStrm_2_V_V_write_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm14_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            textOutStrm_2_V_V_write <= grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm14_write;
        else 
            textOutStrm_2_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    textOutStrm_3_V_V_din <= grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm15_din;

    textOutStrm_3_V_V_write_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm15_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            textOutStrm_3_V_V_write <= grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm15_write;
        else 
            textOutStrm_3_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    textOutStrm_V_V_din <= grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm_din;

    textOutStrm_V_V_write_assign_proc : process(grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            textOutStrm_V_V_write <= grp_cipherModeParallel_4u_256u_s_fu_98_textOutStrm_write;
        else 
            textOutStrm_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
