// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes256CbcDecryptKernel_readBlock_128u_4u_256u_107 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        outputData,
        outputData_out_din,
        outputData_out_full_n,
        outputData_out_write,
        m_axi_gmem0_0_AWVALID,
        m_axi_gmem0_0_AWREADY,
        m_axi_gmem0_0_AWADDR,
        m_axi_gmem0_0_AWID,
        m_axi_gmem0_0_AWLEN,
        m_axi_gmem0_0_AWSIZE,
        m_axi_gmem0_0_AWBURST,
        m_axi_gmem0_0_AWLOCK,
        m_axi_gmem0_0_AWCACHE,
        m_axi_gmem0_0_AWPROT,
        m_axi_gmem0_0_AWQOS,
        m_axi_gmem0_0_AWREGION,
        m_axi_gmem0_0_AWUSER,
        m_axi_gmem0_0_WVALID,
        m_axi_gmem0_0_WREADY,
        m_axi_gmem0_0_WDATA,
        m_axi_gmem0_0_WSTRB,
        m_axi_gmem0_0_WLAST,
        m_axi_gmem0_0_WID,
        m_axi_gmem0_0_WUSER,
        m_axi_gmem0_0_ARVALID,
        m_axi_gmem0_0_ARREADY,
        m_axi_gmem0_0_ARADDR,
        m_axi_gmem0_0_ARID,
        m_axi_gmem0_0_ARLEN,
        m_axi_gmem0_0_ARSIZE,
        m_axi_gmem0_0_ARBURST,
        m_axi_gmem0_0_ARLOCK,
        m_axi_gmem0_0_ARCACHE,
        m_axi_gmem0_0_ARPROT,
        m_axi_gmem0_0_ARQOS,
        m_axi_gmem0_0_ARREGION,
        m_axi_gmem0_0_ARUSER,
        m_axi_gmem0_0_RVALID,
        m_axi_gmem0_0_RREADY,
        m_axi_gmem0_0_RDATA,
        m_axi_gmem0_0_RLAST,
        m_axi_gmem0_0_RID,
        m_axi_gmem0_0_RUSER,
        m_axi_gmem0_0_RRESP,
        m_axi_gmem0_0_BVALID,
        m_axi_gmem0_0_BREADY,
        m_axi_gmem0_0_BRESP,
        m_axi_gmem0_0_BID,
        m_axi_gmem0_0_BUSER,
        textBlkStrm_i_i_din,
        textBlkStrm_i_i_full_n,
        textBlkStrm_i_i_write,
        msgNumStrm_din,
        msgNumStrm_full_n,
        msgNumStrm_write,
        msgNumStrm1_i_i_din,
        msgNumStrm1_i_i_full_n,
        msgNumStrm1_i_i_write,
        taskNumStrm_din,
        taskNumStrm_full_n,
        taskNumStrm_write,
        taskNumStrm1_i_i_din,
        taskNumStrm1_i_i_full_n,
        taskNumStrm1_i_i_write,
        taskNumStrm2_din,
        taskNumStrm2_full_n,
        taskNumStrm2_write,
        IVInStrm_i_i_din,
        IVInStrm_i_i_full_n,
        IVInStrm_i_i_write,
        cipherkeyInStrm_i_i_din,
        cipherkeyInStrm_i_i_full_n,
        cipherkeyInStrm_i_i_write,
        ptr,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 150'd1;
parameter    ap_ST_fsm_state2 = 150'd2;
parameter    ap_ST_fsm_state3 = 150'd4;
parameter    ap_ST_fsm_state4 = 150'd8;
parameter    ap_ST_fsm_state5 = 150'd16;
parameter    ap_ST_fsm_state6 = 150'd32;
parameter    ap_ST_fsm_state7 = 150'd64;
parameter    ap_ST_fsm_state8 = 150'd128;
parameter    ap_ST_fsm_state9 = 150'd256;
parameter    ap_ST_fsm_state10 = 150'd512;
parameter    ap_ST_fsm_state11 = 150'd1024;
parameter    ap_ST_fsm_state12 = 150'd2048;
parameter    ap_ST_fsm_state13 = 150'd4096;
parameter    ap_ST_fsm_state14 = 150'd8192;
parameter    ap_ST_fsm_state15 = 150'd16384;
parameter    ap_ST_fsm_state16 = 150'd32768;
parameter    ap_ST_fsm_state17 = 150'd65536;
parameter    ap_ST_fsm_state18 = 150'd131072;
parameter    ap_ST_fsm_state19 = 150'd262144;
parameter    ap_ST_fsm_state20 = 150'd524288;
parameter    ap_ST_fsm_state21 = 150'd1048576;
parameter    ap_ST_fsm_state22 = 150'd2097152;
parameter    ap_ST_fsm_state23 = 150'd4194304;
parameter    ap_ST_fsm_state24 = 150'd8388608;
parameter    ap_ST_fsm_state25 = 150'd16777216;
parameter    ap_ST_fsm_state26 = 150'd33554432;
parameter    ap_ST_fsm_state27 = 150'd67108864;
parameter    ap_ST_fsm_state28 = 150'd134217728;
parameter    ap_ST_fsm_state29 = 150'd268435456;
parameter    ap_ST_fsm_state30 = 150'd536870912;
parameter    ap_ST_fsm_state31 = 150'd1073741824;
parameter    ap_ST_fsm_state32 = 150'd2147483648;
parameter    ap_ST_fsm_state33 = 150'd4294967296;
parameter    ap_ST_fsm_state34 = 150'd8589934592;
parameter    ap_ST_fsm_state35 = 150'd17179869184;
parameter    ap_ST_fsm_state36 = 150'd34359738368;
parameter    ap_ST_fsm_state37 = 150'd68719476736;
parameter    ap_ST_fsm_state38 = 150'd137438953472;
parameter    ap_ST_fsm_state39 = 150'd274877906944;
parameter    ap_ST_fsm_state40 = 150'd549755813888;
parameter    ap_ST_fsm_state41 = 150'd1099511627776;
parameter    ap_ST_fsm_state42 = 150'd2199023255552;
parameter    ap_ST_fsm_state43 = 150'd4398046511104;
parameter    ap_ST_fsm_state44 = 150'd8796093022208;
parameter    ap_ST_fsm_state45 = 150'd17592186044416;
parameter    ap_ST_fsm_state46 = 150'd35184372088832;
parameter    ap_ST_fsm_state47 = 150'd70368744177664;
parameter    ap_ST_fsm_state48 = 150'd140737488355328;
parameter    ap_ST_fsm_state49 = 150'd281474976710656;
parameter    ap_ST_fsm_state50 = 150'd562949953421312;
parameter    ap_ST_fsm_state51 = 150'd1125899906842624;
parameter    ap_ST_fsm_state52 = 150'd2251799813685248;
parameter    ap_ST_fsm_state53 = 150'd4503599627370496;
parameter    ap_ST_fsm_state54 = 150'd9007199254740992;
parameter    ap_ST_fsm_state55 = 150'd18014398509481984;
parameter    ap_ST_fsm_state56 = 150'd36028797018963968;
parameter    ap_ST_fsm_state57 = 150'd72057594037927936;
parameter    ap_ST_fsm_state58 = 150'd144115188075855872;
parameter    ap_ST_fsm_state59 = 150'd288230376151711744;
parameter    ap_ST_fsm_state60 = 150'd576460752303423488;
parameter    ap_ST_fsm_state61 = 150'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 150'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 150'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 150'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 150'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 150'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 150'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 150'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 150'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 150'd590295810358705651712;
parameter    ap_ST_fsm_pp0_stage0 = 150'd1180591620717411303424;
parameter    ap_ST_fsm_state74 = 150'd2361183241434822606848;
parameter    ap_ST_fsm_state75 = 150'd4722366482869645213696;
parameter    ap_ST_fsm_state76 = 150'd9444732965739290427392;
parameter    ap_ST_fsm_state77 = 150'd18889465931478580854784;
parameter    ap_ST_fsm_state78 = 150'd37778931862957161709568;
parameter    ap_ST_fsm_state79 = 150'd75557863725914323419136;
parameter    ap_ST_fsm_state80 = 150'd151115727451828646838272;
parameter    ap_ST_fsm_state81 = 150'd302231454903657293676544;
parameter    ap_ST_fsm_state82 = 150'd604462909807314587353088;
parameter    ap_ST_fsm_state83 = 150'd1208925819614629174706176;
parameter    ap_ST_fsm_state84 = 150'd2417851639229258349412352;
parameter    ap_ST_fsm_state85 = 150'd4835703278458516698824704;
parameter    ap_ST_fsm_state86 = 150'd9671406556917033397649408;
parameter    ap_ST_fsm_state87 = 150'd19342813113834066795298816;
parameter    ap_ST_fsm_state88 = 150'd38685626227668133590597632;
parameter    ap_ST_fsm_state89 = 150'd77371252455336267181195264;
parameter    ap_ST_fsm_state90 = 150'd154742504910672534362390528;
parameter    ap_ST_fsm_state91 = 150'd309485009821345068724781056;
parameter    ap_ST_fsm_state92 = 150'd618970019642690137449562112;
parameter    ap_ST_fsm_state93 = 150'd1237940039285380274899124224;
parameter    ap_ST_fsm_state94 = 150'd2475880078570760549798248448;
parameter    ap_ST_fsm_state95 = 150'd4951760157141521099596496896;
parameter    ap_ST_fsm_state96 = 150'd9903520314283042199192993792;
parameter    ap_ST_fsm_state97 = 150'd19807040628566084398385987584;
parameter    ap_ST_fsm_state98 = 150'd39614081257132168796771975168;
parameter    ap_ST_fsm_state99 = 150'd79228162514264337593543950336;
parameter    ap_ST_fsm_state100 = 150'd158456325028528675187087900672;
parameter    ap_ST_fsm_state101 = 150'd316912650057057350374175801344;
parameter    ap_ST_fsm_state102 = 150'd633825300114114700748351602688;
parameter    ap_ST_fsm_state103 = 150'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state104 = 150'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state105 = 150'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state106 = 150'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state107 = 150'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state108 = 150'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state109 = 150'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state110 = 150'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state111 = 150'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state112 = 150'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state113 = 150'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state114 = 150'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state115 = 150'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state116 = 150'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state117 = 150'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state118 = 150'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state119 = 150'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state120 = 150'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state121 = 150'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state122 = 150'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state123 = 150'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state124 = 150'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state125 = 150'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state126 = 150'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state127 = 150'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state128 = 150'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state129 = 150'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state130 = 150'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state131 = 150'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state132 = 150'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state133 = 150'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state134 = 150'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state135 = 150'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state136 = 150'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state137 = 150'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state138 = 150'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state139 = 150'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state140 = 150'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state141 = 150'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state142 = 150'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state143 = 150'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state144 = 150'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state145 = 150'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state146 = 150'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state147 = 150'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state148 = 150'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state149 = 150'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state150 = 150'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_pp1_stage0 = 150'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state154 = 150'd713623846352979940529142984724747568191373312;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] outputData;
output  [63:0] outputData_out_din;
input   outputData_out_full_n;
output   outputData_out_write;
output   m_axi_gmem0_0_AWVALID;
input   m_axi_gmem0_0_AWREADY;
output  [63:0] m_axi_gmem0_0_AWADDR;
output  [0:0] m_axi_gmem0_0_AWID;
output  [31:0] m_axi_gmem0_0_AWLEN;
output  [2:0] m_axi_gmem0_0_AWSIZE;
output  [1:0] m_axi_gmem0_0_AWBURST;
output  [1:0] m_axi_gmem0_0_AWLOCK;
output  [3:0] m_axi_gmem0_0_AWCACHE;
output  [2:0] m_axi_gmem0_0_AWPROT;
output  [3:0] m_axi_gmem0_0_AWQOS;
output  [3:0] m_axi_gmem0_0_AWREGION;
output  [0:0] m_axi_gmem0_0_AWUSER;
output   m_axi_gmem0_0_WVALID;
input   m_axi_gmem0_0_WREADY;
output  [511:0] m_axi_gmem0_0_WDATA;
output  [63:0] m_axi_gmem0_0_WSTRB;
output   m_axi_gmem0_0_WLAST;
output  [0:0] m_axi_gmem0_0_WID;
output  [0:0] m_axi_gmem0_0_WUSER;
output   m_axi_gmem0_0_ARVALID;
input   m_axi_gmem0_0_ARREADY;
output  [63:0] m_axi_gmem0_0_ARADDR;
output  [0:0] m_axi_gmem0_0_ARID;
output  [31:0] m_axi_gmem0_0_ARLEN;
output  [2:0] m_axi_gmem0_0_ARSIZE;
output  [1:0] m_axi_gmem0_0_ARBURST;
output  [1:0] m_axi_gmem0_0_ARLOCK;
output  [3:0] m_axi_gmem0_0_ARCACHE;
output  [2:0] m_axi_gmem0_0_ARPROT;
output  [3:0] m_axi_gmem0_0_ARQOS;
output  [3:0] m_axi_gmem0_0_ARREGION;
output  [0:0] m_axi_gmem0_0_ARUSER;
input   m_axi_gmem0_0_RVALID;
output   m_axi_gmem0_0_RREADY;
input  [511:0] m_axi_gmem0_0_RDATA;
input   m_axi_gmem0_0_RLAST;
input  [0:0] m_axi_gmem0_0_RID;
input  [0:0] m_axi_gmem0_0_RUSER;
input  [1:0] m_axi_gmem0_0_RRESP;
input   m_axi_gmem0_0_BVALID;
output   m_axi_gmem0_0_BREADY;
input  [1:0] m_axi_gmem0_0_BRESP;
input  [0:0] m_axi_gmem0_0_BID;
input  [0:0] m_axi_gmem0_0_BUSER;
output  [511:0] textBlkStrm_i_i_din;
input   textBlkStrm_i_i_full_n;
output   textBlkStrm_i_i_write;
output  [63:0] msgNumStrm_din;
input   msgNumStrm_full_n;
output   msgNumStrm_write;
output  [63:0] msgNumStrm1_i_i_din;
input   msgNumStrm1_i_i_full_n;
output   msgNumStrm1_i_i_write;
output  [63:0] taskNumStrm_din;
input   taskNumStrm_full_n;
output   taskNumStrm_write;
output  [63:0] taskNumStrm1_i_i_din;
input   taskNumStrm1_i_i_full_n;
output   taskNumStrm1_i_i_write;
output  [63:0] taskNumStrm2_din;
input   taskNumStrm2_full_n;
output   taskNumStrm2_write;
output  [127:0] IVInStrm_i_i_din;
input   IVInStrm_i_i_full_n;
output   IVInStrm_i_i_write;
output  [255:0] cipherkeyInStrm_i_i_din;
input   cipherkeyInStrm_i_i_full_n;
output   cipherkeyInStrm_i_i_write;
input  [63:0] ptr;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg start_write;
reg outputData_out_write;
reg m_axi_gmem0_0_ARVALID;
reg[63:0] m_axi_gmem0_0_ARADDR;
reg[31:0] m_axi_gmem0_0_ARLEN;
reg m_axi_gmem0_0_RREADY;
reg textBlkStrm_i_i_write;
reg msgNumStrm_write;
reg msgNumStrm1_i_i_write;
reg taskNumStrm_write;
reg taskNumStrm1_i_i_write;
reg taskNumStrm2_write;
reg IVInStrm_i_i_write;
reg cipherkeyInStrm_i_i_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [149:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    outputData_out_blk_n;
reg    gmem0_0_blk_n_AR;
reg    gmem0_0_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln60_reg_535;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln99_1_reg_629;
reg    textBlkStrm_i_i_blk_n;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln99_1_reg_629_pp1_iter1_reg;
reg    msgNumStrm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln76_reg_544;
reg   [0:0] icmp_ln76_reg_544_pp0_iter1_reg;
reg    msgNumStrm1_i_i_blk_n;
reg    taskNumStrm_blk_n;
reg    taskNumStrm1_i_i_blk_n;
reg    taskNumStrm2_blk_n;
reg    IVInStrm_i_i_blk_n;
reg    cipherkeyInStrm_i_i_blk_n;
reg   [2:0] i_reg_239;
reg   [63:0] conv_i_i218_phi_i_reg_250;
reg   [63:0] conv_i_i203_phi_i_reg_262;
reg   [30:0] j_reg_297;
reg    ap_block_state1;
wire   [0:0] icmp_ln60_fu_329_p2;
wire    ap_block_state71_pp0_stage0_iter0;
reg    ap_block_state72_pp0_stage0_iter1;
reg    ap_block_state73_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln60_reg_535_pp0_iter1_reg;
wire   [2:0] add_ln60_fu_335_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln76_fu_345_p2;
reg   [63:0] msgNum_V_reg_548;
reg   [63:0] taskNum_V_reg_555;
reg   [127:0] IV_V_reg_563;
wire   [255:0] key_V_fu_381_p1;
reg   [255:0] key_V_reg_568;
wire    ap_CS_fsm_state74;
wire   [127:0] grp_fu_393_p2;
reg   [127:0] mul_i156_i_reg_583;
wire    ap_CS_fsm_state78;
wire   [31:0] shl_ln_fu_403_p3;
reg   [31:0] shl_ln_reg_589;
wire   [63:0] add_ln92_fu_420_p2;
reg   [63:0] add_ln92_reg_597;
wire    ap_CS_fsm_state79;
wire   [63:0] add_ln215_fu_442_p2;
reg   [63:0] add_ln215_reg_602;
wire   [0:0] icmp_ln882_fu_415_p2;
wire   [31:0] burstLen_fu_471_p3;
reg   [31:0] burstLen_reg_607;
wire   [0:0] icmp_ln99_fu_479_p2;
wire    ap_CS_fsm_state80;
reg   [57:0] trunc_ln3_reg_618;
wire   [0:0] icmp_ln99_1_fu_507_p2;
wire    ap_block_state151_pp1_stage0_iter0;
reg    ap_block_state152_pp1_stage0_iter1;
reg    ap_block_state153_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [30:0] add_ln99_fu_512_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [511:0] t_reg_638;
wire   [63:0] add_ln695_fu_518_p2;
wire    ap_CS_fsm_state154;
wire    ap_CS_fsm_state70;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state71;
wire    ap_CS_fsm_state150;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state151;
reg   [63:0] indvar_i_reg_274;
reg   [63:0] empty_54_reg_285;
wire  signed [63:0] sext_ln60_fu_318_p1;
wire  signed [63:0] sext_ln99_fu_493_p1;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire   [57:0] trunc_ln_fu_308_p4;
wire   [1:0] trunc_ln76_fu_341_p1;
wire   [63:0] grp_fu_393_p0;
wire   [63:0] grp_fu_393_p1;
wire   [29:0] trunc_ln538_fu_399_p1;
wire   [127:0] zext_ln882_fu_411_p1;
wire   [63:0] shl_ln215_fu_430_p2;
wire   [63:0] or_ln215_fu_436_p2;
wire   [64:0] zext_ln215_fu_447_p1;
wire   [64:0] add_ln1350_fu_451_p2;
wire   [127:0] zext_ln890_fu_457_p1;
wire   [31:0] trunc_ln882_fu_426_p1;
wire   [0:0] icmp_ln890_fu_461_p2;
wire   [31:0] sub_ln95_fu_466_p2;
wire   [31:0] zext_ln37_fu_503_p1;
reg   [149:0] ap_NS_fsm;
wire    ap_ext_blocking_cur_n;
wire    ap_int_blocking_cur_n;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [127:0] grp_fu_393_p00;
wire   [127:0] grp_fu_393_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 150'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

aes256CbcDecryptKernel_mul_64ns_64ns_128_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_393_p0),
    .din1(grp_fu_393_p1),
    .ce(1'b1),
    .dout(grp_fu_393_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln882_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state71) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state70)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state71)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state71);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state70)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state151) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state150)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state151)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state151);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state150)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state154)) begin
        empty_54_reg_285 <= add_ln695_fu_518_p2;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        empty_54_reg_285 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln60_fu_329_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_239 <= add_ln60_fu_335_p2;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        i_reg_239 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state154)) begin
        indvar_i_reg_274 <= add_ln92_reg_597;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        indvar_i_reg_274 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln99_1_fu_507_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_reg_297 <= add_ln99_fu_512_p2;
    end else if ((1'b1 == ap_CS_fsm_state150)) begin
        j_reg_297 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_reg_535 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IV_V_reg_563 <= {{m_axi_gmem0_0_RDATA[383:256]}};
        key_V_reg_568 <= key_V_fu_381_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln882_fu_415_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
        add_ln215_reg_602 <= add_ln215_fu_442_p2;
        burstLen_reg_607 <= burstLen_fu_471_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        add_ln92_reg_597 <= add_ln92_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_reg_535_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_i_i203_phi_i_reg_262 <= taskNum_V_reg_555;
        conv_i_i218_phi_i_reg_250 <= msgNum_V_reg_548;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln60_reg_535 <= icmp_ln60_fu_329_p2;
        icmp_ln60_reg_535_pp0_iter1_reg <= icmp_ln60_reg_535;
        icmp_ln76_reg_544_pp0_iter1_reg <= icmp_ln76_reg_544;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_329_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln76_reg_544 <= icmp_ln76_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln99_1_reg_629 <= icmp_ln99_1_fu_507_p2;
        icmp_ln99_1_reg_629_pp1_iter1_reg <= icmp_ln99_1_reg_629;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_reg_535 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        msgNum_V_reg_548 <= {{m_axi_gmem0_0_RDATA[511:448]}};
        taskNum_V_reg_555 <= {{m_axi_gmem0_0_RDATA[447:384]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        mul_i156_i_reg_583 <= grp_fu_393_p2;
        shl_ln_reg_589[31 : 2] <= shl_ln_fu_403_p3[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_1_reg_629 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        t_reg_638 <= m_axi_gmem0_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        trunc_ln3_reg_618 <= {{add_ln215_reg_602[63:6]}};
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        IVInStrm_i_i_blk_n = IVInStrm_i_i_full_n;
    end else begin
        IVInStrm_i_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        IVInStrm_i_i_write = 1'b1;
    end else begin
        IVInStrm_i_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln60_fu_329_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state71 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state71 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln99_1_fu_507_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state151 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state151 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln882_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        cipherkeyInStrm_i_i_blk_n = cipherkeyInStrm_i_i_full_n;
    end else begin
        cipherkeyInStrm_i_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cipherkeyInStrm_i_i_write = 1'b1;
    end else begin
        cipherkeyInStrm_i_i_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state81) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        gmem0_0_blk_n_AR = m_axi_gmem0_0_ARREADY;
    end else begin
        gmem0_0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln99_1_reg_629 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln60_reg_535 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem0_0_blk_n_R = m_axi_gmem0_0_RVALID;
    end else begin
        gmem0_0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln882_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem0_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
        m_axi_gmem0_0_ARADDR = sext_ln99_fu_493_p1;
    end else if ((~((m_axi_gmem0_0_ARREADY == 1'b0) | (outputData_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem0_0_ARADDR = sext_ln60_fu_318_p1;
    end else begin
        m_axi_gmem0_0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((m_axi_gmem0_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
        m_axi_gmem0_0_ARLEN = burstLen_reg_607;
    end else if ((~((m_axi_gmem0_0_ARREADY == 1'b0) | (outputData_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem0_0_ARLEN = 32'd4;
    end else begin
        m_axi_gmem0_0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem0_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state81)) | (~((m_axi_gmem0_0_ARREADY == 1'b0) | (outputData_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        m_axi_gmem0_0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem0_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln99_1_reg_629 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln60_reg_535 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axi_gmem0_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        msgNumStrm1_i_i_blk_n = msgNumStrm1_i_i_full_n;
    end else begin
        msgNumStrm1_i_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        msgNumStrm1_i_i_write = 1'b1;
    end else begin
        msgNumStrm1_i_i_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        msgNumStrm_blk_n = msgNumStrm_full_n;
    end else begin
        msgNumStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        msgNumStrm_write = 1'b1;
    end else begin
        msgNumStrm_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputData_out_blk_n = outputData_out_full_n;
    end else begin
        outputData_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem0_0_ARREADY == 1'b0) | (outputData_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputData_out_write = 1'b1;
    end else begin
        outputData_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        taskNumStrm1_i_i_blk_n = taskNumStrm1_i_i_full_n;
    end else begin
        taskNumStrm1_i_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        taskNumStrm1_i_i_write = 1'b1;
    end else begin
        taskNumStrm1_i_i_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        taskNumStrm2_blk_n = taskNumStrm2_full_n;
    end else begin
        taskNumStrm2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        taskNumStrm2_write = 1'b1;
    end else begin
        taskNumStrm2_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        taskNumStrm_blk_n = taskNumStrm_full_n;
    end else begin
        taskNumStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        taskNumStrm_write = 1'b1;
    end else begin
        taskNumStrm_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln99_1_reg_629_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        textBlkStrm_i_i_blk_n = textBlkStrm_i_i_full_n;
    end else begin
        textBlkStrm_i_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln99_1_reg_629_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        textBlkStrm_i_i_write = 1'b1;
    end else begin
        textBlkStrm_i_i_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_gmem0_0_ARREADY == 1'b0) | (outputData_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln60_fu_329_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln60_fu_329_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            if (((icmp_ln882_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((icmp_ln99_fu_479_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state154;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state81 : begin
            if (((m_axi_gmem0_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln99_1_fu_507_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln99_1_fu_507_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state154;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IVInStrm_i_i_din = IV_V_reg_563;

assign add_ln1350_fu_451_p2 = (65'd128 + zext_ln215_fu_447_p1);

assign add_ln215_fu_442_p2 = (ptr + or_ln215_fu_436_p2);

assign add_ln60_fu_335_p2 = (i_reg_239 + 3'd1);

assign add_ln695_fu_518_p2 = (empty_54_reg_285 + 64'd128);

assign add_ln92_fu_420_p2 = (indvar_i_reg_274 + 64'd1);

assign add_ln99_fu_512_p2 = (j_reg_297 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd78];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (taskNumStrm2_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (taskNumStrm1_i_i_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (msgNumStrm1_i_i_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (cipherkeyInStrm_i_i_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (1'b0 == IVInStrm_i_i_full_n)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (taskNumStrm_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (msgNumStrm_full_n == 1'b0)))) | ((icmp_ln60_reg_535 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem0_0_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (taskNumStrm2_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (taskNumStrm1_i_i_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (msgNumStrm1_i_i_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (cipherkeyInStrm_i_i_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (1'b0 == IVInStrm_i_i_full_n)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (taskNumStrm_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (msgNumStrm_full_n == 1'b0)))) | ((icmp_ln60_reg_535 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem0_0_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (taskNumStrm2_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (taskNumStrm1_i_i_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (msgNumStrm1_i_i_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (cipherkeyInStrm_i_i_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (1'b0 == IVInStrm_i_i_full_n)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (taskNumStrm_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (msgNumStrm_full_n == 1'b0)))) | ((icmp_ln60_reg_535 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem0_0_RVALID == 1'b0)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln99_1_reg_629_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (textBlkStrm_i_i_full_n == 1'b0)) | ((icmp_ln99_1_reg_629 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (m_axi_gmem0_0_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((icmp_ln99_1_reg_629_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (textBlkStrm_i_i_full_n == 1'b0)) | ((icmp_ln99_1_reg_629 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (m_axi_gmem0_0_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((icmp_ln99_1_reg_629_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (textBlkStrm_i_i_full_n == 1'b0)) | ((icmp_ln99_1_reg_629 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (m_axi_gmem0_0_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((outputData_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state151_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state152_pp1_stage0_iter1 = ((icmp_ln99_1_reg_629 == 1'd0) & (m_axi_gmem0_0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state153_pp1_stage0_iter2 = ((icmp_ln99_1_reg_629_pp1_iter1_reg == 1'd0) & (textBlkStrm_i_i_full_n == 1'b0));
end

assign ap_block_state71_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state72_pp0_stage0_iter1 = ((icmp_ln60_reg_535 == 1'd0) & (m_axi_gmem0_0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state73_pp0_stage0_iter2 = (((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (taskNumStrm2_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (taskNumStrm1_i_i_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (msgNumStrm1_i_i_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (cipherkeyInStrm_i_i_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (1'b0 == IVInStrm_i_i_full_n)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (taskNumStrm_full_n == 1'b0)) | ((icmp_ln76_reg_544_pp0_iter1_reg == 1'd1) & (msgNumStrm_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ext_blocking_cur_n = (gmem0_0_blk_n_R & gmem0_0_blk_n_AR);

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_cur_n = (textBlkStrm_i_i_blk_n & taskNumStrm_blk_n & taskNumStrm2_blk_n & taskNumStrm1_i_i_blk_n & outputData_out_blk_n & msgNumStrm_blk_n & msgNumStrm1_i_i_blk_n & cipherkeyInStrm_i_i_blk_n & IVInStrm_i_i_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_ready = internal_ap_ready;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign burstLen_fu_471_p3 = ((icmp_ln890_fu_461_p2[0:0] === 1'b1) ? sub_ln95_fu_466_p2 : 32'd128);

assign cipherkeyInStrm_i_i_din = key_V_reg_568;

assign grp_fu_393_p0 = grp_fu_393_p00;

assign grp_fu_393_p00 = conv_i_i218_phi_i_reg_250;

assign grp_fu_393_p1 = grp_fu_393_p10;

assign grp_fu_393_p10 = conv_i_i203_phi_i_reg_262;

assign icmp_ln60_fu_329_p2 = ((i_reg_239 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_345_p2 = ((trunc_ln76_fu_341_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln882_fu_415_p2 = ((zext_ln882_fu_411_p1 < mul_i156_i_reg_583) ? 1'b1 : 1'b0);

assign icmp_ln890_fu_461_p2 = ((zext_ln890_fu_457_p1 > mul_i156_i_reg_583) ? 1'b1 : 1'b0);

assign icmp_ln99_1_fu_507_p2 = ((zext_ln37_fu_503_p1 == burstLen_reg_607) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_479_p2 = (($signed(burstLen_reg_607) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign key_V_fu_381_p1 = m_axi_gmem0_0_RDATA[255:0];

assign m_axi_gmem0_0_ARBURST = 2'd0;

assign m_axi_gmem0_0_ARCACHE = 4'd0;

assign m_axi_gmem0_0_ARID = 1'd0;

assign m_axi_gmem0_0_ARLOCK = 2'd0;

assign m_axi_gmem0_0_ARPROT = 3'd0;

assign m_axi_gmem0_0_ARQOS = 4'd0;

assign m_axi_gmem0_0_ARREGION = 4'd0;

assign m_axi_gmem0_0_ARSIZE = 3'd0;

assign m_axi_gmem0_0_ARUSER = 1'd0;

assign m_axi_gmem0_0_AWADDR = 64'd0;

assign m_axi_gmem0_0_AWBURST = 2'd0;

assign m_axi_gmem0_0_AWCACHE = 4'd0;

assign m_axi_gmem0_0_AWID = 1'd0;

assign m_axi_gmem0_0_AWLEN = 32'd0;

assign m_axi_gmem0_0_AWLOCK = 2'd0;

assign m_axi_gmem0_0_AWPROT = 3'd0;

assign m_axi_gmem0_0_AWQOS = 4'd0;

assign m_axi_gmem0_0_AWREGION = 4'd0;

assign m_axi_gmem0_0_AWSIZE = 3'd0;

assign m_axi_gmem0_0_AWUSER = 1'd0;

assign m_axi_gmem0_0_AWVALID = 1'b0;

assign m_axi_gmem0_0_BREADY = 1'b0;

assign m_axi_gmem0_0_WDATA = 512'd0;

assign m_axi_gmem0_0_WID = 1'd0;

assign m_axi_gmem0_0_WLAST = 1'b0;

assign m_axi_gmem0_0_WSTRB = 64'd0;

assign m_axi_gmem0_0_WUSER = 1'd0;

assign m_axi_gmem0_0_WVALID = 1'b0;

assign msgNumStrm1_i_i_din = msgNum_V_reg_548;

assign msgNumStrm_din = msgNum_V_reg_548;

assign or_ln215_fu_436_p2 = (shl_ln215_fu_430_p2 | 64'd256);

assign outputData_out_din = outputData;

assign sext_ln60_fu_318_p1 = $signed(trunc_ln_fu_308_p4);

assign sext_ln99_fu_493_p1 = $signed(trunc_ln3_reg_618);

assign shl_ln215_fu_430_p2 = indvar_i_reg_274 << 64'd13;

assign shl_ln_fu_403_p3 = {{trunc_ln538_fu_399_p1}, {2'd0}};

assign start_out = real_start;

assign sub_ln95_fu_466_p2 = (shl_ln_reg_589 - trunc_ln882_fu_426_p1);

assign taskNumStrm1_i_i_din = taskNum_V_reg_555;

assign taskNumStrm2_din = taskNum_V_reg_555;

assign taskNumStrm_din = taskNum_V_reg_555;

assign textBlkStrm_i_i_din = t_reg_638;

assign trunc_ln538_fu_399_p1 = grp_fu_393_p2[29:0];

assign trunc_ln76_fu_341_p1 = i_reg_239[1:0];

assign trunc_ln882_fu_426_p1 = empty_54_reg_285[31:0];

assign trunc_ln_fu_308_p4 = {{ptr[63:6]}};

assign zext_ln215_fu_447_p1 = empty_54_reg_285;

assign zext_ln37_fu_503_p1 = j_reg_297;

assign zext_ln882_fu_411_p1 = empty_54_reg_285;

assign zext_ln890_fu_457_p1 = add_ln1350_fu_451_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_589[1:0] <= 2'b00;
end

endmodule //aes256CbcDecryptKernel_readBlock_128u_4u_256u_107
