// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes256CbcDecryptKernel_singleCipherMode_256u_77 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        taskNum_dout,
        taskNum_empty_n,
        taskNum_read,
        IVStrm2_dout,
        IVStrm2_empty_n,
        IVStrm2_read,
        cipherkeyStrm5_dout,
        cipherkeyStrm5_empty_n,
        cipherkeyStrm5_read,
        textInStrm8_dout,
        textInStrm8_empty_n,
        textInStrm8_read,
        endTextInStrm11_dout,
        endTextInStrm11_empty_n,
        endTextInStrm11_read,
        textOutStrm14_din,
        textOutStrm14_full_n,
        textOutStrm14_write,
        endTextOutStrm17_din,
        endTextOutStrm17_full_n,
        endTextOutStrm17_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state21 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] taskNum_dout;
input   taskNum_empty_n;
output   taskNum_read;
input  [127:0] IVStrm2_dout;
input   IVStrm2_empty_n;
output   IVStrm2_read;
input  [255:0] cipherkeyStrm5_dout;
input   cipherkeyStrm5_empty_n;
output   cipherkeyStrm5_read;
input  [127:0] textInStrm8_dout;
input   textInStrm8_empty_n;
output   textInStrm8_read;
input   endTextInStrm11_dout;
input   endTextInStrm11_empty_n;
output   endTextInStrm11_read;
output  [127:0] textOutStrm14_din;
input   textOutStrm14_full_n;
output   textOutStrm14_write;
output   endTextOutStrm17_din;
input   endTextOutStrm17_full_n;
output   endTextOutStrm17_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg taskNum_read;
reg IVStrm2_read;
reg cipherkeyStrm5_read;
reg textInStrm8_read;
reg endTextInStrm11_read;
reg textOutStrm14_write;
reg endTextOutStrm17_din;
reg endTextOutStrm17_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] decipher_0_494_q0;
wire   [31:0] decipher_0_494_q1;
reg    taskNum_blk_n;
reg    IVStrm2_blk_n;
wire    ap_CS_fsm_state3;
reg    cipherkeyStrm5_blk_n;
reg    textInStrm8_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] e_3_reg_147;
reg    endTextInStrm11_blk_n;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] ap_phi_mux_e_3_phi_fu_150_p4;
reg    textOutStrm14_blk_n;
reg    ap_enable_reg_pp0_iter15;
reg   [0:0] e_3_reg_147_pp0_iter14_reg;
reg    endTextOutStrm17_blk_n;
wire    ap_CS_fsm_state21;
reg   [0:0] e_3_reg_147_pp0_iter1_reg;
reg    ap_block_state5_pp0_stage0_iter0;
reg    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_state14_pp0_stage0_iter9;
wire    ap_block_state15_pp0_stage0_iter10;
wire    ap_block_state16_pp0_stage0_iter11;
wire    ap_block_state17_pp0_stage0_iter12;
wire    ap_block_state18_pp0_stage0_iter13;
wire    ap_block_state19_pp0_stage0_iter14;
reg    ap_block_state20_pp0_stage0_iter15;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] e_3_reg_147_pp0_iter2_reg;
reg   [0:0] e_3_reg_147_pp0_iter3_reg;
reg   [0:0] e_3_reg_147_pp0_iter4_reg;
reg   [0:0] e_3_reg_147_pp0_iter5_reg;
reg   [0:0] e_3_reg_147_pp0_iter6_reg;
reg   [0:0] e_3_reg_147_pp0_iter7_reg;
reg   [0:0] e_3_reg_147_pp0_iter8_reg;
reg   [0:0] e_3_reg_147_pp0_iter9_reg;
reg   [0:0] e_3_reg_147_pp0_iter10_reg;
reg   [0:0] e_3_reg_147_pp0_iter11_reg;
reg   [0:0] e_3_reg_147_pp0_iter12_reg;
reg   [0:0] e_3_reg_147_pp0_iter13_reg;
reg   [127:0] p_load_04474_i_i_reg_157;
reg   [63:0] taskNum_read_reg_280;
reg    ap_block_state1;
wire   [63:0] add_ln695_fu_207_p2;
reg   [63:0] add_ln695_reg_288;
wire    ap_CS_fsm_state2;
reg   [255:0] cipherkeyStrm5_read_reg_293;
reg    ap_block_state3;
reg   [127:0] IV_V_reg_298;
reg   [0:0] tmp_reg_303;
reg   [127:0] decipher_key_list_V_0_reg_308;
wire    ap_CS_fsm_state4;
wire    grp_updateKey_fu_192_ap_ready;
wire    grp_updateKey_fu_192_ap_done;
reg   [127:0] decipher_key_list_V_1_reg_313;
reg   [127:0] decipher_key_list_V_2_reg_318;
reg   [127:0] decipher_key_list_V_3_reg_323;
reg   [127:0] decipher_key_list_V_4_reg_328;
reg   [127:0] decipher_key_list_V_5_reg_333;
reg   [127:0] decipher_key_list_V_6_reg_338;
reg   [127:0] decipher_key_list_V_7_reg_343;
reg   [127:0] decipher_key_list_V_8_reg_348;
reg   [127:0] decipher_key_list_V_9_reg_353;
reg   [127:0] decipher_key_list_V_10_reg_358;
reg   [127:0] decipher_key_list_V_11_reg_363;
reg   [127:0] decipher_key_list_V_12_reg_368;
reg   [127:0] decipher_key_list_V_13_reg_373;
reg   [127:0] decipher_key_list_V_14_reg_378;
reg   [0:0] tmp_4_reg_383;
reg   [127:0] textInStrm8_read_reg_388;
reg   [127:0] textInStrm8_read_reg_388_pp0_iter2_reg;
reg   [127:0] textInStrm8_read_reg_388_pp0_iter3_reg;
reg   [127:0] textInStrm8_read_reg_388_pp0_iter4_reg;
reg   [127:0] textInStrm8_read_reg_388_pp0_iter5_reg;
reg   [127:0] textInStrm8_read_reg_388_pp0_iter6_reg;
reg   [127:0] textInStrm8_read_reg_388_pp0_iter7_reg;
reg   [127:0] textInStrm8_read_reg_388_pp0_iter8_reg;
reg   [127:0] textInStrm8_read_reg_388_pp0_iter9_reg;
reg   [127:0] textInStrm8_read_reg_388_pp0_iter10_reg;
reg   [127:0] textInStrm8_read_reg_388_pp0_iter11_reg;
reg   [127:0] textInStrm8_read_reg_388_pp0_iter12_reg;
reg   [127:0] textInStrm8_read_reg_388_pp0_iter13_reg;
reg   [127:0] textInStrm8_read_reg_388_pp0_iter14_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_condition_pp0_exit_iter14_state19;
wire    grp_process_r_fu_167_ap_start;
wire    grp_process_r_fu_167_ap_done;
wire    grp_process_r_fu_167_ap_idle;
wire    grp_process_r_fu_167_ap_ready;
reg    grp_process_r_fu_167_ap_ce;
wire   [127:0] grp_process_r_fu_167_ap_return;
wire    grp_process_r_fu_167_ap_ext_blocking_n;
wire    grp_process_r_fu_167_ap_str_blocking_n;
wire    grp_process_r_fu_167_ap_int_blocking_n;
reg    ap_block_state5_pp0_stage0_iter0_ignore_call3;
reg    ap_block_state6_pp0_stage0_iter1_ignore_call3;
wire    ap_block_state7_pp0_stage0_iter2_ignore_call3;
wire    ap_block_state8_pp0_stage0_iter3_ignore_call3;
wire    ap_block_state9_pp0_stage0_iter4_ignore_call3;
wire    ap_block_state10_pp0_stage0_iter5_ignore_call3;
wire    ap_block_state11_pp0_stage0_iter6_ignore_call3;
wire    ap_block_state12_pp0_stage0_iter7_ignore_call3;
wire    ap_block_state13_pp0_stage0_iter8_ignore_call3;
wire    ap_block_state14_pp0_stage0_iter9_ignore_call3;
wire    ap_block_state15_pp0_stage0_iter10_ignore_call3;
wire    ap_block_state16_pp0_stage0_iter11_ignore_call3;
wire    ap_block_state17_pp0_stage0_iter12_ignore_call3;
wire    ap_block_state18_pp0_stage0_iter13_ignore_call3;
wire    ap_block_state19_pp0_stage0_iter14_ignore_call3;
reg    ap_block_state20_pp0_stage0_iter15_ignore_call3;
reg    ap_block_pp0_stage0_11001_ignoreCallOp90;
wire    grp_updateKey_fu_192_ap_start;
wire    grp_updateKey_fu_192_ap_idle;
wire   [7:0] grp_updateKey_fu_192_this_0_4_address0;
wire    grp_updateKey_fu_192_this_0_4_ce0;
wire   [7:0] grp_updateKey_fu_192_this_0_4_address1;
wire    grp_updateKey_fu_192_this_0_4_ce1;
wire   [127:0] grp_updateKey_fu_192_ap_return_0;
wire   [127:0] grp_updateKey_fu_192_ap_return_1;
wire   [127:0] grp_updateKey_fu_192_ap_return_2;
wire   [127:0] grp_updateKey_fu_192_ap_return_3;
wire   [127:0] grp_updateKey_fu_192_ap_return_4;
wire   [127:0] grp_updateKey_fu_192_ap_return_5;
wire   [127:0] grp_updateKey_fu_192_ap_return_6;
wire   [127:0] grp_updateKey_fu_192_ap_return_7;
wire   [127:0] grp_updateKey_fu_192_ap_return_8;
wire   [127:0] grp_updateKey_fu_192_ap_return_9;
wire   [127:0] grp_updateKey_fu_192_ap_return_10;
wire   [127:0] grp_updateKey_fu_192_ap_return_11;
wire   [127:0] grp_updateKey_fu_192_ap_return_12;
wire   [127:0] grp_updateKey_fu_192_ap_return_13;
wire   [127:0] grp_updateKey_fu_192_ap_return_14;
wire    grp_updateKey_fu_192_ap_ext_blocking_n;
wire    grp_updateKey_fu_192_ap_str_blocking_n;
wire    grp_updateKey_fu_192_ap_int_blocking_n;
reg   [63:0] empty_reg_136;
reg    grp_process_r_fu_167_ap_start_reg;
reg    grp_updateKey_fu_192_ap_start_reg;
reg    ap_block_state3_ignore_call13;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln882_fu_202_p2;
reg   [5:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_wait_1;
reg    ap_sub_ext_blocking_1;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_sub_str_blocking_1;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
reg    ap_sub_int_blocking_1;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 grp_process_r_fu_167_ap_start_reg = 1'b0;
#0 grp_updateKey_fu_192_ap_start_reg = 1'b0;
end

aes256CbcDecryptKernel_singleCipherMode_256u_75_decipher_0_496 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
decipher_0_494_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_updateKey_fu_192_this_0_4_address0),
    .ce0(grp_updateKey_fu_192_this_0_4_ce0),
    .q0(decipher_0_494_q0),
    .address1(grp_updateKey_fu_192_this_0_4_address1),
    .ce1(grp_updateKey_fu_192_this_0_4_ce1),
    .q1(decipher_0_494_q1)
);

aes256CbcDecryptKernel_process_r grp_process_r_fu_167(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_process_r_fu_167_ap_start),
    .ap_done(grp_process_r_fu_167_ap_done),
    .ap_idle(grp_process_r_fu_167_ap_idle),
    .ap_ready(grp_process_r_fu_167_ap_ready),
    .ap_ce(grp_process_r_fu_167_ap_ce),
    .p_read(decipher_key_list_V_0_reg_308),
    .p_read1(decipher_key_list_V_1_reg_313),
    .p_read2(decipher_key_list_V_2_reg_318),
    .p_read3(decipher_key_list_V_3_reg_323),
    .p_read4(decipher_key_list_V_4_reg_328),
    .p_read5(decipher_key_list_V_5_reg_333),
    .p_read6(decipher_key_list_V_6_reg_338),
    .p_read7(decipher_key_list_V_7_reg_343),
    .p_read8(decipher_key_list_V_8_reg_348),
    .p_read9(decipher_key_list_V_9_reg_353),
    .p_read10(decipher_key_list_V_10_reg_358),
    .p_read11(decipher_key_list_V_11_reg_363),
    .p_read12(decipher_key_list_V_12_reg_368),
    .p_read13(decipher_key_list_V_13_reg_373),
    .p_read14(decipher_key_list_V_14_reg_378),
    .ciphertext(textInStrm8_dout),
    .ap_return(grp_process_r_fu_167_ap_return),
    .ap_ext_blocking_n(grp_process_r_fu_167_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_process_r_fu_167_ap_str_blocking_n),
    .ap_int_blocking_n(grp_process_r_fu_167_ap_int_blocking_n)
);

aes256CbcDecryptKernel_updateKey grp_updateKey_fu_192(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_updateKey_fu_192_ap_start),
    .ap_done(grp_updateKey_fu_192_ap_done),
    .ap_idle(grp_updateKey_fu_192_ap_idle),
    .ap_ready(grp_updateKey_fu_192_ap_ready),
    .this_0_4_address0(grp_updateKey_fu_192_this_0_4_address0),
    .this_0_4_ce0(grp_updateKey_fu_192_this_0_4_ce0),
    .this_0_4_q0(decipher_0_494_q0),
    .this_0_4_address1(grp_updateKey_fu_192_this_0_4_address1),
    .this_0_4_ce1(grp_updateKey_fu_192_this_0_4_ce1),
    .this_0_4_q1(decipher_0_494_q1),
    .cipherkey(cipherkeyStrm5_read_reg_293),
    .ap_return_0(grp_updateKey_fu_192_ap_return_0),
    .ap_return_1(grp_updateKey_fu_192_ap_return_1),
    .ap_return_2(grp_updateKey_fu_192_ap_return_2),
    .ap_return_3(grp_updateKey_fu_192_ap_return_3),
    .ap_return_4(grp_updateKey_fu_192_ap_return_4),
    .ap_return_5(grp_updateKey_fu_192_ap_return_5),
    .ap_return_6(grp_updateKey_fu_192_ap_return_6),
    .ap_return_7(grp_updateKey_fu_192_ap_return_7),
    .ap_return_8(grp_updateKey_fu_192_ap_return_8),
    .ap_return_9(grp_updateKey_fu_192_ap_return_9),
    .ap_return_10(grp_updateKey_fu_192_ap_return_10),
    .ap_return_11(grp_updateKey_fu_192_ap_return_11),
    .ap_return_12(grp_updateKey_fu_192_ap_return_12),
    .ap_return_13(grp_updateKey_fu_192_ap_return_13),
    .ap_return_14(grp_updateKey_fu_192_ap_return_14),
    .ap_ext_blocking_n(grp_updateKey_fu_192_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_updateKey_fu_192_ap_str_blocking_n),
    .ap_int_blocking_n(grp_updateKey_fu_192_ap_int_blocking_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln882_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_updateKey_fu_192_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter13 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter14_state19)) | ((grp_updateKey_fu_192_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
            ap_enable_reg_pp0_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter14_state19))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter13;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end else if (((grp_updateKey_fu_192_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter15 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_process_r_fu_167_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_e_3_phi_fu_150_p4 == 1'd0))) begin
            grp_process_r_fu_167_ap_start_reg <= 1'b1;
        end else if ((grp_process_r_fu_167_ap_ready == 1'b1)) begin
            grp_process_r_fu_167_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_updateKey_fu_192_ap_start_reg <= 1'b0;
    end else begin
        if ((~((endTextInStrm11_empty_n == 1'b0) | (cipherkeyStrm5_empty_n == 1'b0) | (1'b0 == IVStrm2_empty_n)) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_updateKey_fu_192_ap_start_reg <= 1'b1;
        end else if ((grp_updateKey_fu_192_ap_ready == 1'b1)) begin
            grp_updateKey_fu_192_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((e_3_reg_147 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_3_reg_147 <= tmp_4_reg_383;
    end else if (((grp_updateKey_fu_192_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        e_3_reg_147 <= tmp_reg_303;
    end
end

always @ (posedge ap_clk) begin
    if (((endTextOutStrm17_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        empty_reg_136 <= add_ln695_reg_288;
    end else if ((~((taskNum_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_136 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (e_3_reg_147_pp0_iter14_reg == 1'd0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        p_load_04474_i_i_reg_157 <= textInStrm8_read_reg_388_pp0_iter14_reg;
    end else if (((grp_updateKey_fu_192_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_load_04474_i_i_reg_157 <= IV_V_reg_298;
    end
end

always @ (posedge ap_clk) begin
    if ((~((endTextInStrm11_empty_n == 1'b0) | (cipherkeyStrm5_empty_n == 1'b0) | (1'b0 == IVStrm2_empty_n)) & (1'b1 == ap_CS_fsm_state3))) begin
        IV_V_reg_298 <= IVStrm2_dout;
        cipherkeyStrm5_read_reg_293 <= cipherkeyStrm5_dout;
        tmp_reg_303 <= endTextInStrm11_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln695_reg_288 <= add_ln695_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_updateKey_fu_192_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        decipher_key_list_V_0_reg_308 <= grp_updateKey_fu_192_ap_return_0;
        decipher_key_list_V_10_reg_358 <= grp_updateKey_fu_192_ap_return_10;
        decipher_key_list_V_11_reg_363 <= grp_updateKey_fu_192_ap_return_11;
        decipher_key_list_V_12_reg_368 <= grp_updateKey_fu_192_ap_return_12;
        decipher_key_list_V_13_reg_373 <= grp_updateKey_fu_192_ap_return_13;
        decipher_key_list_V_14_reg_378 <= grp_updateKey_fu_192_ap_return_14;
        decipher_key_list_V_1_reg_313 <= grp_updateKey_fu_192_ap_return_1;
        decipher_key_list_V_2_reg_318 <= grp_updateKey_fu_192_ap_return_2;
        decipher_key_list_V_3_reg_323 <= grp_updateKey_fu_192_ap_return_3;
        decipher_key_list_V_4_reg_328 <= grp_updateKey_fu_192_ap_return_4;
        decipher_key_list_V_5_reg_333 <= grp_updateKey_fu_192_ap_return_5;
        decipher_key_list_V_6_reg_338 <= grp_updateKey_fu_192_ap_return_6;
        decipher_key_list_V_7_reg_343 <= grp_updateKey_fu_192_ap_return_7;
        decipher_key_list_V_8_reg_348 <= grp_updateKey_fu_192_ap_return_8;
        decipher_key_list_V_9_reg_353 <= grp_updateKey_fu_192_ap_return_9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        e_3_reg_147_pp0_iter10_reg <= e_3_reg_147_pp0_iter9_reg;
        e_3_reg_147_pp0_iter11_reg <= e_3_reg_147_pp0_iter10_reg;
        e_3_reg_147_pp0_iter12_reg <= e_3_reg_147_pp0_iter11_reg;
        e_3_reg_147_pp0_iter13_reg <= e_3_reg_147_pp0_iter12_reg;
        e_3_reg_147_pp0_iter14_reg <= e_3_reg_147_pp0_iter13_reg;
        e_3_reg_147_pp0_iter2_reg <= e_3_reg_147_pp0_iter1_reg;
        e_3_reg_147_pp0_iter3_reg <= e_3_reg_147_pp0_iter2_reg;
        e_3_reg_147_pp0_iter4_reg <= e_3_reg_147_pp0_iter3_reg;
        e_3_reg_147_pp0_iter5_reg <= e_3_reg_147_pp0_iter4_reg;
        e_3_reg_147_pp0_iter6_reg <= e_3_reg_147_pp0_iter5_reg;
        e_3_reg_147_pp0_iter7_reg <= e_3_reg_147_pp0_iter6_reg;
        e_3_reg_147_pp0_iter8_reg <= e_3_reg_147_pp0_iter7_reg;
        e_3_reg_147_pp0_iter9_reg <= e_3_reg_147_pp0_iter8_reg;
        textInStrm8_read_reg_388_pp0_iter10_reg <= textInStrm8_read_reg_388_pp0_iter9_reg;
        textInStrm8_read_reg_388_pp0_iter11_reg <= textInStrm8_read_reg_388_pp0_iter10_reg;
        textInStrm8_read_reg_388_pp0_iter12_reg <= textInStrm8_read_reg_388_pp0_iter11_reg;
        textInStrm8_read_reg_388_pp0_iter13_reg <= textInStrm8_read_reg_388_pp0_iter12_reg;
        textInStrm8_read_reg_388_pp0_iter14_reg <= textInStrm8_read_reg_388_pp0_iter13_reg;
        textInStrm8_read_reg_388_pp0_iter2_reg <= textInStrm8_read_reg_388;
        textInStrm8_read_reg_388_pp0_iter3_reg <= textInStrm8_read_reg_388_pp0_iter2_reg;
        textInStrm8_read_reg_388_pp0_iter4_reg <= textInStrm8_read_reg_388_pp0_iter3_reg;
        textInStrm8_read_reg_388_pp0_iter5_reg <= textInStrm8_read_reg_388_pp0_iter4_reg;
        textInStrm8_read_reg_388_pp0_iter6_reg <= textInStrm8_read_reg_388_pp0_iter5_reg;
        textInStrm8_read_reg_388_pp0_iter7_reg <= textInStrm8_read_reg_388_pp0_iter6_reg;
        textInStrm8_read_reg_388_pp0_iter8_reg <= textInStrm8_read_reg_388_pp0_iter7_reg;
        textInStrm8_read_reg_388_pp0_iter9_reg <= textInStrm8_read_reg_388_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_3_reg_147_pp0_iter1_reg <= e_3_reg_147;
    end
end

always @ (posedge ap_clk) begin
    if ((~((taskNum_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        taskNum_read_reg_280 <= taskNum_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((e_3_reg_147 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        textInStrm8_read_reg_388 <= textInStrm8_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_e_3_phi_fu_150_p4 == 1'd0))) begin
        tmp_4_reg_383 <= endTextInStrm11_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        IVStrm2_blk_n = IVStrm2_empty_n;
    end else begin
        IVStrm2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((endTextInStrm11_empty_n == 1'b0) | (cipherkeyStrm5_empty_n == 1'b0) | (1'b0 == IVStrm2_empty_n)) & (1'b1 == ap_CS_fsm_state3))) begin
        IVStrm2_read = 1'b1;
    end else begin
        IVStrm2_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (ap_enable_reg_pp0_iter13 == 1'b0))) begin
        ap_condition_pp0_exit_iter14_state19 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter14_state19 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_e_3_phi_fu_150_p4 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln882_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((((ap_wait_1 & ap_sub_ext_blocking_1) == 1'b1) & ((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1))) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_wait_1 & ap_sub_int_blocking_1) == 1'b1) & ((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1))) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((e_3_reg_147 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_e_3_phi_fu_150_p4 = tmp_4_reg_383;
    end else begin
        ap_phi_mux_e_3_phi_fu_150_p4 = e_3_reg_147;
    end
end

always @ (*) begin
    if (((icmp_ln882_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_wait_1 & ap_sub_str_blocking_1) == 1'b1) & ((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1))) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((grp_process_r_fu_167_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_updateKey_fu_192_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_1 = 1'b1;
    end else begin
        ap_sub_ext_blocking_1 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_process_r_fu_167_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_updateKey_fu_192_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_1 = 1'b1;
    end else begin
        ap_sub_int_blocking_1 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_process_r_fu_167_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_updateKey_fu_192_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_1 = 1'b1;
    end else begin
        ap_sub_str_blocking_1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state4 == ap_CS_fsm)) begin
        ap_wait_1 = 1'b1;
    end else begin
        ap_wait_1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cipherkeyStrm5_blk_n = cipherkeyStrm5_empty_n;
    end else begin
        cipherkeyStrm5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((endTextInStrm11_empty_n == 1'b0) | (cipherkeyStrm5_empty_n == 1'b0) | (1'b0 == IVStrm2_empty_n)) & (1'b1 == ap_CS_fsm_state3))) begin
        cipherkeyStrm5_read = 1'b1;
    end else begin
        cipherkeyStrm5_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_e_3_phi_fu_150_p4 == 1'd0)))) begin
        endTextInStrm11_blk_n = endTextInStrm11_empty_n;
    end else begin
        endTextInStrm11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_e_3_phi_fu_150_p4 == 1'd0)) | (~((endTextInStrm11_empty_n == 1'b0) | (cipherkeyStrm5_empty_n == 1'b0) | (1'b0 == IVStrm2_empty_n)) & (1'b1 == ap_CS_fsm_state3)))) begin
        endTextInStrm11_read = 1'b1;
    end else begin
        endTextInStrm11_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((1'b0 == ap_block_pp0_stage0) & (e_3_reg_147_pp0_iter14_reg == 1'd0) & (ap_enable_reg_pp0_iter15 == 1'b1)))) begin
        endTextOutStrm17_blk_n = endTextOutStrm17_full_n;
    end else begin
        endTextOutStrm17_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((endTextOutStrm17_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        endTextOutStrm17_din = 1'd1;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (e_3_reg_147_pp0_iter14_reg == 1'd0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        endTextOutStrm17_din = 1'd0;
    end else begin
        endTextOutStrm17_din = 'bx;
    end
end

always @ (*) begin
    if ((((endTextOutStrm17_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((1'b0 == ap_block_pp0_stage0_11001) & (e_3_reg_147_pp0_iter14_reg == 1'd0) & (ap_enable_reg_pp0_iter15 == 1'b1)))) begin
        endTextOutStrm17_write = 1'b1;
    end else begin
        endTextOutStrm17_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp90) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_process_r_fu_167_ap_ce = 1'b1;
    end else begin
        grp_process_r_fu_167_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        taskNum_blk_n = taskNum_empty_n;
    end else begin
        taskNum_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((taskNum_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        taskNum_read = 1'b1;
    end else begin
        taskNum_read = 1'b0;
    end
end

always @ (*) begin
    if (((e_3_reg_147 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        textInStrm8_blk_n = textInStrm8_empty_n;
    end else begin
        textInStrm8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((e_3_reg_147 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        textInStrm8_read = 1'b1;
    end else begin
        textInStrm8_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (e_3_reg_147_pp0_iter14_reg == 1'd0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        textOutStrm14_blk_n = textOutStrm14_full_n;
    end else begin
        textOutStrm14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (e_3_reg_147_pp0_iter14_reg == 1'd0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        textOutStrm14_write = 1'b1;
    end else begin
        textOutStrm14_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((taskNum_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln882_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((endTextInStrm11_empty_n == 1'b0) | (cipherkeyStrm5_empty_n == 1'b0) | (1'b0 == IVStrm2_empty_n)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_updateKey_fu_192_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter14 == 1'b1) & (ap_enable_reg_pp0_iter13 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter14 == 1'b1) & (ap_enable_reg_pp0_iter13 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((endTextOutStrm17_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln695_fu_207_p2 = (empty_reg_136 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (endTextInStrm11_empty_n == 1'b0) & (ap_phi_mux_e_3_phi_fu_150_p4 == 1'd0)) | ((e_3_reg_147 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (textInStrm8_empty_n == 1'b0)) | ((ap_enable_reg_pp0_iter15 == 1'b1) & (((endTextOutStrm17_full_n == 1'b0) & (e_3_reg_147_pp0_iter14_reg == 1'd0)) | ((textOutStrm14_full_n == 1'b0) & (e_3_reg_147_pp0_iter14_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (endTextInStrm11_empty_n == 1'b0) & (ap_phi_mux_e_3_phi_fu_150_p4 == 1'd0)) | ((e_3_reg_147 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (textInStrm8_empty_n == 1'b0)) | ((ap_enable_reg_pp0_iter15 == 1'b1) & (((endTextOutStrm17_full_n == 1'b0) & (e_3_reg_147_pp0_iter14_reg == 1'd0)) | ((textOutStrm14_full_n == 1'b0) & (e_3_reg_147_pp0_iter14_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp90 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (endTextInStrm11_empty_n == 1'b0) & (ap_phi_mux_e_3_phi_fu_150_p4 == 1'd0)) | ((e_3_reg_147 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (textInStrm8_empty_n == 1'b0)) | ((ap_enable_reg_pp0_iter15 == 1'b1) & (((endTextOutStrm17_full_n == 1'b0) & (e_3_reg_147_pp0_iter14_reg == 1'd0)) | ((textOutStrm14_full_n == 1'b0) & (e_3_reg_147_pp0_iter14_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (endTextInStrm11_empty_n == 1'b0) & (ap_phi_mux_e_3_phi_fu_150_p4 == 1'd0)) | ((e_3_reg_147 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (textInStrm8_empty_n == 1'b0)) | ((ap_enable_reg_pp0_iter15 == 1'b1) & (((endTextOutStrm17_full_n == 1'b0) & (e_3_reg_147_pp0_iter14_reg == 1'd0)) | ((textOutStrm14_full_n == 1'b0) & (e_3_reg_147_pp0_iter14_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_state1 = ((taskNum_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter5_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter9_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter10_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter11_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter12_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter13_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter14_ignore_call3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp0_stage0_iter15 = (((endTextOutStrm17_full_n == 1'b0) & (e_3_reg_147_pp0_iter14_reg == 1'd0)) | ((textOutStrm14_full_n == 1'b0) & (e_3_reg_147_pp0_iter14_reg == 1'd0)));
end

always @ (*) begin
    ap_block_state20_pp0_stage0_iter15_ignore_call3 = (((endTextOutStrm17_full_n == 1'b0) & (e_3_reg_147_pp0_iter14_reg == 1'd0)) | ((textOutStrm14_full_n == 1'b0) & (e_3_reg_147_pp0_iter14_reg == 1'd0)));
end

always @ (*) begin
    ap_block_state3 = ((endTextInStrm11_empty_n == 1'b0) | (cipherkeyStrm5_empty_n == 1'b0) | (1'b0 == IVStrm2_empty_n));
end

always @ (*) begin
    ap_block_state3_ignore_call13 = ((endTextInStrm11_empty_n == 1'b0) | (cipherkeyStrm5_empty_n == 1'b0) | (1'b0 == IVStrm2_empty_n));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter0 = ((endTextInStrm11_empty_n == 1'b0) & (ap_phi_mux_e_3_phi_fu_150_p4 == 1'd0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter0_ignore_call3 = ((endTextInStrm11_empty_n == 1'b0) & (ap_phi_mux_e_3_phi_fu_150_p4 == 1'd0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((e_3_reg_147 == 1'd0) & (textInStrm8_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1_ignore_call3 = ((e_3_reg_147 == 1'd0) & (textInStrm8_empty_n == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & 1'b1);

assign ap_int_blocking_cur_n = (textOutStrm14_blk_n & textInStrm8_blk_n & taskNum_blk_n & endTextOutStrm17_blk_n & endTextInStrm11_blk_n & cipherkeyStrm5_blk_n & IVStrm2_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign grp_process_r_fu_167_ap_start = grp_process_r_fu_167_ap_start_reg;

assign grp_updateKey_fu_192_ap_start = grp_updateKey_fu_192_ap_start_reg;

assign icmp_ln882_fu_202_p2 = ((empty_reg_136 == taskNum_read_reg_280) ? 1'b1 : 1'b0);

assign textOutStrm14_din = (p_load_04474_i_i_reg_157 ^ grp_process_r_fu_167_ap_return);

endmodule //aes256CbcDecryptKernel_singleCipherMode_256u_77
