// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes256CbcDecryptKernel_mergeResult_128u_4u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        msgNumStrm_dout,
        msgNumStrm_empty_n,
        msgNumStrm_read,
        taskNumStrm_dout,
        taskNumStrm_empty_n,
        taskNumStrm_read,
        outStrm_din,
        outStrm_full_n,
        outStrm_write,
        burstLenStrm_din,
        burstLenStrm_full_n,
        burstLenStrm_write,
        textStrm_V_V_dout,
        textStrm_V_V_empty_n,
        textStrm_V_V_read,
        textStrm_1_V_V_dout,
        textStrm_1_V_V_empty_n,
        textStrm_1_V_V_read,
        textStrm_2_V_V_dout,
        textStrm_2_V_V_empty_n,
        textStrm_2_V_V_read,
        textStrm_3_V_V_dout,
        textStrm_3_V_V_empty_n,
        textStrm_3_V_V_read,
        endTextStrm_V_dout,
        endTextStrm_V_empty_n,
        endTextStrm_V_read,
        endTextStrm_1_V_dout,
        endTextStrm_1_V_empty_n,
        endTextStrm_1_V_read,
        endTextStrm_2_V_dout,
        endTextStrm_2_V_empty_n,
        endTextStrm_2_V_read,
        endTextStrm_3_V_dout,
        endTextStrm_3_V_empty_n,
        endTextStrm_3_V_read,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_pp0_stage0 = 6'd8;
parameter    ap_ST_fsm_state6 = 6'd16;
parameter    ap_ST_fsm_state7 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] msgNumStrm_dout;
input   msgNumStrm_empty_n;
output   msgNumStrm_read;
input  [63:0] taskNumStrm_dout;
input   taskNumStrm_empty_n;
output   taskNumStrm_read;
output  [511:0] outStrm_din;
input   outStrm_full_n;
output   outStrm_write;
output  [31:0] burstLenStrm_din;
input   burstLenStrm_full_n;
output   burstLenStrm_write;
input  [127:0] textStrm_V_V_dout;
input   textStrm_V_V_empty_n;
output   textStrm_V_V_read;
input  [127:0] textStrm_1_V_V_dout;
input   textStrm_1_V_V_empty_n;
output   textStrm_1_V_V_read;
input  [127:0] textStrm_2_V_V_dout;
input   textStrm_2_V_V_empty_n;
output   textStrm_2_V_V_read;
input  [127:0] textStrm_3_V_V_dout;
input   textStrm_3_V_V_empty_n;
output   textStrm_3_V_V_read;
input   endTextStrm_V_dout;
input   endTextStrm_V_empty_n;
output   endTextStrm_V_read;
input   endTextStrm_1_V_dout;
input   endTextStrm_1_V_empty_n;
output   endTextStrm_1_V_read;
input   endTextStrm_2_V_dout;
input   endTextStrm_2_V_empty_n;
output   endTextStrm_2_V_read;
input   endTextStrm_3_V_dout;
input   endTextStrm_3_V_empty_n;
output   endTextStrm_3_V_read;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg msgNumStrm_read;
reg taskNumStrm_read;
reg outStrm_write;
reg[31:0] burstLenStrm_din;
reg burstLenStrm_write;
reg textStrm_V_V_read;
reg textStrm_1_V_V_read;
reg textStrm_2_V_V_read;
reg textStrm_3_V_V_read;
reg endTextStrm_V_read;
reg endTextStrm_1_V_read;
reg endTextStrm_2_V_read;
reg endTextStrm_3_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    msgNumStrm_blk_n;
reg    taskNumStrm_blk_n;
reg    outStrm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    burstLenStrm_blk_n;
reg   [0:0] icmp_ln311_reg_296;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln882_1_fu_197_p2;
wire   [0:0] icmp_ln327_fu_208_p2;
wire    ap_CS_fsm_state7;
reg    textStrm_V_V_blk_n;
reg    textStrm_1_V_V_blk_n;
reg    textStrm_2_V_V_blk_n;
reg    textStrm_3_V_V_blk_n;
reg    endTextStrm_V_blk_n;
wire    ap_CS_fsm_state6;
reg    endTextStrm_1_V_blk_n;
reg    endTextStrm_2_V_blk_n;
reg    endTextStrm_3_V_blk_n;
reg   [63:0] empty_57_reg_171;
reg   [63:0] msgNum_V_reg_255;
reg    ap_block_state1;
reg   [63:0] taskNum_V_reg_260;
reg    ap_predicate_op41_write_state3;
reg    ap_block_state3;
wire   [63:0] add_ln695_fu_202_p2;
reg   [63:0] add_ln695_reg_279;
wire   [0:0] icmp_ln284_fu_214_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] add_ln695_2_fu_219_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln311_fu_225_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [63:0] empty_reg_160;
reg    ap_block_state6;
wire    ap_CS_fsm_state2;
reg   [31:0] burstLen_fu_80;
wire   [31:0] burstLen_1_fu_231_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln882_fu_191_p2;
reg   [5:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((burstLenStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((burstLenStrm_full_n == 1'b0) & (ap_predicate_op41_write_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln882_1_fu_197_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((burstLenStrm_full_n == 1'b0) & (ap_predicate_op41_write_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln882_1_fu_197_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln311_fu_225_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln284_fu_214_p2 == 1'd0))) begin
        burstLen_fu_80 <= burstLen_1_fu_231_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln311_fu_225_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln284_fu_214_p2 == 1'd0)))) begin
        burstLen_fu_80 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln284_fu_214_p2 == 1'd0))) begin
        empty_57_reg_171 <= add_ln695_2_fu_219_p2;
    end else if ((~((burstLenStrm_full_n == 1'b0) & (ap_predicate_op41_write_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln882_1_fu_197_p2 == 1'd0))) begin
        empty_57_reg_171 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_160 <= 64'd0;
    end else if ((~((endTextStrm_3_V_empty_n == 1'b0) | (endTextStrm_2_V_empty_n == 1'b0) | (endTextStrm_1_V_empty_n == 1'b0) | (endTextStrm_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        empty_reg_160 <= add_ln695_reg_279;
    end
end

always @ (posedge ap_clk) begin
    if ((~((burstLenStrm_full_n == 1'b0) & (ap_predicate_op41_write_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln695_reg_279 <= add_ln695_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln284_fu_214_p2 == 1'd0))) begin
        icmp_ln311_reg_296 <= icmp_ln311_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((taskNumStrm_empty_n == 1'b0) | (msgNumStrm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        msgNum_V_reg_255 <= msgNumStrm_dout;
        taskNum_V_reg_260 <= taskNumStrm_dout;
    end
end

always @ (*) begin
    if ((icmp_ln284_fu_214_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((burstLenStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((burstLenStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln311_reg_296 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln327_fu_208_p2 == 1'd0) & (icmp_ln882_1_fu_197_p2 == 1'd1)))) begin
        burstLenStrm_blk_n = burstLenStrm_full_n;
    end else begin
        burstLenStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((burstLenStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        burstLenStrm_din = 32'd0;
    end else if (((icmp_ln311_reg_296 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        burstLenStrm_din = 32'd128;
    end else if ((~((burstLenStrm_full_n == 1'b0) & (ap_predicate_op41_write_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (ap_predicate_op41_write_state3 == 1'b1))) begin
        burstLenStrm_din = burstLen_fu_80;
    end else begin
        burstLenStrm_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln311_reg_296 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((burstLenStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | (~((burstLenStrm_full_n == 1'b0) & (ap_predicate_op41_write_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (ap_predicate_op41_write_state3 == 1'b1)))) begin
        burstLenStrm_write = 1'b1;
    end else begin
        burstLenStrm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        endTextStrm_1_V_blk_n = endTextStrm_1_V_empty_n;
    end else begin
        endTextStrm_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((endTextStrm_3_V_empty_n == 1'b0) | (endTextStrm_2_V_empty_n == 1'b0) | (endTextStrm_1_V_empty_n == 1'b0) | (endTextStrm_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        endTextStrm_1_V_read = 1'b1;
    end else begin
        endTextStrm_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        endTextStrm_2_V_blk_n = endTextStrm_2_V_empty_n;
    end else begin
        endTextStrm_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((endTextStrm_3_V_empty_n == 1'b0) | (endTextStrm_2_V_empty_n == 1'b0) | (endTextStrm_1_V_empty_n == 1'b0) | (endTextStrm_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        endTextStrm_2_V_read = 1'b1;
    end else begin
        endTextStrm_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        endTextStrm_3_V_blk_n = endTextStrm_3_V_empty_n;
    end else begin
        endTextStrm_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((endTextStrm_3_V_empty_n == 1'b0) | (endTextStrm_2_V_empty_n == 1'b0) | (endTextStrm_1_V_empty_n == 1'b0) | (endTextStrm_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        endTextStrm_3_V_read = 1'b1;
    end else begin
        endTextStrm_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        endTextStrm_V_blk_n = endTextStrm_V_empty_n;
    end else begin
        endTextStrm_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((endTextStrm_3_V_empty_n == 1'b0) | (endTextStrm_2_V_empty_n == 1'b0) | (endTextStrm_1_V_empty_n == 1'b0) | (endTextStrm_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        endTextStrm_V_read = 1'b1;
    end else begin
        endTextStrm_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        msgNumStrm_blk_n = msgNumStrm_empty_n;
    end else begin
        msgNumStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((taskNumStrm_empty_n == 1'b0) | (msgNumStrm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        msgNumStrm_read = 1'b1;
    end else begin
        msgNumStrm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outStrm_blk_n = outStrm_full_n;
    end else begin
        outStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outStrm_write = 1'b1;
    end else begin
        outStrm_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        taskNumStrm_blk_n = taskNumStrm_empty_n;
    end else begin
        taskNumStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((taskNumStrm_empty_n == 1'b0) | (msgNumStrm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        taskNumStrm_read = 1'b1;
    end else begin
        taskNumStrm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        textStrm_1_V_V_blk_n = textStrm_1_V_V_empty_n;
    end else begin
        textStrm_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        textStrm_1_V_V_read = 1'b1;
    end else begin
        textStrm_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        textStrm_2_V_V_blk_n = textStrm_2_V_V_empty_n;
    end else begin
        textStrm_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        textStrm_2_V_V_read = 1'b1;
    end else begin
        textStrm_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        textStrm_3_V_V_blk_n = textStrm_3_V_V_empty_n;
    end else begin
        textStrm_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        textStrm_3_V_V_read = 1'b1;
    end else begin
        textStrm_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        textStrm_V_V_blk_n = textStrm_V_V_empty_n;
    end else begin
        textStrm_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        textStrm_V_V_read = 1'b1;
    end else begin
        textStrm_V_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((taskNumStrm_empty_n == 1'b0) | (msgNumStrm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (icmp_ln882_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((taskNumStrm_empty_n == 1'b0) | (msgNumStrm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (icmp_ln882_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((burstLenStrm_full_n == 1'b0) & (ap_predicate_op41_write_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln882_1_fu_197_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((burstLenStrm_full_n == 1'b0) & (ap_predicate_op41_write_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln882_1_fu_197_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln284_fu_214_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln284_fu_214_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((endTextStrm_3_V_empty_n == 1'b0) | (endTextStrm_2_V_empty_n == 1'b0) | (endTextStrm_1_V_empty_n == 1'b0) | (endTextStrm_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((burstLenStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln695_2_fu_219_p2 = (empty_57_reg_171 + 64'd1);

assign add_ln695_fu_202_p2 = (empty_reg_160 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((endTextStrm_3_V_empty_n == 1'b0) | (endTextStrm_2_V_empty_n == 1'b0) | (endTextStrm_1_V_empty_n == 1'b0) | (endTextStrm_V_empty_n == 1'b0) | (textStrm_3_V_V_empty_n == 1'b0) | (textStrm_2_V_V_empty_n == 1'b0) | (textStrm_1_V_V_empty_n == 1'b0) | (textStrm_V_V_empty_n == 1'b0) | (outStrm_full_n == 1'b0) | ((icmp_ln311_reg_296 == 1'd1) & (burstLenStrm_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((endTextStrm_3_V_empty_n == 1'b0) | (endTextStrm_2_V_empty_n == 1'b0) | (endTextStrm_1_V_empty_n == 1'b0) | (endTextStrm_V_empty_n == 1'b0) | (textStrm_3_V_V_empty_n == 1'b0) | (textStrm_2_V_V_empty_n == 1'b0) | (textStrm_1_V_V_empty_n == 1'b0) | (textStrm_V_V_empty_n == 1'b0) | (outStrm_full_n == 1'b0) | ((icmp_ln311_reg_296 == 1'd1) & (burstLenStrm_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((endTextStrm_3_V_empty_n == 1'b0) | (endTextStrm_2_V_empty_n == 1'b0) | (endTextStrm_1_V_empty_n == 1'b0) | (endTextStrm_V_empty_n == 1'b0) | (textStrm_3_V_V_empty_n == 1'b0) | (textStrm_2_V_V_empty_n == 1'b0) | (textStrm_1_V_V_empty_n == 1'b0) | (textStrm_V_V_empty_n == 1'b0) | (outStrm_full_n == 1'b0) | ((icmp_ln311_reg_296 == 1'd1) & (burstLenStrm_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((taskNumStrm_empty_n == 1'b0) | (msgNumStrm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((burstLenStrm_full_n == 1'b0) & (ap_predicate_op41_write_state3 == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((endTextStrm_3_V_empty_n == 1'b0) | (endTextStrm_2_V_empty_n == 1'b0) | (endTextStrm_1_V_empty_n == 1'b0) | (endTextStrm_V_empty_n == 1'b0) | (textStrm_3_V_V_empty_n == 1'b0) | (textStrm_2_V_V_empty_n == 1'b0) | (textStrm_1_V_V_empty_n == 1'b0) | (textStrm_V_V_empty_n == 1'b0) | (outStrm_full_n == 1'b0) | ((icmp_ln311_reg_296 == 1'd1) & (burstLenStrm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state6 = ((endTextStrm_3_V_empty_n == 1'b0) | (endTextStrm_2_V_empty_n == 1'b0) | (endTextStrm_1_V_empty_n == 1'b0) | (endTextStrm_V_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (textStrm_V_V_blk_n & textStrm_3_V_V_blk_n & textStrm_2_V_V_blk_n & textStrm_1_V_V_blk_n & taskNumStrm_blk_n & outStrm_blk_n & msgNumStrm_blk_n & endTextStrm_V_blk_n & endTextStrm_3_V_blk_n & endTextStrm_2_V_blk_n & endTextStrm_1_V_blk_n & burstLenStrm_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

always @ (*) begin
    ap_predicate_op41_write_state3 = ((icmp_ln327_fu_208_p2 == 1'd0) & (icmp_ln882_1_fu_197_p2 == 1'd1));
end

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign burstLen_1_fu_231_p2 = (burstLen_fu_80 + 32'd1);

assign icmp_ln284_fu_214_p2 = ((empty_57_reg_171 == msgNum_V_reg_255) ? 1'b1 : 1'b0);

assign icmp_ln311_fu_225_p2 = ((burstLen_fu_80 == 32'd127) ? 1'b1 : 1'b0);

assign icmp_ln327_fu_208_p2 = ((burstLen_fu_80 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln882_1_fu_197_p2 = ((empty_reg_160 == taskNum_V_reg_260) ? 1'b1 : 1'b0);

assign icmp_ln882_fu_191_p2 = ((taskNumStrm_dout == 64'd0) ? 1'b1 : 1'b0);

assign outStrm_din = {{{{textStrm_3_V_V_dout}, {textStrm_2_V_V_dout}}, {textStrm_1_V_V_dout}}, {textStrm_V_V_dout}};

endmodule //aes256CbcDecryptKernel_mergeResult_128u_4u_s
