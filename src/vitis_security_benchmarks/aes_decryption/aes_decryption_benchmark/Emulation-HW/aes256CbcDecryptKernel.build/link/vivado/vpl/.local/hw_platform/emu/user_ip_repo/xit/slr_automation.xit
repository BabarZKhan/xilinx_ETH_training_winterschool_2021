dbg_puts "----------------------------------------------------------------------"
dbg_puts "BEGIN: SLR_AUTOMATION"

set slr_handoff {}

if {[dict get $CONFIG num_slrs] > 1} {

  # ----------------------------------------------------------------------
  # Determine Crossings from each SI/MI interconnect
  # MI Interconnects are in fixed SLRs (co-located with memory bank)

  set slr_crossings {}
  for {set si 0} {$si < [dict get $CONFIG num_si]} {incr si} {
    set si_pidx [format S%.2d_AXI $si]
    
    if {![dict exists $CONFIG addr_info $si_pidx]} {
  #    dbg_puts "Skipping $si_pidx because it has no mapped addresses."
      continue
    }
    
    if {![dict exists $ict $si_pidx]} {
     continue
    }

    set si_ict_name [get_property NAME [dict get $ict $si_pidx]]
    set si_banks [lsort [dict keys [dict get $CONFIG addr_info $si_pidx]]]
    # ASSUMPTION: M*_AXI ports are connected in lexical order of bank mappings
    set mi 0

    if {[llength $si_banks] > 0} {  
      dict set slr_crossings $si_ict_name S00_AXI source_slr [dict get $CONFIG si_slr_map $si_pidx]
      dict set slr_crossings $si_ict_name S00_AXI target_slr [dict get $CONFIG si_slr_map $si_pidx]
    } else {
 #     dbg_puts "No bank mappings detected for $si_pidx: skipping..."
    }
    foreach bank $si_banks {
      set mi_pidx [format M%.2d_AXI $mi]
      set source_slr [dict get $CONFIG si_slr_map $si_pidx]
      set target_slr [dict get $mem_bank_slr_map $bank]
      set si_ict_name [get_property NAME [dict get $ict $si_pidx]]
      set bank_ict_name [get_property NAME [dict get $ict $bank]]
      
      dict set slr_crossings $si_ict_name $mi_pidx source_slr $source_slr
      dict set slr_crossings $si_ict_name $mi_pidx target_slr $target_slr
      
      # Also declare slr config for memory interconnect SI so explict constraints will be generated
      set source_interface [get_bd_intf_pins $si_ict_name/$mi_pidx]

      if {[llength $source_interface] == 1} {
        set attached_interface [find_bd_objs -relation CONNECTED_TO $source_interface]        
        if {[llength $attached_interface] == 1} {
          set attached_interface_name [get_property NAME $attached_interface]
          dict set slr_crossings $bank_ict_name $attached_interface_name source_slr $target_slr
          dict set slr_crossings $bank_ict_name $attached_interface_name target_slr $target_slr
        } else {
          # TODO:
          # ERROR!
          dbg_puts "ERROR: Can't find attached interface of SI interconnect ($si_ict_name/$mi_pidx)!"
        }
      } else {
        # TODO:
        # ERROR!
        dbg_puts "ERROR: Can't find source interface on SI interconnect ($si_ict_name/$mi_pidx)"
      }
      
      regexp {SLR(\d)} $source_slr {} source_slr_idx
      regexp {SLR(\d)} $target_slr {} target_slr_idx
      set slr_crossing_distance [expr abs($source_slr_idx-$target_slr_idx)]
      set slr_pipeline_depth [expr $slr_crossing_distance + 1]
      set node_slr_crossing_config [list AR_SLR_PIPE $slr_pipeline_depth AW_SLR_PIPE $slr_pipeline_depth R_SLR_PIPE $slr_pipeline_depth W_SLR_PIPE $slr_pipeline_depth B_SLR_PIPE $slr_pipeline_depth]  
      set sc [dict get $ict $si_pidx]
      set sc_params [get_property CONFIG.ADVANCED_PROPERTIES $sc]
      # The SLR crossing config is applied in the SI node when SC in 1:1 mode:
      set role M
      if {[dict get $si_dimension $si_pidx] == 1} { 
        set role S 
#        dict set slr_crossings interconnect_$si_pidx $mi_pidx one_to_one true
         dict set slr_crossings $si_ict_name $mi_pidx one_to_one true
      }
      
#      dict set slr_crossings interconnect_$si_pidx $mi_pidx depth $slr_pipeline_depth
       dict set slr_crossings $si_ict_name $mi_pidx depth $slr_pipeline_depth
      
      if {![string equal -nocase $source_slr $target_slr]} {
        dict set sc_params  __view__ timing $role[format %.2d $mi]_Buffer $node_slr_crossing_config
        set_property CONFIG.ADVANCED_PROPERTIES $sc_params $sc        
      }
      incr mi
    }
  }
  
  # Add explicit entries for MI side of memory interconnect instances so that all logic gets locked down in the constraints
  foreach bank [dict keys $mem_bank_utilization] {
    set bank_slr [dict get $mem_bank_slr_map $bank]
    set ict_name [get_property NAME [dict get $ict $bank]]
    dict set slr_crossings $ict_name M00_AXI source_slr $bank_slr
    dict set slr_crossings $ict_name M00_AXI target_slr $bank_slr    
  }

  dbg_brk
  dbg_puts "slr_crossings: $slr_crossings"
  
  dbg_puts "slr_crossings:"
  set formatstr "%-30s %10s %10s -> %10s (crossing depth: %s)"
  dbg_puts [format $formatstr Interconnect Intf Src.slr Dest.slr Depth]
  foreach k [lsort [dict keys $slr_crossings]] {
    foreach intf [lsort [dict keys [dict get $slr_crossings $k]]] { 
      set d -
      if {[dict exists $slr_crossings $k $intf depth]} { set d [dict get $slr_crossings $k $intf depth] }
      dbg_puts [format $formatstr $k $intf [dict get $slr_crossings $k $intf source_slr] [dict get $slr_crossings $k $intf target_slr] $d]          
    }
    dbg_brk
  }
  
  # ----------------------------------------------------------------------
  # Assemble dictionary to handoff to XIT XDC generation via RLD file
  #
  dict set slr_handoff bank_utilization [dict keys $mem_bank_utilization]
  dict set slr_handoff dsa_info [dict get $CONFIG dsa_info]
  dict set slr_handoff ctrl_slr_map [dict get $CONFIG ctrl_slr_map]
  dict for {si slr} [dict get $CONFIG si_slr_map] {
    if {![dict exists $ict $si]} { continue }
    set si_ict_name [get_property NAME [dict get $ict $si]]
    if {[llength [dict get $CONFIG addr_info $si]] > 0 } {
      dict set slr_handoff interconnect_slr_map $si_ict_name $slr      
    } else {
      dbg_puts "Squelch unnecessary slr rld handoff metadata for $si (no mappings, probably replicated port with none of its replication targets mapped by kernel)"
    }
  }
  foreach bank [dict keys $mem_bank_utilization] {
    set bank_ict_name [get_property NAME [dict get $ict $bank]]
     dict set slr_handoff interconnect_slr_map $bank_ict_name [dict get $mem_bank_slr_map $bank]      
   }
  foreach bank [lsort [dict keys $mem_bank_ctrl_intf]] {
    dict set slr_handoff ctrl_cc [string tolower $bank]_ctrl_cc [dict get $mem_bank_slr_map $bank]
  }

  dict for {ict_key ict_obj} $ict {    
    if {[get_property CONFIG.NUM_SI $ict_obj] == 1 && [get_property CONFIG.NUM_MI $ict_obj] == 1} {
      dict set slr_handoff interconnect_one_to_one [get_property NAME $ict_obj] true
    }
  }
  dict set slr_handoff slr_crossings $slr_crossings
  dbg_brk
  dbg_puts "slr_handoff:"
  dict for {k v} $slr_handoff {
   dbg_puts [format "%-20s %s" $k $v]
  }
} else {
  dbg_puts "Disabled"
}
dbg_puts "END: SLR_AUTOMATION"
dbg_puts "----------------------------------------------------------------------"
