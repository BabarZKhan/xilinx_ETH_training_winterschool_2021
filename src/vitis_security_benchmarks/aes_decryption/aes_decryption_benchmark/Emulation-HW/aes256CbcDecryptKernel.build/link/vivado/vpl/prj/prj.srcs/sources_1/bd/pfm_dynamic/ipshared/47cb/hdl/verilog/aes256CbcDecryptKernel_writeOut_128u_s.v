// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes256CbcDecryptKernel_writeOut_128u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        burstLenStrm_dout,
        burstLenStrm_empty_n,
        burstLenStrm_read,
        blockStrm_dout,
        blockStrm_empty_n,
        blockStrm_read,
        m_axi_gmem0_1_AWVALID,
        m_axi_gmem0_1_AWREADY,
        m_axi_gmem0_1_AWADDR,
        m_axi_gmem0_1_AWID,
        m_axi_gmem0_1_AWLEN,
        m_axi_gmem0_1_AWSIZE,
        m_axi_gmem0_1_AWBURST,
        m_axi_gmem0_1_AWLOCK,
        m_axi_gmem0_1_AWCACHE,
        m_axi_gmem0_1_AWPROT,
        m_axi_gmem0_1_AWQOS,
        m_axi_gmem0_1_AWREGION,
        m_axi_gmem0_1_AWUSER,
        m_axi_gmem0_1_WVALID,
        m_axi_gmem0_1_WREADY,
        m_axi_gmem0_1_WDATA,
        m_axi_gmem0_1_WSTRB,
        m_axi_gmem0_1_WLAST,
        m_axi_gmem0_1_WID,
        m_axi_gmem0_1_WUSER,
        m_axi_gmem0_1_ARVALID,
        m_axi_gmem0_1_ARREADY,
        m_axi_gmem0_1_ARADDR,
        m_axi_gmem0_1_ARID,
        m_axi_gmem0_1_ARLEN,
        m_axi_gmem0_1_ARSIZE,
        m_axi_gmem0_1_ARBURST,
        m_axi_gmem0_1_ARLOCK,
        m_axi_gmem0_1_ARCACHE,
        m_axi_gmem0_1_ARPROT,
        m_axi_gmem0_1_ARQOS,
        m_axi_gmem0_1_ARREGION,
        m_axi_gmem0_1_ARUSER,
        m_axi_gmem0_1_RVALID,
        m_axi_gmem0_1_RREADY,
        m_axi_gmem0_1_RDATA,
        m_axi_gmem0_1_RLAST,
        m_axi_gmem0_1_RID,
        m_axi_gmem0_1_RUSER,
        m_axi_gmem0_1_RRESP,
        m_axi_gmem0_1_BVALID,
        m_axi_gmem0_1_BREADY,
        m_axi_gmem0_1_BRESP,
        m_axi_gmem0_1_BID,
        m_axi_gmem0_1_BUSER,
        ptr_dout,
        ptr_empty_n,
        ptr_read,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 72'd1;
parameter    ap_ST_fsm_state2 = 72'd2;
parameter    ap_ST_fsm_state3 = 72'd4;
parameter    ap_ST_fsm_pp0_stage0 = 72'd8;
parameter    ap_ST_fsm_state7 = 72'd16;
parameter    ap_ST_fsm_state8 = 72'd32;
parameter    ap_ST_fsm_state9 = 72'd64;
parameter    ap_ST_fsm_state10 = 72'd128;
parameter    ap_ST_fsm_state11 = 72'd256;
parameter    ap_ST_fsm_state12 = 72'd512;
parameter    ap_ST_fsm_state13 = 72'd1024;
parameter    ap_ST_fsm_state14 = 72'd2048;
parameter    ap_ST_fsm_state15 = 72'd4096;
parameter    ap_ST_fsm_state16 = 72'd8192;
parameter    ap_ST_fsm_state17 = 72'd16384;
parameter    ap_ST_fsm_state18 = 72'd32768;
parameter    ap_ST_fsm_state19 = 72'd65536;
parameter    ap_ST_fsm_state20 = 72'd131072;
parameter    ap_ST_fsm_state21 = 72'd262144;
parameter    ap_ST_fsm_state22 = 72'd524288;
parameter    ap_ST_fsm_state23 = 72'd1048576;
parameter    ap_ST_fsm_state24 = 72'd2097152;
parameter    ap_ST_fsm_state25 = 72'd4194304;
parameter    ap_ST_fsm_state26 = 72'd8388608;
parameter    ap_ST_fsm_state27 = 72'd16777216;
parameter    ap_ST_fsm_state28 = 72'd33554432;
parameter    ap_ST_fsm_state29 = 72'd67108864;
parameter    ap_ST_fsm_state30 = 72'd134217728;
parameter    ap_ST_fsm_state31 = 72'd268435456;
parameter    ap_ST_fsm_state32 = 72'd536870912;
parameter    ap_ST_fsm_state33 = 72'd1073741824;
parameter    ap_ST_fsm_state34 = 72'd2147483648;
parameter    ap_ST_fsm_state35 = 72'd4294967296;
parameter    ap_ST_fsm_state36 = 72'd8589934592;
parameter    ap_ST_fsm_state37 = 72'd17179869184;
parameter    ap_ST_fsm_state38 = 72'd34359738368;
parameter    ap_ST_fsm_state39 = 72'd68719476736;
parameter    ap_ST_fsm_state40 = 72'd137438953472;
parameter    ap_ST_fsm_state41 = 72'd274877906944;
parameter    ap_ST_fsm_state42 = 72'd549755813888;
parameter    ap_ST_fsm_state43 = 72'd1099511627776;
parameter    ap_ST_fsm_state44 = 72'd2199023255552;
parameter    ap_ST_fsm_state45 = 72'd4398046511104;
parameter    ap_ST_fsm_state46 = 72'd8796093022208;
parameter    ap_ST_fsm_state47 = 72'd17592186044416;
parameter    ap_ST_fsm_state48 = 72'd35184372088832;
parameter    ap_ST_fsm_state49 = 72'd70368744177664;
parameter    ap_ST_fsm_state50 = 72'd140737488355328;
parameter    ap_ST_fsm_state51 = 72'd281474976710656;
parameter    ap_ST_fsm_state52 = 72'd562949953421312;
parameter    ap_ST_fsm_state53 = 72'd1125899906842624;
parameter    ap_ST_fsm_state54 = 72'd2251799813685248;
parameter    ap_ST_fsm_state55 = 72'd4503599627370496;
parameter    ap_ST_fsm_state56 = 72'd9007199254740992;
parameter    ap_ST_fsm_state57 = 72'd18014398509481984;
parameter    ap_ST_fsm_state58 = 72'd36028797018963968;
parameter    ap_ST_fsm_state59 = 72'd72057594037927936;
parameter    ap_ST_fsm_state60 = 72'd144115188075855872;
parameter    ap_ST_fsm_state61 = 72'd288230376151711744;
parameter    ap_ST_fsm_state62 = 72'd576460752303423488;
parameter    ap_ST_fsm_state63 = 72'd1152921504606846976;
parameter    ap_ST_fsm_state64 = 72'd2305843009213693952;
parameter    ap_ST_fsm_state65 = 72'd4611686018427387904;
parameter    ap_ST_fsm_state66 = 72'd9223372036854775808;
parameter    ap_ST_fsm_state67 = 72'd18446744073709551616;
parameter    ap_ST_fsm_state68 = 72'd36893488147419103232;
parameter    ap_ST_fsm_state69 = 72'd73786976294838206464;
parameter    ap_ST_fsm_state70 = 72'd147573952589676412928;
parameter    ap_ST_fsm_state71 = 72'd295147905179352825856;
parameter    ap_ST_fsm_state72 = 72'd590295810358705651712;
parameter    ap_ST_fsm_state73 = 72'd1180591620717411303424;
parameter    ap_ST_fsm_state74 = 72'd2361183241434822606848;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] burstLenStrm_dout;
input   burstLenStrm_empty_n;
output   burstLenStrm_read;
input  [511:0] blockStrm_dout;
input   blockStrm_empty_n;
output   blockStrm_read;
output   m_axi_gmem0_1_AWVALID;
input   m_axi_gmem0_1_AWREADY;
output  [63:0] m_axi_gmem0_1_AWADDR;
output  [0:0] m_axi_gmem0_1_AWID;
output  [31:0] m_axi_gmem0_1_AWLEN;
output  [2:0] m_axi_gmem0_1_AWSIZE;
output  [1:0] m_axi_gmem0_1_AWBURST;
output  [1:0] m_axi_gmem0_1_AWLOCK;
output  [3:0] m_axi_gmem0_1_AWCACHE;
output  [2:0] m_axi_gmem0_1_AWPROT;
output  [3:0] m_axi_gmem0_1_AWQOS;
output  [3:0] m_axi_gmem0_1_AWREGION;
output  [0:0] m_axi_gmem0_1_AWUSER;
output   m_axi_gmem0_1_WVALID;
input   m_axi_gmem0_1_WREADY;
output  [511:0] m_axi_gmem0_1_WDATA;
output  [63:0] m_axi_gmem0_1_WSTRB;
output   m_axi_gmem0_1_WLAST;
output  [0:0] m_axi_gmem0_1_WID;
output  [0:0] m_axi_gmem0_1_WUSER;
output   m_axi_gmem0_1_ARVALID;
input   m_axi_gmem0_1_ARREADY;
output  [63:0] m_axi_gmem0_1_ARADDR;
output  [0:0] m_axi_gmem0_1_ARID;
output  [31:0] m_axi_gmem0_1_ARLEN;
output  [2:0] m_axi_gmem0_1_ARSIZE;
output  [1:0] m_axi_gmem0_1_ARBURST;
output  [1:0] m_axi_gmem0_1_ARLOCK;
output  [3:0] m_axi_gmem0_1_ARCACHE;
output  [2:0] m_axi_gmem0_1_ARPROT;
output  [3:0] m_axi_gmem0_1_ARQOS;
output  [3:0] m_axi_gmem0_1_ARREGION;
output  [0:0] m_axi_gmem0_1_ARUSER;
input   m_axi_gmem0_1_RVALID;
output   m_axi_gmem0_1_RREADY;
input  [511:0] m_axi_gmem0_1_RDATA;
input   m_axi_gmem0_1_RLAST;
input  [0:0] m_axi_gmem0_1_RID;
input  [0:0] m_axi_gmem0_1_RUSER;
input  [1:0] m_axi_gmem0_1_RRESP;
input   m_axi_gmem0_1_BVALID;
output   m_axi_gmem0_1_BREADY;
input  [1:0] m_axi_gmem0_1_BRESP;
input  [0:0] m_axi_gmem0_1_BID;
input  [0:0] m_axi_gmem0_1_BUSER;
input  [63:0] ptr_dout;
input   ptr_empty_n;
output   ptr_read;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg burstLenStrm_read;
reg blockStrm_read;
reg m_axi_gmem0_1_AWVALID;
reg m_axi_gmem0_1_WVALID;
reg m_axi_gmem0_1_BREADY;
reg ptr_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [71:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    burstLenStrm_blk_n;
wire    ap_CS_fsm_state74;
reg    blockStrm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln343_reg_230;
reg    gmem0_1_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    gmem0_1_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln343_reg_230_pp0_iter1_reg;
reg    gmem0_1_blk_n_B;
reg    ptr_blk_n;
reg   [31:0] j_reg_129;
reg   [63:0] ptr_read_reg_201;
reg    ap_block_state1;
wire   [127:0] add_ln695_fu_146_p2;
reg   [127:0] add_ln695_reg_214;
wire    ap_CS_fsm_state2;
reg   [57:0] trunc_ln_reg_219;
wire   [0:0] icmp_ln341_fu_140_p2;
wire   [0:0] icmp_ln343_fu_189_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] j_1_fu_195_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [511:0] blockStrm_read_reg_239;
reg    ap_block_state74;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [127:0] empty_reg_107;
reg   [31:0] bLen_1_reg_118;
wire  signed [63:0] sext_ln343_fu_179_p1;
reg    ap_block_pp0_stage0_01001;
wire   [50:0] trunc_ln341_fu_152_p1;
wire   [63:0] shl_ln_fu_156_p3;
wire   [63:0] empty_43_fu_164_p2;
reg   [71:0] ap_NS_fsm;
wire    ap_ext_blocking_cur_n;
wire    ap_int_blocking_cur_n;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 72'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln341_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (m_axi_gmem0_1_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state3) & (m_axi_gmem0_1_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((burstLenStrm_empty_n == 1'b0) | (m_axi_gmem0_1_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state74))) begin
        empty_reg_107 <= add_ln695_reg_214;
    end else if ((~((burstLenStrm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ptr_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_107 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln343_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_129 <= j_1_fu_195_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (m_axi_gmem0_1_AWREADY == 1'b1))) begin
        j_reg_129 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln695_reg_214 <= add_ln695_fu_146_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((burstLenStrm_empty_n == 1'b0) | (m_axi_gmem0_1_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state74)) | (~((burstLenStrm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ptr_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        bLen_1_reg_118 <= burstLenStrm_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln343_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        blockStrm_read_reg_239 <= blockStrm_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln343_reg_230 <= icmp_ln343_fu_189_p2;
        icmp_ln343_reg_230_pp0_iter1_reg <= icmp_ln343_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if ((~((burstLenStrm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ptr_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_read_reg_201 <= ptr_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln341_fu_140_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln_reg_219 <= {{empty_43_fu_164_p2[63:6]}};
    end
end

always @ (*) begin
    if ((icmp_ln343_fu_189_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln343_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        blockStrm_blk_n = blockStrm_empty_n;
    end else begin
        blockStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln343_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        blockStrm_read = 1'b1;
    end else begin
        blockStrm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        burstLenStrm_blk_n = burstLenStrm_empty_n;
    end else begin
        burstLenStrm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((burstLenStrm_empty_n == 1'b0) | (m_axi_gmem0_1_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state74)) | (~((burstLenStrm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ptr_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        burstLenStrm_read = 1'b1;
    end else begin
        burstLenStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem0_1_blk_n_AW = m_axi_gmem0_1_AWREADY;
    end else begin
        gmem0_1_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        gmem0_1_blk_n_B = m_axi_gmem0_1_BVALID;
    end else begin
        gmem0_1_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln343_reg_230_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem0_1_blk_n_W = m_axi_gmem0_1_WREADY;
    end else begin
        gmem0_1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (m_axi_gmem0_1_AWREADY == 1'b1))) begin
        m_axi_gmem0_1_AWVALID = 1'b1;
    end else begin
        m_axi_gmem0_1_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((burstLenStrm_empty_n == 1'b0) | (m_axi_gmem0_1_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state74))) begin
        m_axi_gmem0_1_BREADY = 1'b1;
    end else begin
        m_axi_gmem0_1_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln343_reg_230_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem0_1_WVALID = 1'b1;
    end else begin
        m_axi_gmem0_1_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_blk_n = ptr_empty_n;
    end else begin
        ptr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((burstLenStrm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ptr_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_read = 1'b1;
    end else begin
        ptr_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((burstLenStrm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ptr_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln341_fu_140_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (m_axi_gmem0_1_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln343_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln343_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            if ((~((burstLenStrm_empty_n == 1'b0) | (m_axi_gmem0_1_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln695_fu_146_p2 = (empty_reg_107 + 128'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd71];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln343_reg_230 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (blockStrm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln343_reg_230 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (blockStrm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln343_reg_230 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (blockStrm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((burstLenStrm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (ptr_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((icmp_ln343_reg_230 == 1'd0) & (blockStrm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((icmp_ln343_reg_230_pp0_iter1_reg == 1'd0) & (m_axi_gmem0_1_WREADY == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state74 = ((burstLenStrm_empty_n == 1'b0) | (m_axi_gmem0_1_BVALID == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_cur_n = (gmem0_1_blk_n_W & gmem0_1_blk_n_B & gmem0_1_blk_n_AW);

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_cur_n = (ptr_blk_n & burstLenStrm_blk_n & blockStrm_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign empty_43_fu_164_p2 = (ptr_read_reg_201 + shl_ln_fu_156_p3);

assign icmp_ln341_fu_140_p2 = ((bLen_1_reg_118 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln343_fu_189_p2 = ((j_reg_129 == bLen_1_reg_118) ? 1'b1 : 1'b0);

assign j_1_fu_195_p2 = (j_reg_129 + 32'd1);

assign m_axi_gmem0_1_ARADDR = 64'd0;

assign m_axi_gmem0_1_ARBURST = 2'd0;

assign m_axi_gmem0_1_ARCACHE = 4'd0;

assign m_axi_gmem0_1_ARID = 1'd0;

assign m_axi_gmem0_1_ARLEN = 32'd0;

assign m_axi_gmem0_1_ARLOCK = 2'd0;

assign m_axi_gmem0_1_ARPROT = 3'd0;

assign m_axi_gmem0_1_ARQOS = 4'd0;

assign m_axi_gmem0_1_ARREGION = 4'd0;

assign m_axi_gmem0_1_ARSIZE = 3'd0;

assign m_axi_gmem0_1_ARUSER = 1'd0;

assign m_axi_gmem0_1_ARVALID = 1'b0;

assign m_axi_gmem0_1_AWADDR = sext_ln343_fu_179_p1;

assign m_axi_gmem0_1_AWBURST = 2'd0;

assign m_axi_gmem0_1_AWCACHE = 4'd0;

assign m_axi_gmem0_1_AWID = 1'd0;

assign m_axi_gmem0_1_AWLEN = bLen_1_reg_118;

assign m_axi_gmem0_1_AWLOCK = 2'd0;

assign m_axi_gmem0_1_AWPROT = 3'd0;

assign m_axi_gmem0_1_AWQOS = 4'd0;

assign m_axi_gmem0_1_AWREGION = 4'd0;

assign m_axi_gmem0_1_AWSIZE = 3'd0;

assign m_axi_gmem0_1_AWUSER = 1'd0;

assign m_axi_gmem0_1_RREADY = 1'b0;

assign m_axi_gmem0_1_WDATA = blockStrm_read_reg_239;

assign m_axi_gmem0_1_WID = 1'd0;

assign m_axi_gmem0_1_WLAST = 1'b0;

assign m_axi_gmem0_1_WSTRB = 64'd18446744073709551615;

assign m_axi_gmem0_1_WUSER = 1'd0;

assign sext_ln343_fu_179_p1 = $signed(trunc_ln_reg_219);

assign shl_ln_fu_156_p3 = {{trunc_ln341_fu_152_p1}, {13'd0}};

assign trunc_ln341_fu_152_p1 = empty_reg_107[50:0];

endmodule //aes256CbcDecryptKernel_writeOut_128u_s
