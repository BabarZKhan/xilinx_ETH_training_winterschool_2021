dbg_puts "----------------------------------------------------------------------"
dbg_puts "BEGIN: GENERATE_BOUNDARY__SI_ADDRESS_SEGMENTS"

if {[info exists env(SDX_HIP_DISABLE_FLOATING_OFFSETS)]} {
  dbg_puts "Floating offsets not in use - calculating fixed offset for segments"
  set proposed_offset 0
  set high 0
  dict for {segment_name segment_config} [dict get $CONFIG segment_map] {
    if {![dict exists $segment_config offset]} {
      dbg_puts "Generating offset for $segment_name"
  
      set range [dict get $segment_config range]
      if {![regexp {(\d+)(\w)} $range {} range_value range_type]} {
        send_msg ERROR 1 "Segment range format incorrect: $range"
        return
      }
  
      set addr_width [clog_range $range]
      set resolved 0
  
      while {!$resolved} {
        set base $proposed_offset
        set high [expr ($base + (1<<$addr_width))-1 ]
  
        # Check for overlaps
        set valid 1
        dict for {n c} [dict get $CONFIG segment_map] {
          set c_range [dict get $c range]
          set c_addr_width [clog_range $c_range]
          if {[dict exists $c offset]} {
            set c_base [dict get $c offset]
            set c_high [expr ($c_base + (1<<$c_addr_width))-1]
  
            if {(($base >= $c_base && $base <= $c_high) ||
                 ($high >= $c_base && $high <= $c_high))} {
              dbg_puts "->>>>> Proposed [format %.16x $base]:[format %.16x $high] overlaps with $n ([format %.16x $c_base]:[format %.16x $c_high])"
              set valid 0
              break
            }
          }          
        }
  
        if {$valid} {
          dbg_puts "->>>>> Valid offset: [format %016.16llx $proposed_offset]"
          dict set CONFIG segment_map $segment_name offset $proposed_offset        
          set resolved 1
        } else {
          set proposed_offset [expr $c_high + 1]
#          dbg_puts "->>>>> Attempting new offset [format %016.16llx $proposed_offset]"
        }
      }
    }
    set proposed_offset [expr $high+1]
  }
  dbg_brk
}

dbg_puts "Creating SI address segments:"
set formatstr "%10s %15s %20s %20s %s"
dbg_puts [format $formatstr INTF SEG_NAME OFFSET RANGE TYPE]
foreach si [get_bd_intf_ports S??_AXI] {
  set si_name [get_property NAME $si]

  dict for {segment_name segment_config} [dict get $CONFIG segment_map] {
    dict with segment_config {
     set access_valid 1
      if {[dict exists $CONFIG advanced_properties resource_access_constraints]} {
        set resource_access_constraints [dict get $CONFIG advanced_properties resource_access_constraints]
        if {[dict exists $resource_access_constraints $si_name]} {
          set si_access_list [dict get $resource_access_constraints $si_name]
          if {[lsearch -exact $si_access_list $segment_name] == -1} {
            dbg_puts [format $formatstr $si_name $segment_name - - "access disabled"]
            set access_valid 0
          }
        }
      }
      if {$access_valid} {
        if {[info exists env(SDX_HIP_DISABLE_FLOATING_OFFSETS)] || [string match "M*_AXI_MEM*" $segment_name]} {
          dbg_puts [format $formatstr $si_name $segment_name [format 0x%.16x $offset] $range memory]
          set DDR4_MEM [::bd::addr_func create_boundary_addrblk $offset $range $si $segment_name memory]        
        } else {
          dbg_puts [format $formatstr $si_name $segment_name floating $range memory]
          set DDR4_MEM [::bd::addr_func create_boundary_addrblk "0" $range $si $segment_name memory]        
        }
      }
    }
  }
  dbg_brk
}

# ----------------------------------------------------------------------
# Dynamically generate control register segments
if {[dict exists $CONFIG ctrl_segment_map]} {

    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # TODO:   Is this still needed?
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    if {[info exists env(SDX_HIP_USE_STATIC_CTRL_SEGMENT_MAP)]} {
      dbg_puts "Overriding ctrl_segment_map"
      if {[dict exists $CONFIG ctrl_segment_map]} {
        dbg_puts "WAS: [dict get $CONFIG ctrl_segment_map]"
      }
      dict set CONFIG ctrl_segment_map {DDR4_MEM00_CTRL 64K DDR4_MEM01_CTRL 64K DDR4_MEM02_CTRL 64K DDR4_MEM03_CTRL 64K}  
      dbg_puts "NOW: [dict get $CONFIG ctrl_segment_map]"
    }

    set i 0
    set si [get_bd_intf_port S_AXI_CTRL]
    foreach bank [lsort [dict keys [dict get $CONFIG ctrl_segment_map]]] {
      set segment_name ${bank}_CTRL
      # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      # TODO: REmove when CSC's updates are checked in
      # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      set offset [expr 0x10000 * $i]
      set range [dict get $CONFIG ctrl_segment_map $bank]
      if {[info exists env(SDX_HIP_DISABLE_FLOATING_OFFSETS)]} {
        dbg_puts [format $formatstr $segment_name [get_property NAME $si] [format 0x%.16x $offset] $range register]
        set DDR4_MEM_CTRL [::bd::addr_func create_boundary_addrblk $offset $range $si $segment_name register]
      } else {
        dbg_puts [format $formatstr $segment_name [get_property NAME $si] floating $range register]
        set DDR4_MEM_CTRL [::bd::addr_func create_boundary_addrblk "0" $range $si $segment_name register]
      }

      incr i
  }
}

dbg_puts "END: GENERATE_BOUNDARY__SI_ADDRESS_SEGMENTS"
dbg_puts "----------------------------------------------------------------------"
