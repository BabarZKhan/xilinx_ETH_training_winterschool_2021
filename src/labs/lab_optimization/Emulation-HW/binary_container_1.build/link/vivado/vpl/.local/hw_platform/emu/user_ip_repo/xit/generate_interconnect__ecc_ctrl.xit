dbg_puts "----------------------------------------------------------------------"
dbg_puts "BEGIN: GENERATE_INTERCONNECT__ECC_CTRL"

# ----------------------------------------------------------------------
# Ctrl (ECC Peripheral) Interface Interconnect
#
set num_ctrl_intf [llength [dict keys $mem_bank_ctrl_intf]]
dbg_puts "mem_bank_ctrl_intf: $mem_bank_ctrl_intf"
dbg_puts "num_ctrl_intf: $num_ctrl_intf"

if {$num_ctrl_intf > 0} {
  set ctrl_port [get_bd_intf_ports S_AXI_CTRL]

  set ctrl_port_clock_key [dict get $CONFIG si_clk_keys_info S_AXI_CTRL]
  #set ctrl_port_clock_key [get_clock_key $ctrl_port]
  set ctrl_port_clock_source [get_bd_ports [dict get $clock_key_map $ctrl_port_clock_key]]

  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  # TODO: resolve psr var name dependency 
  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  connect_bd_net [get_bd_ports /aresetn] [get_bd_pins $psr_ctrl_interconnect/ext_reset_in]
  connect_bd_net $ctrl_port_clock_source [get_bd_pins $psr_ctrl_interconnect/slowest_sync_clk]
  dict set hierarchy memory $psr_ctrl_interconnect $psr_ctrl_interconnect

  if {$num_ctrl_intf > 0} {
    set ctrl_interconnect_params [list CONFIG.NUM_SI 1 CONFIG.NUM_MI $num_ctrl_intf]

    # ----------------------------------------------------------------------
    # Strategy only applies in 1:N mode
    if {$num_ctrl_intf > 1} { lappend ctrl_interconnect_params CONFIG.STRATEGY 1 }

    if {[info exists (SDX_HIP_USE_APPCORE_FOR_CTRL_INTERCONNECT)]} {
      # ----------------------------------------------------------------------
      # Use axi_interconnect for control interconnect
      set ctrl_interconnect [create_bd_cell -vlnv xilinx.com:ip:axi_interconnect:2.1 interconnect_ddrmem_ctrl -set_params $ctrl_interconnect_params]
      dict set hierarchy memory $ctrl_interconnect $ctrl_interconnect
      connect_bd_intf_net $ctrl_port [get_bd_intf_pins $ctrl_interconnect/S00_AXI]
      connect_bd_net $ctrl_port_clock_source [get_bd_pins $ctrl_interconnect/aclk] [get_bd_pins $ctrl_interconnect/S00_ACLK]
    
      connect_bd_net \
          [get_bd_pins $psr_ctrl_interconnect/interconnect_aresetn] \
          [get_bd_pins $ctrl_interconnect/ARESETN] \
          [get_bd_pins $ctrl_interconnect/S00_ARESETN]
    } else {
      # ----------------------------------------------------------------------
      # Use axi_crossbar or MMU for control interconnect
       
      if {$num_ctrl_intf > 1} {
        set ctrl_interconnect [create_bd_cell -vlnv xilinx.com:ip:axi_crossbar:2.1 interconnect_ddrmem_ctrl -set_params $ctrl_interconnect_params]        
      } else {
        set ctrl_interconnect [create_bd_cell -vlnv xilinx.com:ip:axi_mmu:2.1 interconnect_ddrmem_ctrl]
      }
      dict set hierarchy memory $ctrl_interconnect $ctrl_interconnect
      set ctrl_port [get_bd_intf_ports S_AXI_CTRL]
      set ctrl_port_clock_key [dict get $CONFIG si_clk_keys_info S_AXI_CTRL]
      set ctrl_port_clock_source [get_bd_ports [dict get $clock_key_map $ctrl_port_clock_key]]

      connect_bd_intf_net $ctrl_port [get_bd_intf_pins $ctrl_interconnect/S*_AXI]
      connect_bd_net $ctrl_port_clock_source [get_bd_pins $ctrl_interconnect/aclk] 

      connect_bd_net \
          [get_bd_pins $psr_ctrl_interconnect/interconnect_aresetn] \
          [get_bd_pins $ctrl_interconnect/ARESETN] 
    }

    dict for {bank intf} $mem_bank_ctrl_intf {
      set clock_source $ctrl_port_clock_source
      set reset_source [get_bd_pins $psr_ctrl_interconnect/interconnect_aresetn]

      set mi [find_first_unconnected_intf [get_bd_intf_pins $ctrl_interconnect/M*_AXI]]
      regexp {(\d\d)} $mi {} mi_idx
      connect_bd_intf_net $mi $intf

      if {[info exists env(SDX_HIP_USE_APPCORE_FOR_CTRL_INTERCONNECT)]} {
        connect_bd_net $clock_source [get_bd_pins $ctrl_interconnect/M${mi_idx}_ACLK] 
        connect_bd_net $reset_source [get_bd_pins $ctrl_interconnect/M${mi_idx}_ARESETN]
      }
    }
  }
} else {
  set ctrl_port [get_bd_intf_ports -quiet S_AXI_CTRL]
  if {[llength $ctrl_port] == 1} {
    dbg_puts "No control port slaves available - inserting AXI MMU to ensure DECERR response to invalid accesses"
    set ctrl_interconnect [create_bd_cell -vlnv xilinx.com:ip:axi_mmu:2.1  interconnect_ddrmem_ctrl]
    dict set hierarchy memory $ctrl_interconnect $ctrl_interconnect
    set ctrl_port_clock_key [dict get $CONFIG si_clk_keys_info S_AXI_CTRL]
    set ctrl_port_clock_source [get_bd_ports [dict get $clock_key_map $ctrl_port_clock_key]]  
    connect_bd_intf_net $ctrl_port [get_bd_intf_pins $ctrl_interconnect/S*_AXI]
    connect_bd_net $ctrl_port_clock_source [get_bd_pins $ctrl_interconnect/aclk] 
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # TODO: resolve psr var name dependency 
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    connect_bd_net [get_bd_ports /aresetn] [get_bd_pins $psr_ctrl_interconnect/ext_reset_in]
    connect_bd_net $ctrl_port_clock_source [get_bd_pins $psr_ctrl_interconnect/slowest_sync_clk]
    dict set hierarchy memory $psr_ctrl_interconnect $psr_ctrl_interconnect
    set reset_source [get_bd_pins $psr_ctrl_interconnect/interconnect_aresetn]
    connect_bd_net $reset_source [get_bd_pins $ctrl_interconnect/ARESETN]     
  } else {
    dbg_puts "No control port - removing associated PSR to avoid clk issues"
    delete_bd_objs $psr_ctrl_interconnect
  }
}

dbg_puts "END: GENERATE_INTERCONNECT__ECC_CTRL"
dbg_puts "----------------------------------------------------------------------"

