dbg_puts "----------------------------------------------------------------------"
dbg_puts "BEGIN: GENERATE_MEMORY__DDR4"

foreach bank [dict keys $mem_bank_utilization DDR4*] {
  dbg_puts "Generating: $bank"
  set ddr4_inst_name [string tolower $bank]

  # ----------------------------------------------------------------------
  # MIG Instance Generation
  regexp {(\d\d)} $bank {} ddr4_inst_idx
  set ddr4 [dict get $mem_bank_component_map $bank]
  set ddrmem [ create_bd_cell -type ip -vlnv xilinx.com:ip:ddr4 $ddr4_inst_name ]

  dict set hierarchy memory $ddrmem $ddrmem

  set ddrmem_preset [dict get $CONFIG board_info $ddr4 preset]

  set ddr_valid_properties [list_property $ddrmem]
  set filtered_preset {}

  # Presets can't currently be trusted:
  foreach {p v} $ddrmem_preset {
    if {[lsearch $ddr_valid_properties $p] != -1} {
      lappend filtered_preset $p $v
    } else {
      send_msg CRITICAL_WARNING 1 "Board Preset ($p $v) for $bank is not a valid property"
    }
  }
#  dbg_puts "ddr board info (ddr: $ddr4): [dict get $CONFIG board_info $ddr4]"

  # The board interface selections for the memory controller are missing from the
  # KCU1500 preset definitions so use the information from the board API to reconstitute the parameter assignments
  set ddrmem_component_intf [dict get $CONFIG board_info $ddr4 ddr_component_intf]
  set ddrmem_clock_intf [dict get $CONFIG board_info $ddr4 ddr_clock_intf]

  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  # TODO: lookup ASSOCIATED_PARAMETER from board interface instances
  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  dict set filtered_preset CONFIG.C0_DDR4_BOARD_INTERFACE $ddrmem_component_intf
  dict set filtered_preset CONFIG.C0_CLOCK_BOARD_INTERFACE $ddrmem_clock_intf

  set_property -quiet -dict $filtered_preset $ddrmem

  dict set mem_bank_ddr_inst $bank $ddrmem
  dict set mem_bank_data_intf $bank [get_bd_intf_pins $ddrmem/C0_DDR4_S_AXI]

  set ddr_ctrl_intf [get_bd_intf_pins -quiet $ddrmem/C0_DDR4_S_AXI_CTRL]
  if {[llength $ddr_ctrl_intf] == 1} {
    dict set mem_bank_ctrl_intf $bank $ddr_ctrl_intf
  }

  # ----------------------------------------------------------------------  
  # Single-ended vs DIFF-Clock Connections
  if {[llength [get_bd_intf_pins -quiet $ddrmem/C0_SYS_CLK]] == 1} {
    #dbg_puts "Found $ddrmem/C0_SYS_CLK [get_bd_intf_pins $ddrmem/C0_SYS_CLK]"
    connect_bd_intf_net [get_bd_intf_ports DDR4_MEM${ddr4_inst_idx}_DIFF_CLK] [get_bd_intf_pins $ddrmem/C0_SYS_CLK]    
  }
  if {[llength [get_bd_pins -quiet $ddrmem/c0_sys_clk_i]] == 1} {
    #dbg_puts "Found $ddrmem/c0_sys_clk_i [get_bd_intf_pins $ddrmem/C0_SYS_CLK_i]"
    connect_bd_net [get_bd_ports ddr4_mem${ddr4_inst_idx}_clk] [get_bd_pins $ddrmem/c0_sys_clk_i]    
  }

  connect_bd_intf_net [get_bd_intf_ports DDR4_MEM${ddr4_inst_idx}] [get_bd_intf_pins $ddrmem/C0_DDR4]

  # ----------------------------------------------------------------------
  # PSR Generation
  set psrname psr_$ddr4_inst_name
  set psr [create_bd_cell -vlnv xilinx.com:ip:proc_sys_reset:* $psrname]
  dict set hierarchy memory $psr $psr

  # Reset Connections
  connect_bd_net [get_bd_pins $ddrmem/c0_ddr4_ui_clk_sync_rst] [get_bd_pins $psr/ext_reset_in]  
  connect_bd_net [get_bd_pins $psr/interconnect_aresetn] [get_bd_pins $ddrmem/c0_ddr4_aresetn]
  connect_bd_net [get_bd_pins $ddrmem/sys_rst] [get_bd_ports ${ddr4_inst_name}_sys_rst]

  # Clock connections
  connect_bd_net [get_bd_pins $ddrmem/c0_ddr4_ui_clk] [get_bd_pins $psr/slowest_sync_clk] [get_bd_ports ${ddr4_inst_name}_ui_clk]

  dict set mem_bank_aclk $bank [get_bd_pins $ddrmem/c0_ddr4_ui_clk]
  dict set mem_bank_aresetn $bank [get_bd_pins $psr/interconnect_aresetn]

  # ----------------------------------------------------------------------
  # DDR->Interconnect attachment
  set sc [dict get $ict $bank]
  connect_bd_intf_net [get_bd_intf_pins $sc/M00_AXI] [get_bd_intf_pins $ddrmem/C0_DDR4_S_AXI]

  if {[dict exists $CONFIG advanced_properties __experimental_features enable_axi_memory_init]} {
    dbg_puts "BEGIN: ENABLE_AXI_MEMORY_INIT"
    delete_bd_objs [get_bd_intf_nets -of [dict get $mem_bank_data_intf $bank]]
    set mem_init [create_bd_cell -vlnv xilinx.com:ip:axi_memory_init [string tolower ${bank}_memory_init]]
    connect_bd_intf_net [get_bd_intf_pins $mem_init/M_AXI] [dict get $mem_bank_data_intf $bank]
    connect_bd_intf_net [get_bd_intf_pins $mem_init/S_AXI] $sc/M00_AXI
    connect_bd_net [get_bd_pins $mem_init/aclk] [dict get $mem_bank_aclk $bank]
    connect_bd_net [get_bd_pins $mem_init/aresetn] [dict get $mem_bank_aresetn $bank]
    dict set hierarchy memory $mem_init $mem_init
    dbg_puts "END: ENABLE_AXI_MEMORY_INIT"    
  }

  # ECC Interface Clock Conversion
  if {[dict exists $mem_bank_ctrl_intf $bank]} {
    set ctrl_cc [create_bd_cell -vlnv xilinx.com:ip:axi_clock_converter:2.1 [string tolower ${bank}]_ctrl_cc]

    dict set hierarchy memory $ctrl_cc $ctrl_cc

    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # TODO - move this to a toplevel dictionary
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    set ctrl_port [get_bd_intf_ports S_AXI_CTRL]    
    set ctrl_port_clock_key [dict get $CONFIG si_clk_keys_info S_AXI_CTRL]
    set ctrl_port_clock_source [get_bd_ports [dict get $clock_key_map $ctrl_port_clock_key]]
    
    connect_bd_intf_net [get_bd_intf_pins $ctrl_cc/M_AXI] [dict get $mem_bank_ctrl_intf $bank]
    connect_bd_net [get_bd_pins $ctrl_port_clock_source] [get_bd_pins $ctrl_cc/s_axi_aclk]
    
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # TODO: remove direct variable name dependency
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    connect_bd_net [get_bd_pins $psr_ctrl_interconnect/interconnect_aresetn] [get_bd_pins $ctrl_cc/s_axi_aresetn]

    connect_bd_net [get_bd_pins $ctrl_cc/m_axi_aclk] [dict get $mem_bank_aclk $bank]
    connect_bd_net [get_bd_pins $ctrl_cc/m_axi_aresetn] [dict get $mem_bank_aresetn $bank]

    # Update the control interface to the clock converter attachment
    set ctrl_intf [get_bd_intf_pins $ctrl_cc/S_AXI]
    dict set mem_bank_ctrl_intf $bank $ctrl_intf
  }
}

dbg_brk
dbg_puts "Generating calibration status infrastructure:"
# ----------------------------------------------------------------------
# Combine individual calibration signals to single status output bit 
set num_banks [llength [dict keys $mem_bank_utilization DDR4*]]
if {$num_banks > 0} {
  set concat [create_bd_cell -vlnv xilinx.com:ip:xlconcat:2.1 calib_concat]
  dict set hierarchy memory $concat $concat
  set_property CONFIG.NUM_PORTS $num_banks $concat

  foreach ddr_pin [get_bd_pins ddr4_mem*/c0_init_calib_complete] concat_pin [get_bd_pins $concat/In*] {
    if {[llength $ddr_pin] == 1 && [llength $concat_pin] == 1} {
      connect_bd_net $ddr_pin $concat_pin
    } else {
      puts "WARNING: incomplete concat connections: ddr_pin: $ddr_pin concat_pin: $concat_pin"
    }
  }

  set calib_reduce [create_bd_cell -vlnv xilinx.com:ip:util_reduced_logic calib_reduce]
  set_property -dict "CONFIG.C_SIZE $num_banks CONFIG.C_OPERATION and" $calib_reduce
  dict set hierarchy memory $calib_reduce $calib_reduce

  connect_bd_net [get_bd_pins $concat/Dout] [get_bd_pins $calib_reduce/op1]
  connect_bd_net [get_bd_pins $calib_reduce/res] [get_bd_ports ddr4_mem_calib_complete]
}

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# TODO: multi-bit calibration status output
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
if {![info exists env(SDX_HIP_DISABLE_DDR4_MEM_CALIB_VEC)] && [dict get $CONFIG num_ddr4_mem] > 0} {
  dbg_brk
  dbg_puts "Generating multi-bit calibration status infrastructure:"
  # Maximally sized concat input
  set concat [create_bd_cell -vlnv xilinx.com:ip:xlconcat:2.1 calib_vector_concat]
  set_property CONFIG.NUM_PORTS [dict get $CONFIG num_ddr4_mem] $concat
  
  dict set hierarchy memory $concat $concat
  for {set i 0} {$i < [dict get $CONFIG num_ddr4_mem]} {incr i} {
    set idx [format %.2d $i]
    set bank_name DDR4_MEM$idx
    if {[dict exists $mem_bank_utilization $bank_name]} {
      set ddr_pin [get_bd_pins ddr4_mem${idx}/c0_init_calib_complete]
      if {[llength $ddr_pin] != 1} {
        send_msg WARNING 1 "Did not find expected calibration output pin for $bank_name."
        continue
      }
      set concat_pin [get_bd_pins $concat/In$i]
      connect_bd_net $ddr_pin $concat_pin      
    }
  }
  connect_bd_net [get_bd_pins $concat/Dout] [get_bd_ports ddr4_mem_calib_vec]
}

dbg_puts "END: GENERATE_MEMORY__DDR4"
dbg_puts "----------------------------------------------------------------------"

