dbg_puts "----------------------------------------------------------------------"
dbg_puts "BEGIN: GENERATE_RLD"
if {![info exists env(SDX_MSS_DISABLE_SLR_AGGREGATION)]} {
  dbg_brk
  dbg_puts "SLR Handoff for RLD generation"
  dict set slr_handoff bank_utilization [dict keys $mem_bank_utilization]
  dict set slr_handoff dsa_info [dict get $CONFIG dsa_info]
  dict set slr_handoff ctrl_slr_map [dict get $CONFIG ctrl_slr_map]
  dict set slr_handoff interconnect_slr_map [dict get $CONFIG ict_slr_map]
  
#  dict for {si slr} [dict get $CONFIG si_slr_map] {
#    if {![dict exists $ict $si]} { continue }
#    set si_ict_name [get_property NAME [dict get $ict $si]]
#    if {[llength [dict get $CONFIG addr_info $si]] > 0 } {
#      dict set slr_handoff interconnect_slr_map $si_ict_name $slr      
#    } else {
#      dbg_puts "Squelch unnecessary slr rld handoff metadata for $si (no mappings, probably replicated port with none of its replication targets mapped by kernel)"
#    }
#  }
  foreach bank [dict keys $mem_bank_utilization] {
    foreach instance_name [dict get $ict $bank] {
      set instance [get_bd_cells $instance_name]      
      set bank_ict_name [get_property NAME $instance]
      dict set slr_handoff interconnect_slr_map $bank_ict_name [dict get $mem_bank_slr_map $bank]
    }
  }
  foreach bank [lsort [dict keys $mem_bank_ctrl_intf]] {
    dict set slr_handoff ctrl_cc [string tolower $bank]_ctrl_cc [dict get $mem_bank_slr_map $bank]
  }

  dict for {ict_key ict_obj_names} $ict {    
    foreach ict_obj_name $ict_obj_names {
      set ict_obj [get_bd_cells $ict_obj_name]
      if {[get_property CONFIG.NUM_SI $ict_obj] == 1 && [get_property CONFIG.NUM_MI $ict_obj] == 1} {
        dict set slr_handoff interconnect_one_to_one [string tolower [get_property NAME $ict_obj]] true
      }      
    }
  }
  dict set slr_handoff slr_crossings $slr_crossings
  dbg_brk
  dbg_puts "slr_handoff:"
  dict for {k v} $slr_handoff {
   dbg_puts [format "%-20s %s" $k $v]
  }
  
}

dbg_brk
set fn sdx_memory_subsystem.rld
dbg_puts "Write  RLD: $fn"

add_ipfile -fileType elaboratedData $fn

puts_ipfile $fn [string map {\n {}} $slr_handoff]
dbg_puts "slr_handoff: $slr_handoff"
close_ipfile $fn

dbg_puts "END: GENERATE_RLD"
dbg_puts "----------------------------------------------------------------------"
