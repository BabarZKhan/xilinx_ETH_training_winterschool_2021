//File Automatically generated by SystemC Netlister Time
#ifndef PFM_DYNAMIC_SCI_H
#define PFM_DYNAMIC_SCI_H
#include "systemc.h"
#include "xtlm.h"
#include "utils/xtlm_aximm_transview.h"
#include "utils/xtlm_aximm_transaction_logger.h"
#include "utils/xtlm_axis_transaction_logger.h"
#include "pfm_dynamic_dpa_mon0_0_sc.h"
#include "pfm_dynamic_dpa_hub_0_sc.h"
#include "pfm_dynamic_dpa_mon1_0_sc.h"
#include "pfm_dynamic_dpa_mon2_0_sc.h"
#include "pfm_dynamic_dpa_mon3_0_sc.h"
#include "pfm_dynamic_xtlm_simple_intercon_0_0_sc.h"
#include "pfm_dynamic_icn_pass_0_0_sc.h"
#include "pfm_dynamic_memory_subsystem_0_sc.h"
#include "pfm_dynamic_sim_ddr_0_0_sc.h"
#include "pfm_dynamic_icn_pass_1_0_sc.h"
#include "pfm_dynamic_icn_pass_2_0_sc.h"
#include "pfm_dynamic_sim_ddr_2_0_sc.h"
#include "pfm_dynamic_icn_pass_3_0_sc.h"
#include "pfm_dynamic_sim_ddr_3_0_sc.h"

class pfm_dynamic_sci : public xsc::utils::xsc_sim_conn_base {

public:
	//Exported sockets declaration
		xtlm::xtlm_aximm_initiator_socket* C0_DDR_MAXI_0_tlm_aximm_read_socket;;
		xtlm::xtlm_aximm_initiator_socket* C0_DDR_MAXI_0_tlm_aximm_write_socket;;
		xtlm::xtlm_aximm_target_socket* data_M_AXI_4_tlm_aximm_read_socket;;
		xtlm::xtlm_aximm_target_socket* data_M_AXI_4_tlm_aximm_write_socket;;
		xtlm::xtlm_aximm_target_socket* data_M_AXI_0_tlm_aximm_read_socket;;
		xtlm::xtlm_aximm_target_socket* data_M_AXI_0_tlm_aximm_write_socket;;
		xtlm::xtlm_aximm_target_socket* data_M_AXI_3_tlm_aximm_read_socket;;
		xtlm::xtlm_aximm_target_socket* data_M_AXI_3_tlm_aximm_write_socket;;
		xtlm::xtlm_aximm_target_socket* data_M_AXI_1_tlm_aximm_read_socket;;
		xtlm::xtlm_aximm_target_socket* data_M_AXI_1_tlm_aximm_write_socket;;
		xtlm::xtlm_aximm_target_socket* data_M_AXI_2_tlm_aximm_read_socket;;
		xtlm::xtlm_aximm_target_socket* data_M_AXI_2_tlm_aximm_write_socket;;
	
	//Constructor for the module
	pfm_dynamic_sci(const sc_module_name& module_name);
	SC_HAS_PROCESS(pfm_dynamic_sci);
	//Destructor for the module
	~pfm_dynamic_sci();
	
	void initConnModule();

protected:
void before_end_of_elaboration();

private:
	pfm_dynamic_sci(const pfm_dynamic_sci&);
	const pfm_dynamic_sci& operator=(const pfm_dynamic_sci&);
};
#endif
