-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_idct_krnl_idct_dataflow is
port (
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    block_r : IN STD_LOGIC_VECTOR (63 downto 0);
    q : IN STD_LOGIC_VECTOR (63 downto 0);
    voutp : IN STD_LOGIC_VECTOR (63 downto 0);
    ignore_dc : IN STD_LOGIC_VECTOR (31 downto 0);
    blocks : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    block_r_ap_vld : IN STD_LOGIC;
    q_ap_vld : IN STD_LOGIC;
    voutp_ap_vld : IN STD_LOGIC;
    ignore_dc_ap_vld : IN STD_LOGIC;
    blocks_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of krnl_idct_krnl_idct_dataflow is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal krnl_idct_dataflow_entry6_U0_ap_start : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_start_full_n : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_ap_done : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_ap_continue : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_ap_idle : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_ap_ready : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_start_out : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_start_write : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_block_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal krnl_idct_dataflow_entry6_U0_block_out_write : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_q_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal krnl_idct_dataflow_entry6_U0_q_out_write : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_voutp_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal krnl_idct_dataflow_entry6_U0_voutp_out_write : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_ignore_dc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal krnl_idct_dataflow_entry6_U0_ignore_dc_out_write : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_blocks_out_din : STD_LOGIC_VECTOR (30 downto 0);
    signal krnl_idct_dataflow_entry6_U0_blocks_out_write : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_blocks_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal krnl_idct_dataflow_entry6_U0_blocks_out1_write : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_ap_ext_blocking_n : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_ap_str_blocking_n : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_ap_int_blocking_n : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_ap_start : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_ap_done : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_ap_continue : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_ap_idle : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_ap_ready : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_iq4_din : STD_LOGIC_VECTOR (511 downto 0);
    signal read_blocks_ap_uint_512_U0_iq4_write : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_in_r_read : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_ap_ext_blocking_n : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_ap_str_blocking_n : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_ap_int_blocking_n : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_ap_start : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_ap_done : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_ap_continue : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_ap_idle : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_ap_ready : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_out_r_din : STD_LOGIC_VECTOR (511 downto 0);
    signal read_blocks_ap_int_512_U0_out_r_write : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_block_r_read : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_blocks_read : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_ap_ext_blocking_n : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_ap_str_blocking_n : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_ap_int_blocking_n : STD_LOGIC;
    signal krnl_idct_dataflow_Block_split25_proc_U0_ap_start : STD_LOGIC;
    signal krnl_idct_dataflow_Block_split25_proc_U0_ap_done : STD_LOGIC;
    signal krnl_idct_dataflow_Block_split25_proc_U0_ap_continue : STD_LOGIC;
    signal krnl_idct_dataflow_Block_split25_proc_U0_ap_idle : STD_LOGIC;
    signal krnl_idct_dataflow_Block_split25_proc_U0_ap_ready : STD_LOGIC;
    signal krnl_idct_dataflow_Block_split25_proc_U0_ignore_dc_read : STD_LOGIC;
    signal krnl_idct_dataflow_Block_split25_proc_U0_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal krnl_idct_dataflow_Block_split25_proc_U0_ap_ext_blocking_n : STD_LOGIC;
    signal krnl_idct_dataflow_Block_split25_proc_U0_ap_str_blocking_n : STD_LOGIC;
    signal krnl_idct_dataflow_Block_split25_proc_U0_ap_int_blocking_n : STD_LOGIC;
    signal ap_channel_done_icmp_ln331_loc_channel : STD_LOGIC;
    signal icmp_ln331_loc_channel_full_n : STD_LOGIC;
    signal execute_U0_ap_start : STD_LOGIC;
    signal execute_U0_ap_done : STD_LOGIC;
    signal execute_U0_ap_continue : STD_LOGIC;
    signal execute_U0_ap_idle : STD_LOGIC;
    signal execute_U0_ap_ready : STD_LOGIC;
    signal execute_U0_iblock_read : STD_LOGIC;
    signal execute_U0_iq_read : STD_LOGIC;
    signal execute_U0_ivoutp_din : STD_LOGIC_VECTOR (511 downto 0);
    signal execute_U0_ivoutp_write : STD_LOGIC;
    signal execute_U0_ignore_dc : STD_LOGIC;
    signal execute_U0_blocks_read : STD_LOGIC;
    signal execute_U0_blocks_out_din : STD_LOGIC_VECTOR (30 downto 0);
    signal execute_U0_blocks_out_write : STD_LOGIC;
    signal execute_U0_ap_ext_blocking_n : STD_LOGIC;
    signal execute_U0_ap_str_blocking_n : STD_LOGIC;
    signal execute_U0_ap_int_blocking_n : STD_LOGIC;
    signal write_blocks_U0_ap_start : STD_LOGIC;
    signal write_blocks_U0_ap_done : STD_LOGIC;
    signal write_blocks_U0_ap_continue : STD_LOGIC;
    signal write_blocks_U0_ap_idle : STD_LOGIC;
    signal write_blocks_U0_ap_ready : STD_LOGIC;
    signal write_blocks_U0_m_axi_gmem2_AWVALID : STD_LOGIC;
    signal write_blocks_U0_m_axi_gmem2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_blocks_U0_m_axi_gmem2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_blocks_U0_m_axi_gmem2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_blocks_U0_m_axi_gmem2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_blocks_U0_m_axi_gmem2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_blocks_U0_m_axi_gmem2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_blocks_U0_m_axi_gmem2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_blocks_U0_m_axi_gmem2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_blocks_U0_m_axi_gmem2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_blocks_U0_m_axi_gmem2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_blocks_U0_m_axi_gmem2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_blocks_U0_m_axi_gmem2_WVALID : STD_LOGIC;
    signal write_blocks_U0_m_axi_gmem2_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal write_blocks_U0_m_axi_gmem2_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal write_blocks_U0_m_axi_gmem2_WLAST : STD_LOGIC;
    signal write_blocks_U0_m_axi_gmem2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_blocks_U0_m_axi_gmem2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_blocks_U0_m_axi_gmem2_ARVALID : STD_LOGIC;
    signal write_blocks_U0_m_axi_gmem2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_blocks_U0_m_axi_gmem2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_blocks_U0_m_axi_gmem2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_blocks_U0_m_axi_gmem2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_blocks_U0_m_axi_gmem2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_blocks_U0_m_axi_gmem2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_blocks_U0_m_axi_gmem2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_blocks_U0_m_axi_gmem2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_blocks_U0_m_axi_gmem2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_blocks_U0_m_axi_gmem2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_blocks_U0_m_axi_gmem2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_blocks_U0_m_axi_gmem2_RREADY : STD_LOGIC;
    signal write_blocks_U0_m_axi_gmem2_BREADY : STD_LOGIC;
    signal write_blocks_U0_in_r_read : STD_LOGIC;
    signal write_blocks_U0_voutp_read : STD_LOGIC;
    signal write_blocks_U0_blocks_read : STD_LOGIC;
    signal write_blocks_U0_ap_ext_blocking_n : STD_LOGIC;
    signal write_blocks_U0_ap_str_blocking_n : STD_LOGIC;
    signal write_blocks_U0_ap_int_blocking_n : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal block_c_full_n : STD_LOGIC;
    signal block_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal block_c_empty_n : STD_LOGIC;
    signal q_c_full_n : STD_LOGIC;
    signal q_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal q_c_empty_n : STD_LOGIC;
    signal voutp_c_full_n : STD_LOGIC;
    signal voutp_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal voutp_c_empty_n : STD_LOGIC;
    signal ignore_dc_c_full_n : STD_LOGIC;
    signal ignore_dc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ignore_dc_c_empty_n : STD_LOGIC;
    signal blocks_c_full_n : STD_LOGIC;
    signal blocks_c_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal blocks_c_empty_n : STD_LOGIC;
    signal blocks_c13_full_n : STD_LOGIC;
    signal blocks_c13_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal blocks_c13_empty_n : STD_LOGIC;
    signal iq_full_n : STD_LOGIC;
    signal iq_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal iq_empty_n : STD_LOGIC;
    signal iblock_full_n : STD_LOGIC;
    signal iblock_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal iblock_empty_n : STD_LOGIC;
    signal icmp_ln331_loc_channel_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln331_loc_channel_empty_n : STD_LOGIC;
    signal ivoutp_full_n : STD_LOGIC;
    signal ivoutp_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal ivoutp_empty_n : STD_LOGIC;
    signal blocks_c14_full_n : STD_LOGIC;
    signal blocks_c14_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal blocks_c14_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_krnl_idct_dataflow_entry6_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_krnl_idct_dataflow_entry6_U0_ap_ready : STD_LOGIC;
    signal krnl_idct_dataflow_entry6_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_read_blocks_ap_uint_512_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_blocks_ap_uint_512_U0_ap_ready : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_read_blocks_ap_int_512_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_blocks_ap_int_512_U0_ap_ready : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_krnl_idct_dataflow_Block_split25_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_krnl_idct_dataflow_Block_split25_proc_U0_full_n : STD_LOGIC;
    signal start_for_krnl_idct_dataflow_Block_split25_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_krnl_idct_dataflow_Block_split25_proc_U0_empty_n : STD_LOGIC;
    signal start_for_write_blocks_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_blocks_U0_full_n : STD_LOGIC;
    signal start_for_write_blocks_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_blocks_U0_empty_n : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_start_full_n : STD_LOGIC;
    signal read_blocks_ap_uint_512_U0_start_write : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_start_full_n : STD_LOGIC;
    signal read_blocks_ap_int_512_U0_start_write : STD_LOGIC;
    signal krnl_idct_dataflow_Block_split25_proc_U0_start_full_n : STD_LOGIC;
    signal krnl_idct_dataflow_Block_split25_proc_U0_start_write : STD_LOGIC;
    signal execute_U0_start_full_n : STD_LOGIC;
    signal execute_U0_start_write : STD_LOGIC;
    signal write_blocks_U0_start_full_n : STD_LOGIC;
    signal write_blocks_U0_start_write : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;

    component krnl_idct_krnl_idct_dataflow_entry6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        block_r : IN STD_LOGIC_VECTOR (63 downto 0);
        q : IN STD_LOGIC_VECTOR (63 downto 0);
        voutp : IN STD_LOGIC_VECTOR (63 downto 0);
        ignore_dc : IN STD_LOGIC_VECTOR (31 downto 0);
        blocks : IN STD_LOGIC_VECTOR (31 downto 0);
        block_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        block_out_full_n : IN STD_LOGIC;
        block_out_write : OUT STD_LOGIC;
        q_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        q_out_full_n : IN STD_LOGIC;
        q_out_write : OUT STD_LOGIC;
        voutp_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        voutp_out_full_n : IN STD_LOGIC;
        voutp_out_write : OUT STD_LOGIC;
        ignore_dc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ignore_dc_out_full_n : IN STD_LOGIC;
        ignore_dc_out_write : OUT STD_LOGIC;
        blocks_out_din : OUT STD_LOGIC_VECTOR (30 downto 0);
        blocks_out_full_n : IN STD_LOGIC;
        blocks_out_write : OUT STD_LOGIC;
        blocks_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        blocks_out1_full_n : IN STD_LOGIC;
        blocks_out1_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component krnl_idct_read_blocks_ap_uint_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        iq4_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        iq4_full_n : IN STD_LOGIC;
        iq4_write : OUT STD_LOGIC;
        in_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_empty_n : IN STD_LOGIC;
        in_r_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component krnl_idct_read_blocks_ap_int_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        out_r_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        out_r_full_n : IN STD_LOGIC;
        out_r_write : OUT STD_LOGIC;
        block_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        block_r_empty_n : IN STD_LOGIC;
        block_r_read : OUT STD_LOGIC;
        blocks_dout : IN STD_LOGIC_VECTOR (30 downto 0);
        blocks_empty_n : IN STD_LOGIC;
        blocks_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component krnl_idct_krnl_idct_dataflow_Block_split25_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ignore_dc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ignore_dc_empty_n : IN STD_LOGIC;
        ignore_dc_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component krnl_idct_execute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        iblock_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        iblock_empty_n : IN STD_LOGIC;
        iblock_read : OUT STD_LOGIC;
        iq_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        iq_empty_n : IN STD_LOGIC;
        iq_read : OUT STD_LOGIC;
        ivoutp_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        ivoutp_full_n : IN STD_LOGIC;
        ivoutp_write : OUT STD_LOGIC;
        ignore_dc : IN STD_LOGIC;
        blocks_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        blocks_empty_n : IN STD_LOGIC;
        blocks_read : OUT STD_LOGIC;
        blocks_out_din : OUT STD_LOGIC_VECTOR (30 downto 0);
        blocks_out_full_n : IN STD_LOGIC;
        blocks_out_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component krnl_idct_write_blocks IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem2_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_WREADY : IN STD_LOGIC;
        m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RVALID : IN STD_LOGIC;
        m_axi_gmem2_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem2_RLAST : IN STD_LOGIC;
        m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BVALID : IN STD_LOGIC;
        m_axi_gmem2_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        in_r_empty_n : IN STD_LOGIC;
        in_r_read : OUT STD_LOGIC;
        voutp_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        voutp_empty_n : IN STD_LOGIC;
        voutp_read : OUT STD_LOGIC;
        blocks_dout : IN STD_LOGIC_VECTOR (30 downto 0);
        blocks_empty_n : IN STD_LOGIC;
        blocks_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component krnl_idct_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_idct_fifo_w64_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_idct_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_idct_fifo_w31_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (30 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (30 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_idct_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_idct_fifo_w512_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_idct_fifo_w512_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_idct_fifo_w1_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_idct_start_for_krnl_idct_dataflow_Block_split25_proc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_idct_start_for_write_blocks_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    krnl_idct_dataflow_entry6_U0 : component krnl_idct_krnl_idct_dataflow_entry6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => krnl_idct_dataflow_entry6_U0_ap_start,
        start_full_n => krnl_idct_dataflow_entry6_U0_start_full_n,
        ap_done => krnl_idct_dataflow_entry6_U0_ap_done,
        ap_continue => krnl_idct_dataflow_entry6_U0_ap_continue,
        ap_idle => krnl_idct_dataflow_entry6_U0_ap_idle,
        ap_ready => krnl_idct_dataflow_entry6_U0_ap_ready,
        start_out => krnl_idct_dataflow_entry6_U0_start_out,
        start_write => krnl_idct_dataflow_entry6_U0_start_write,
        block_r => block_r,
        q => q,
        voutp => voutp,
        ignore_dc => ignore_dc,
        blocks => blocks,
        block_out_din => krnl_idct_dataflow_entry6_U0_block_out_din,
        block_out_full_n => block_c_full_n,
        block_out_write => krnl_idct_dataflow_entry6_U0_block_out_write,
        q_out_din => krnl_idct_dataflow_entry6_U0_q_out_din,
        q_out_full_n => q_c_full_n,
        q_out_write => krnl_idct_dataflow_entry6_U0_q_out_write,
        voutp_out_din => krnl_idct_dataflow_entry6_U0_voutp_out_din,
        voutp_out_full_n => voutp_c_full_n,
        voutp_out_write => krnl_idct_dataflow_entry6_U0_voutp_out_write,
        ignore_dc_out_din => krnl_idct_dataflow_entry6_U0_ignore_dc_out_din,
        ignore_dc_out_full_n => ignore_dc_c_full_n,
        ignore_dc_out_write => krnl_idct_dataflow_entry6_U0_ignore_dc_out_write,
        blocks_out_din => krnl_idct_dataflow_entry6_U0_blocks_out_din,
        blocks_out_full_n => blocks_c_full_n,
        blocks_out_write => krnl_idct_dataflow_entry6_U0_blocks_out_write,
        blocks_out1_din => krnl_idct_dataflow_entry6_U0_blocks_out1_din,
        blocks_out1_full_n => blocks_c13_full_n,
        blocks_out1_write => krnl_idct_dataflow_entry6_U0_blocks_out1_write,
        ap_ext_blocking_n => krnl_idct_dataflow_entry6_U0_ap_ext_blocking_n,
        ap_str_blocking_n => krnl_idct_dataflow_entry6_U0_ap_str_blocking_n,
        ap_int_blocking_n => krnl_idct_dataflow_entry6_U0_ap_int_blocking_n);

    read_blocks_ap_uint_512_U0 : component krnl_idct_read_blocks_ap_uint_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_blocks_ap_uint_512_U0_ap_start,
        ap_done => read_blocks_ap_uint_512_U0_ap_done,
        ap_continue => read_blocks_ap_uint_512_U0_ap_continue,
        ap_idle => read_blocks_ap_uint_512_U0_ap_idle,
        ap_ready => read_blocks_ap_uint_512_U0_ap_ready,
        m_axi_gmem1_AWVALID => read_blocks_ap_uint_512_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => read_blocks_ap_uint_512_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => read_blocks_ap_uint_512_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => read_blocks_ap_uint_512_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => read_blocks_ap_uint_512_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => read_blocks_ap_uint_512_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => read_blocks_ap_uint_512_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => read_blocks_ap_uint_512_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => read_blocks_ap_uint_512_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => read_blocks_ap_uint_512_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => read_blocks_ap_uint_512_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => read_blocks_ap_uint_512_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => read_blocks_ap_uint_512_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => read_blocks_ap_uint_512_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => read_blocks_ap_uint_512_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => read_blocks_ap_uint_512_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => read_blocks_ap_uint_512_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => read_blocks_ap_uint_512_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => read_blocks_ap_uint_512_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR => read_blocks_ap_uint_512_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => read_blocks_ap_uint_512_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => read_blocks_ap_uint_512_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => read_blocks_ap_uint_512_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => read_blocks_ap_uint_512_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => read_blocks_ap_uint_512_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => read_blocks_ap_uint_512_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => read_blocks_ap_uint_512_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => read_blocks_ap_uint_512_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => read_blocks_ap_uint_512_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => read_blocks_ap_uint_512_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY => read_blocks_ap_uint_512_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST => m_axi_gmem1_RLAST,
        m_axi_gmem1_RID => m_axi_gmem1_RID,
        m_axi_gmem1_RUSER => m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP => m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => read_blocks_ap_uint_512_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        iq4_din => read_blocks_ap_uint_512_U0_iq4_din,
        iq4_full_n => iq_full_n,
        iq4_write => read_blocks_ap_uint_512_U0_iq4_write,
        in_r_dout => q_c_dout,
        in_r_empty_n => q_c_empty_n,
        in_r_read => read_blocks_ap_uint_512_U0_in_r_read,
        ap_ext_blocking_n => read_blocks_ap_uint_512_U0_ap_ext_blocking_n,
        ap_str_blocking_n => read_blocks_ap_uint_512_U0_ap_str_blocking_n,
        ap_int_blocking_n => read_blocks_ap_uint_512_U0_ap_int_blocking_n);

    read_blocks_ap_int_512_U0 : component krnl_idct_read_blocks_ap_int_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_blocks_ap_int_512_U0_ap_start,
        ap_done => read_blocks_ap_int_512_U0_ap_done,
        ap_continue => read_blocks_ap_int_512_U0_ap_continue,
        ap_idle => read_blocks_ap_int_512_U0_ap_idle,
        ap_ready => read_blocks_ap_int_512_U0_ap_ready,
        m_axi_gmem0_AWVALID => read_blocks_ap_int_512_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => read_blocks_ap_int_512_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => read_blocks_ap_int_512_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => read_blocks_ap_int_512_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => read_blocks_ap_int_512_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => read_blocks_ap_int_512_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => read_blocks_ap_int_512_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => read_blocks_ap_int_512_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => read_blocks_ap_int_512_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => read_blocks_ap_int_512_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => read_blocks_ap_int_512_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => read_blocks_ap_int_512_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => read_blocks_ap_int_512_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => read_blocks_ap_int_512_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => read_blocks_ap_int_512_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => read_blocks_ap_int_512_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => read_blocks_ap_int_512_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => read_blocks_ap_int_512_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => read_blocks_ap_int_512_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR => read_blocks_ap_int_512_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => read_blocks_ap_int_512_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => read_blocks_ap_int_512_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => read_blocks_ap_int_512_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => read_blocks_ap_int_512_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => read_blocks_ap_int_512_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => read_blocks_ap_int_512_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => read_blocks_ap_int_512_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => read_blocks_ap_int_512_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => read_blocks_ap_int_512_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => read_blocks_ap_int_512_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY => read_blocks_ap_int_512_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST => m_axi_gmem0_RLAST,
        m_axi_gmem0_RID => m_axi_gmem0_RID,
        m_axi_gmem0_RUSER => m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP => m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => read_blocks_ap_int_512_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        out_r_din => read_blocks_ap_int_512_U0_out_r_din,
        out_r_full_n => iblock_full_n,
        out_r_write => read_blocks_ap_int_512_U0_out_r_write,
        block_r_dout => block_c_dout,
        block_r_empty_n => block_c_empty_n,
        block_r_read => read_blocks_ap_int_512_U0_block_r_read,
        blocks_dout => blocks_c_dout,
        blocks_empty_n => blocks_c_empty_n,
        blocks_read => read_blocks_ap_int_512_U0_blocks_read,
        ap_ext_blocking_n => read_blocks_ap_int_512_U0_ap_ext_blocking_n,
        ap_str_blocking_n => read_blocks_ap_int_512_U0_ap_str_blocking_n,
        ap_int_blocking_n => read_blocks_ap_int_512_U0_ap_int_blocking_n);

    krnl_idct_dataflow_Block_split25_proc_U0 : component krnl_idct_krnl_idct_dataflow_Block_split25_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => krnl_idct_dataflow_Block_split25_proc_U0_ap_start,
        ap_done => krnl_idct_dataflow_Block_split25_proc_U0_ap_done,
        ap_continue => krnl_idct_dataflow_Block_split25_proc_U0_ap_continue,
        ap_idle => krnl_idct_dataflow_Block_split25_proc_U0_ap_idle,
        ap_ready => krnl_idct_dataflow_Block_split25_proc_U0_ap_ready,
        ignore_dc_dout => ignore_dc_c_dout,
        ignore_dc_empty_n => ignore_dc_c_empty_n,
        ignore_dc_read => krnl_idct_dataflow_Block_split25_proc_U0_ignore_dc_read,
        ap_return => krnl_idct_dataflow_Block_split25_proc_U0_ap_return,
        ap_ext_blocking_n => krnl_idct_dataflow_Block_split25_proc_U0_ap_ext_blocking_n,
        ap_str_blocking_n => krnl_idct_dataflow_Block_split25_proc_U0_ap_str_blocking_n,
        ap_int_blocking_n => krnl_idct_dataflow_Block_split25_proc_U0_ap_int_blocking_n);

    execute_U0 : component krnl_idct_execute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => execute_U0_ap_start,
        ap_done => execute_U0_ap_done,
        ap_continue => execute_U0_ap_continue,
        ap_idle => execute_U0_ap_idle,
        ap_ready => execute_U0_ap_ready,
        iblock_dout => iblock_dout,
        iblock_empty_n => iblock_empty_n,
        iblock_read => execute_U0_iblock_read,
        iq_dout => iq_dout,
        iq_empty_n => iq_empty_n,
        iq_read => execute_U0_iq_read,
        ivoutp_din => execute_U0_ivoutp_din,
        ivoutp_full_n => ivoutp_full_n,
        ivoutp_write => execute_U0_ivoutp_write,
        ignore_dc => execute_U0_ignore_dc,
        blocks_dout => blocks_c13_dout,
        blocks_empty_n => blocks_c13_empty_n,
        blocks_read => execute_U0_blocks_read,
        blocks_out_din => execute_U0_blocks_out_din,
        blocks_out_full_n => blocks_c14_full_n,
        blocks_out_write => execute_U0_blocks_out_write,
        ap_ext_blocking_n => execute_U0_ap_ext_blocking_n,
        ap_str_blocking_n => execute_U0_ap_str_blocking_n,
        ap_int_blocking_n => execute_U0_ap_int_blocking_n);

    write_blocks_U0 : component krnl_idct_write_blocks
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => write_blocks_U0_ap_start,
        ap_done => write_blocks_U0_ap_done,
        ap_continue => write_blocks_U0_ap_continue,
        ap_idle => write_blocks_U0_ap_idle,
        ap_ready => write_blocks_U0_ap_ready,
        m_axi_gmem2_AWVALID => write_blocks_U0_m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY => m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR => write_blocks_U0_m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID => write_blocks_U0_m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN => write_blocks_U0_m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE => write_blocks_U0_m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST => write_blocks_U0_m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK => write_blocks_U0_m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE => write_blocks_U0_m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT => write_blocks_U0_m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS => write_blocks_U0_m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION => write_blocks_U0_m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER => write_blocks_U0_m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID => write_blocks_U0_m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY => m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA => write_blocks_U0_m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB => write_blocks_U0_m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST => write_blocks_U0_m_axi_gmem2_WLAST,
        m_axi_gmem2_WID => write_blocks_U0_m_axi_gmem2_WID,
        m_axi_gmem2_WUSER => write_blocks_U0_m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID => write_blocks_U0_m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY => ap_const_logic_0,
        m_axi_gmem2_ARADDR => write_blocks_U0_m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID => write_blocks_U0_m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN => write_blocks_U0_m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE => write_blocks_U0_m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST => write_blocks_U0_m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK => write_blocks_U0_m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE => write_blocks_U0_m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT => write_blocks_U0_m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS => write_blocks_U0_m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION => write_blocks_U0_m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER => write_blocks_U0_m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID => ap_const_logic_0,
        m_axi_gmem2_RREADY => write_blocks_U0_m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA => ap_const_lv512_lc_1,
        m_axi_gmem2_RLAST => ap_const_logic_0,
        m_axi_gmem2_RID => ap_const_lv1_0,
        m_axi_gmem2_RUSER => ap_const_lv1_0,
        m_axi_gmem2_RRESP => ap_const_lv2_0,
        m_axi_gmem2_BVALID => m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY => write_blocks_U0_m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP => m_axi_gmem2_BRESP,
        m_axi_gmem2_BID => m_axi_gmem2_BID,
        m_axi_gmem2_BUSER => m_axi_gmem2_BUSER,
        in_r_dout => ivoutp_dout,
        in_r_empty_n => ivoutp_empty_n,
        in_r_read => write_blocks_U0_in_r_read,
        voutp_dout => voutp_c_dout,
        voutp_empty_n => voutp_c_empty_n,
        voutp_read => write_blocks_U0_voutp_read,
        blocks_dout => blocks_c14_dout,
        blocks_empty_n => blocks_c14_empty_n,
        blocks_read => write_blocks_U0_blocks_read,
        ap_ext_blocking_n => write_blocks_U0_ap_ext_blocking_n,
        ap_str_blocking_n => write_blocks_U0_ap_str_blocking_n,
        ap_int_blocking_n => write_blocks_U0_ap_int_blocking_n);

    block_c_U : component krnl_idct_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => krnl_idct_dataflow_entry6_U0_block_out_din,
        if_full_n => block_c_full_n,
        if_write => krnl_idct_dataflow_entry6_U0_block_out_write,
        if_dout => block_c_dout,
        if_empty_n => block_c_empty_n,
        if_read => read_blocks_ap_int_512_U0_block_r_read);

    q_c_U : component krnl_idct_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => krnl_idct_dataflow_entry6_U0_q_out_din,
        if_full_n => q_c_full_n,
        if_write => krnl_idct_dataflow_entry6_U0_q_out_write,
        if_dout => q_c_dout,
        if_empty_n => q_c_empty_n,
        if_read => read_blocks_ap_uint_512_U0_in_r_read);

    voutp_c_U : component krnl_idct_fifo_w64_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => krnl_idct_dataflow_entry6_U0_voutp_out_din,
        if_full_n => voutp_c_full_n,
        if_write => krnl_idct_dataflow_entry6_U0_voutp_out_write,
        if_dout => voutp_c_dout,
        if_empty_n => voutp_c_empty_n,
        if_read => write_blocks_U0_voutp_read);

    ignore_dc_c_U : component krnl_idct_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => krnl_idct_dataflow_entry6_U0_ignore_dc_out_din,
        if_full_n => ignore_dc_c_full_n,
        if_write => krnl_idct_dataflow_entry6_U0_ignore_dc_out_write,
        if_dout => ignore_dc_c_dout,
        if_empty_n => ignore_dc_c_empty_n,
        if_read => krnl_idct_dataflow_Block_split25_proc_U0_ignore_dc_read);

    blocks_c_U : component krnl_idct_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => krnl_idct_dataflow_entry6_U0_blocks_out_din,
        if_full_n => blocks_c_full_n,
        if_write => krnl_idct_dataflow_entry6_U0_blocks_out_write,
        if_dout => blocks_c_dout,
        if_empty_n => blocks_c_empty_n,
        if_read => read_blocks_ap_int_512_U0_blocks_read);

    blocks_c13_U : component krnl_idct_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => krnl_idct_dataflow_entry6_U0_blocks_out1_din,
        if_full_n => blocks_c13_full_n,
        if_write => krnl_idct_dataflow_entry6_U0_blocks_out1_write,
        if_dout => blocks_c13_dout,
        if_empty_n => blocks_c13_empty_n,
        if_read => execute_U0_blocks_read);

    iq_U : component krnl_idct_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_blocks_ap_uint_512_U0_iq4_din,
        if_full_n => iq_full_n,
        if_write => read_blocks_ap_uint_512_U0_iq4_write,
        if_dout => iq_dout,
        if_empty_n => iq_empty_n,
        if_read => execute_U0_iq_read);

    iblock_U : component krnl_idct_fifo_w512_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_blocks_ap_int_512_U0_out_r_din,
        if_full_n => iblock_full_n,
        if_write => read_blocks_ap_int_512_U0_out_r_write,
        if_dout => iblock_dout,
        if_empty_n => iblock_empty_n,
        if_read => execute_U0_iblock_read);

    icmp_ln331_loc_channel_U : component krnl_idct_fifo_w1_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => krnl_idct_dataflow_Block_split25_proc_U0_ap_return,
        if_full_n => icmp_ln331_loc_channel_full_n,
        if_write => krnl_idct_dataflow_Block_split25_proc_U0_ap_done,
        if_dout => icmp_ln331_loc_channel_dout,
        if_empty_n => icmp_ln331_loc_channel_empty_n,
        if_read => execute_U0_ap_ready);

    ivoutp_U : component krnl_idct_fifo_w512_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => execute_U0_ivoutp_din,
        if_full_n => ivoutp_full_n,
        if_write => execute_U0_ivoutp_write,
        if_dout => ivoutp_dout,
        if_empty_n => ivoutp_empty_n,
        if_read => write_blocks_U0_in_r_read);

    blocks_c14_U : component krnl_idct_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => execute_U0_blocks_out_din,
        if_full_n => blocks_c14_full_n,
        if_write => execute_U0_blocks_out_write,
        if_dout => blocks_c14_dout,
        if_empty_n => blocks_c14_empty_n,
        if_read => write_blocks_U0_blocks_read);

    start_for_krnl_idct_dataflow_Block_split25_proc_U0_U : component krnl_idct_start_for_krnl_idct_dataflow_Block_split25_proc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_krnl_idct_dataflow_Block_split25_proc_U0_din,
        if_full_n => start_for_krnl_idct_dataflow_Block_split25_proc_U0_full_n,
        if_write => krnl_idct_dataflow_entry6_U0_start_write,
        if_dout => start_for_krnl_idct_dataflow_Block_split25_proc_U0_dout,
        if_empty_n => start_for_krnl_idct_dataflow_Block_split25_proc_U0_empty_n,
        if_read => krnl_idct_dataflow_Block_split25_proc_U0_ap_ready);

    start_for_write_blocks_U0_U : component krnl_idct_start_for_write_blocks_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_write_blocks_U0_din,
        if_full_n => start_for_write_blocks_U0_full_n,
        if_write => krnl_idct_dataflow_entry6_U0_start_write,
        if_dout => start_for_write_blocks_U0_dout,
        if_empty_n => start_for_write_blocks_U0_empty_n,
        if_read => write_blocks_U0_ap_ready);





    ap_sync_reg_krnl_idct_dataflow_entry6_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_krnl_idct_dataflow_entry6_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_krnl_idct_dataflow_entry6_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_krnl_idct_dataflow_entry6_U0_ap_ready <= ap_sync_krnl_idct_dataflow_entry6_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_blocks_ap_int_512_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_read_blocks_ap_int_512_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_blocks_ap_int_512_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_blocks_ap_int_512_U0_ap_ready <= ap_sync_read_blocks_ap_int_512_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_blocks_ap_uint_512_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_read_blocks_ap_uint_512_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_blocks_ap_uint_512_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_blocks_ap_uint_512_U0_ap_ready <= ap_sync_read_blocks_ap_uint_512_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    krnl_idct_dataflow_entry6_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (krnl_idct_dataflow_entry6_U0_ap_ready = ap_const_logic_0))) then 
                krnl_idct_dataflow_entry6_U0_ap_ready_count <= std_logic_vector(unsigned(krnl_idct_dataflow_entry6_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (krnl_idct_dataflow_entry6_U0_ap_ready = ap_const_logic_1))) then 
                krnl_idct_dataflow_entry6_U0_ap_ready_count <= std_logic_vector(unsigned(krnl_idct_dataflow_entry6_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    read_blocks_ap_int_512_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (read_blocks_ap_int_512_U0_ap_ready = ap_const_logic_0))) then 
                read_blocks_ap_int_512_U0_ap_ready_count <= std_logic_vector(unsigned(read_blocks_ap_int_512_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (read_blocks_ap_int_512_U0_ap_ready = ap_const_logic_1))) then 
                read_blocks_ap_int_512_U0_ap_ready_count <= std_logic_vector(unsigned(read_blocks_ap_int_512_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    read_blocks_ap_uint_512_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (read_blocks_ap_uint_512_U0_ap_ready = ap_const_logic_0))) then 
                read_blocks_ap_uint_512_U0_ap_ready_count <= std_logic_vector(unsigned(read_blocks_ap_uint_512_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (read_blocks_ap_uint_512_U0_ap_ready = ap_const_logic_1))) then 
                read_blocks_ap_uint_512_U0_ap_ready_count <= std_logic_vector(unsigned(read_blocks_ap_uint_512_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_channel_done_icmp_ln331_loc_channel <= krnl_idct_dataflow_Block_split25_proc_U0_ap_done;
    ap_done <= write_blocks_U0_ap_done;
    ap_ext_blocking_cur_n <= ap_const_logic_1;
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_ext_blocking_cur_n);
    ap_ext_blocking_sub_n <= (write_blocks_U0_ap_ext_blocking_n and read_blocks_ap_uint_512_U0_ap_ext_blocking_n and read_blocks_ap_int_512_U0_ap_ext_blocking_n and krnl_idct_dataflow_entry6_U0_ap_ext_blocking_n and krnl_idct_dataflow_Block_split25_proc_U0_ap_ext_blocking_n and execute_U0_ap_ext_blocking_n);
    ap_idle <= (write_blocks_U0_ap_idle and read_blocks_ap_uint_512_U0_ap_idle and read_blocks_ap_int_512_U0_ap_idle and krnl_idct_dataflow_entry6_U0_ap_idle and krnl_idct_dataflow_Block_split25_proc_U0_ap_idle and (icmp_ln331_loc_channel_empty_n xor ap_const_logic_1) and execute_U0_ap_idle);
    ap_int_blocking_cur_n <= ap_const_logic_1;
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);
    ap_int_blocking_sub_n <= (write_blocks_U0_ap_int_blocking_n and read_blocks_ap_uint_512_U0_ap_int_blocking_n and read_blocks_ap_int_512_U0_ap_int_blocking_n and krnl_idct_dataflow_entry6_U0_ap_int_blocking_n and krnl_idct_dataflow_Block_split25_proc_U0_ap_int_blocking_n and execute_U0_ap_int_blocking_n);
    ap_ready <= ap_sync_ready;
    ap_str_blocking_cur_n <= ap_const_logic_1;
    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_str_blocking_cur_n);
    ap_str_blocking_sub_n <= (write_blocks_U0_ap_str_blocking_n and read_blocks_ap_uint_512_U0_ap_str_blocking_n and read_blocks_ap_int_512_U0_ap_str_blocking_n and krnl_idct_dataflow_entry6_U0_ap_str_blocking_n and krnl_idct_dataflow_Block_split25_proc_U0_ap_str_blocking_n and execute_U0_ap_str_blocking_n);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= write_blocks_U0_ap_done;
    ap_sync_krnl_idct_dataflow_entry6_U0_ap_ready <= (krnl_idct_dataflow_entry6_U0_ap_ready or ap_sync_reg_krnl_idct_dataflow_entry6_U0_ap_ready);
    ap_sync_read_blocks_ap_int_512_U0_ap_ready <= (read_blocks_ap_int_512_U0_ap_ready or ap_sync_reg_read_blocks_ap_int_512_U0_ap_ready);
    ap_sync_read_blocks_ap_uint_512_U0_ap_ready <= (read_blocks_ap_uint_512_U0_ap_ready or ap_sync_reg_read_blocks_ap_uint_512_U0_ap_ready);
    ap_sync_ready <= (ap_sync_read_blocks_ap_uint_512_U0_ap_ready and ap_sync_read_blocks_ap_int_512_U0_ap_ready and ap_sync_krnl_idct_dataflow_entry6_U0_ap_ready);
    execute_U0_ap_continue <= ap_const_logic_1;
    execute_U0_ap_start <= icmp_ln331_loc_channel_empty_n;
    execute_U0_ignore_dc <= icmp_ln331_loc_channel_dout(0);
    execute_U0_start_full_n <= ap_const_logic_1;
    execute_U0_start_write <= ap_const_logic_0;
    krnl_idct_dataflow_Block_split25_proc_U0_ap_continue <= icmp_ln331_loc_channel_full_n;
    krnl_idct_dataflow_Block_split25_proc_U0_ap_start <= start_for_krnl_idct_dataflow_Block_split25_proc_U0_empty_n;
    krnl_idct_dataflow_Block_split25_proc_U0_start_full_n <= ap_const_logic_1;
    krnl_idct_dataflow_Block_split25_proc_U0_start_write <= ap_const_logic_0;
    krnl_idct_dataflow_entry6_U0_ap_continue <= ap_const_logic_1;
    krnl_idct_dataflow_entry6_U0_ap_start <= ((ap_sync_reg_krnl_idct_dataflow_entry6_U0_ap_ready xor ap_const_logic_1) and ap_start);
    krnl_idct_dataflow_entry6_U0_start_full_n <= (start_for_write_blocks_U0_full_n and start_for_krnl_idct_dataflow_Block_split25_proc_U0_full_n);
    m_axi_gmem0_ARADDR <= read_blocks_ap_int_512_U0_m_axi_gmem0_ARADDR;
    m_axi_gmem0_ARBURST <= read_blocks_ap_int_512_U0_m_axi_gmem0_ARBURST;
    m_axi_gmem0_ARCACHE <= read_blocks_ap_int_512_U0_m_axi_gmem0_ARCACHE;
    m_axi_gmem0_ARID <= read_blocks_ap_int_512_U0_m_axi_gmem0_ARID;
    m_axi_gmem0_ARLEN <= read_blocks_ap_int_512_U0_m_axi_gmem0_ARLEN;
    m_axi_gmem0_ARLOCK <= read_blocks_ap_int_512_U0_m_axi_gmem0_ARLOCK;
    m_axi_gmem0_ARPROT <= read_blocks_ap_int_512_U0_m_axi_gmem0_ARPROT;
    m_axi_gmem0_ARQOS <= read_blocks_ap_int_512_U0_m_axi_gmem0_ARQOS;
    m_axi_gmem0_ARREGION <= read_blocks_ap_int_512_U0_m_axi_gmem0_ARREGION;
    m_axi_gmem0_ARSIZE <= read_blocks_ap_int_512_U0_m_axi_gmem0_ARSIZE;
    m_axi_gmem0_ARUSER <= read_blocks_ap_int_512_U0_m_axi_gmem0_ARUSER;
    m_axi_gmem0_ARVALID <= read_blocks_ap_int_512_U0_m_axi_gmem0_ARVALID;
    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;
    m_axi_gmem0_RREADY <= read_blocks_ap_int_512_U0_m_axi_gmem0_RREADY;
    m_axi_gmem0_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv64_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    m_axi_gmem1_ARADDR <= read_blocks_ap_uint_512_U0_m_axi_gmem1_ARADDR;
    m_axi_gmem1_ARBURST <= read_blocks_ap_uint_512_U0_m_axi_gmem1_ARBURST;
    m_axi_gmem1_ARCACHE <= read_blocks_ap_uint_512_U0_m_axi_gmem1_ARCACHE;
    m_axi_gmem1_ARID <= read_blocks_ap_uint_512_U0_m_axi_gmem1_ARID;
    m_axi_gmem1_ARLEN <= read_blocks_ap_uint_512_U0_m_axi_gmem1_ARLEN;
    m_axi_gmem1_ARLOCK <= read_blocks_ap_uint_512_U0_m_axi_gmem1_ARLOCK;
    m_axi_gmem1_ARPROT <= read_blocks_ap_uint_512_U0_m_axi_gmem1_ARPROT;
    m_axi_gmem1_ARQOS <= read_blocks_ap_uint_512_U0_m_axi_gmem1_ARQOS;
    m_axi_gmem1_ARREGION <= read_blocks_ap_uint_512_U0_m_axi_gmem1_ARREGION;
    m_axi_gmem1_ARSIZE <= read_blocks_ap_uint_512_U0_m_axi_gmem1_ARSIZE;
    m_axi_gmem1_ARUSER <= read_blocks_ap_uint_512_U0_m_axi_gmem1_ARUSER;
    m_axi_gmem1_ARVALID <= read_blocks_ap_uint_512_U0_m_axi_gmem1_ARVALID;
    m_axi_gmem1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_BREADY <= ap_const_logic_0;
    m_axi_gmem1_RREADY <= read_blocks_ap_uint_512_U0_m_axi_gmem1_RREADY;
    m_axi_gmem1_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv64_0;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_WVALID <= ap_const_logic_0;
    m_axi_gmem2_ARADDR <= ap_const_lv64_0;
    m_axi_gmem2_ARBURST <= ap_const_lv2_0;
    m_axi_gmem2_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem2_ARID <= ap_const_lv1_0;
    m_axi_gmem2_ARLEN <= ap_const_lv32_0;
    m_axi_gmem2_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem2_ARPROT <= ap_const_lv3_0;
    m_axi_gmem2_ARQOS <= ap_const_lv4_0;
    m_axi_gmem2_ARREGION <= ap_const_lv4_0;
    m_axi_gmem2_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem2_ARUSER <= ap_const_lv1_0;
    m_axi_gmem2_ARVALID <= ap_const_logic_0;
    m_axi_gmem2_AWADDR <= write_blocks_U0_m_axi_gmem2_AWADDR;
    m_axi_gmem2_AWBURST <= write_blocks_U0_m_axi_gmem2_AWBURST;
    m_axi_gmem2_AWCACHE <= write_blocks_U0_m_axi_gmem2_AWCACHE;
    m_axi_gmem2_AWID <= write_blocks_U0_m_axi_gmem2_AWID;
    m_axi_gmem2_AWLEN <= write_blocks_U0_m_axi_gmem2_AWLEN;
    m_axi_gmem2_AWLOCK <= write_blocks_U0_m_axi_gmem2_AWLOCK;
    m_axi_gmem2_AWPROT <= write_blocks_U0_m_axi_gmem2_AWPROT;
    m_axi_gmem2_AWQOS <= write_blocks_U0_m_axi_gmem2_AWQOS;
    m_axi_gmem2_AWREGION <= write_blocks_U0_m_axi_gmem2_AWREGION;
    m_axi_gmem2_AWSIZE <= write_blocks_U0_m_axi_gmem2_AWSIZE;
    m_axi_gmem2_AWUSER <= write_blocks_U0_m_axi_gmem2_AWUSER;
    m_axi_gmem2_AWVALID <= write_blocks_U0_m_axi_gmem2_AWVALID;
    m_axi_gmem2_BREADY <= write_blocks_U0_m_axi_gmem2_BREADY;
    m_axi_gmem2_RREADY <= ap_const_logic_0;
    m_axi_gmem2_WDATA <= write_blocks_U0_m_axi_gmem2_WDATA;
    m_axi_gmem2_WID <= write_blocks_U0_m_axi_gmem2_WID;
    m_axi_gmem2_WLAST <= write_blocks_U0_m_axi_gmem2_WLAST;
    m_axi_gmem2_WSTRB <= write_blocks_U0_m_axi_gmem2_WSTRB;
    m_axi_gmem2_WUSER <= write_blocks_U0_m_axi_gmem2_WUSER;
    m_axi_gmem2_WVALID <= write_blocks_U0_m_axi_gmem2_WVALID;
    read_blocks_ap_int_512_U0_ap_continue <= ap_const_logic_1;
    read_blocks_ap_int_512_U0_ap_start <= ((ap_sync_reg_read_blocks_ap_int_512_U0_ap_ready xor ap_const_logic_1) and ap_start);
    read_blocks_ap_int_512_U0_start_full_n <= ap_const_logic_1;
    read_blocks_ap_int_512_U0_start_write <= ap_const_logic_0;
    read_blocks_ap_uint_512_U0_ap_continue <= ap_const_logic_1;
    read_blocks_ap_uint_512_U0_ap_start <= ((ap_sync_reg_read_blocks_ap_uint_512_U0_ap_ready xor ap_const_logic_1) and ap_start);
    read_blocks_ap_uint_512_U0_start_full_n <= ap_const_logic_1;
    read_blocks_ap_uint_512_U0_start_write <= ap_const_logic_0;
    start_for_krnl_idct_dataflow_Block_split25_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_write_blocks_U0_din <= (0=>ap_const_logic_1, others=>'-');
    write_blocks_U0_ap_continue <= ap_continue;
    write_blocks_U0_ap_start <= start_for_write_blocks_U0_empty_n;
    write_blocks_U0_start_full_n <= ap_const_logic_1;
    write_blocks_U0_start_write <= ap_const_logic_0;
end behav;
