// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_idct_krnl_idct_dataflow_entry6 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        block_r,
        q,
        voutp,
        ignore_dc,
        blocks,
        block_out_din,
        block_out_full_n,
        block_out_write,
        q_out_din,
        q_out_full_n,
        q_out_write,
        voutp_out_din,
        voutp_out_full_n,
        voutp_out_write,
        ignore_dc_out_din,
        ignore_dc_out_full_n,
        ignore_dc_out_write,
        blocks_out_din,
        blocks_out_full_n,
        blocks_out_write,
        blocks_out1_din,
        blocks_out1_full_n,
        blocks_out1_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] block_r;
input  [63:0] q;
input  [63:0] voutp;
input  [31:0] ignore_dc;
input  [31:0] blocks;
output  [63:0] block_out_din;
input   block_out_full_n;
output   block_out_write;
output  [63:0] q_out_din;
input   q_out_full_n;
output   q_out_write;
output  [63:0] voutp_out_din;
input   voutp_out_full_n;
output   voutp_out_write;
output  [31:0] ignore_dc_out_din;
input   ignore_dc_out_full_n;
output   ignore_dc_out_write;
output  [30:0] blocks_out_din;
input   blocks_out_full_n;
output   blocks_out_write;
output  [31:0] blocks_out1_din;
input   blocks_out1_full_n;
output   blocks_out1_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg start_write;
reg block_out_write;
reg q_out_write;
reg voutp_out_write;
reg ignore_dc_out_write;
reg blocks_out_write;
reg blocks_out1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    block_out_blk_n;
reg    q_out_blk_n;
reg    voutp_out_blk_n;
reg    ignore_dc_out_blk_n;
reg    blocks_out_blk_n;
reg    blocks_out1_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (blocks_out1_full_n == 1'b0) | (blocks_out_full_n == 1'b0) | (ignore_dc_out_full_n == 1'b0) | (voutp_out_full_n == 1'b0) | (q_out_full_n == 1'b0) | (block_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (blocks_out1_full_n == 1'b0) | (blocks_out_full_n == 1'b0) | (ignore_dc_out_full_n == 1'b0) | (voutp_out_full_n == 1'b0) | (q_out_full_n == 1'b0) | (block_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        block_out_blk_n = block_out_full_n;
    end else begin
        block_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (blocks_out1_full_n == 1'b0) | (blocks_out_full_n == 1'b0) | (ignore_dc_out_full_n == 1'b0) | (voutp_out_full_n == 1'b0) | (q_out_full_n == 1'b0) | (block_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        block_out_write = 1'b1;
    end else begin
        block_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        blocks_out1_blk_n = blocks_out1_full_n;
    end else begin
        blocks_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (blocks_out1_full_n == 1'b0) | (blocks_out_full_n == 1'b0) | (ignore_dc_out_full_n == 1'b0) | (voutp_out_full_n == 1'b0) | (q_out_full_n == 1'b0) | (block_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        blocks_out1_write = 1'b1;
    end else begin
        blocks_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        blocks_out_blk_n = blocks_out_full_n;
    end else begin
        blocks_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (blocks_out1_full_n == 1'b0) | (blocks_out_full_n == 1'b0) | (ignore_dc_out_full_n == 1'b0) | (voutp_out_full_n == 1'b0) | (q_out_full_n == 1'b0) | (block_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        blocks_out_write = 1'b1;
    end else begin
        blocks_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ignore_dc_out_blk_n = ignore_dc_out_full_n;
    end else begin
        ignore_dc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (blocks_out1_full_n == 1'b0) | (blocks_out_full_n == 1'b0) | (ignore_dc_out_full_n == 1'b0) | (voutp_out_full_n == 1'b0) | (q_out_full_n == 1'b0) | (block_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ignore_dc_out_write = 1'b1;
    end else begin
        ignore_dc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (blocks_out1_full_n == 1'b0) | (blocks_out_full_n == 1'b0) | (ignore_dc_out_full_n == 1'b0) | (voutp_out_full_n == 1'b0) | (q_out_full_n == 1'b0) | (block_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        q_out_blk_n = q_out_full_n;
    end else begin
        q_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (blocks_out1_full_n == 1'b0) | (blocks_out_full_n == 1'b0) | (ignore_dc_out_full_n == 1'b0) | (voutp_out_full_n == 1'b0) | (q_out_full_n == 1'b0) | (block_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        q_out_write = 1'b1;
    end else begin
        q_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        voutp_out_blk_n = voutp_out_full_n;
    end else begin
        voutp_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (blocks_out1_full_n == 1'b0) | (blocks_out_full_n == 1'b0) | (ignore_dc_out_full_n == 1'b0) | (voutp_out_full_n == 1'b0) | (q_out_full_n == 1'b0) | (block_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        voutp_out_write = 1'b1;
    end else begin
        voutp_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (blocks_out1_full_n == 1'b0) | (blocks_out_full_n == 1'b0) | (ignore_dc_out_full_n == 1'b0) | (voutp_out_full_n == 1'b0) | (q_out_full_n == 1'b0) | (block_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (voutp_out_blk_n & q_out_blk_n & ignore_dc_out_blk_n & blocks_out_blk_n & blocks_out1_blk_n & block_out_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_ready = internal_ap_ready;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign block_out_din = block_r;

assign blocks_out1_din = blocks;

assign blocks_out_din = blocks[30:0];

assign ignore_dc_out_din = ignore_dc;

assign q_out_din = q;

assign start_out = real_start;

assign voutp_out_din = voutp;

endmodule //krnl_idct_krnl_idct_dataflow_entry6
