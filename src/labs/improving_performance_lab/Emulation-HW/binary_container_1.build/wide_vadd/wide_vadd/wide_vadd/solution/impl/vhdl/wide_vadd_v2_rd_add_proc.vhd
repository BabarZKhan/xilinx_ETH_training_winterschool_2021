-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity wide_vadd_v2_rd_add_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    i_empty_n : IN STD_LOGIC;
    i_read : OUT STD_LOGIC;
    size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    size_empty_n : IN STD_LOGIC;
    size_read : OUT STD_LOGIC;
    v1_local_V1_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    v1_local_V1_empty_n : IN STD_LOGIC;
    v1_local_V1_read : OUT STD_LOGIC;
    v2_local_V2_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    v2_local_V2_empty_n : IN STD_LOGIC;
    v2_local_V2_read : OUT STD_LOGIC;
    out_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    out_r_empty_n : IN STD_LOGIC;
    out_r_read : OUT STD_LOGIC;
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of wide_vadd_v2_rd_add_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (72 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (72 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (72 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (72 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (72 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (72 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (72 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (72 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (72 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (72 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_blk_n : STD_LOGIC;
    signal size_blk_n : STD_LOGIC;
    signal v1_local_V1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln111_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal v2_local_V2_blk_n : STD_LOGIC;
    signal out_r_blk_n : STD_LOGIC;
    signal gmem2_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal gmem2_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln111_reg_829_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal j_reg_195 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_read_reg_782 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal size_read_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln85_3_reg_792 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln98_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln98_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln324_1_reg_802 : STD_LOGIC_VECTOR (57 downto 0);
    signal icmp_ln97_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_807 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln97_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln97_reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln97_fu_326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln97_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln111_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln111_fu_351_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln215_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_1_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_1_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_2_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_2_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_3_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_3_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_4_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_4_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_5_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_5_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_6_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_6_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_7_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_7_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_8_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_8_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_9_fu_599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_9_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_10_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_10_reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_11_fu_651_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_11_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_12_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_12_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_13_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_13_reg_903 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_14_fu_729_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_14_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_15_fu_755_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_15_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal sext_ln324_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sub_ln85_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln324_fu_226_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln324_fu_232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln85_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln85_fu_266_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln85_4_fu_275_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_fu_258_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln85_2_fu_269_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln85_2_fu_285_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln85_fu_289_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln85_fu_297_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln85_2_fu_301_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln97_fu_248_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln88_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln85_1_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln111_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln357_1_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln357_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_i_i_fu_381_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_i_i_fu_371_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_i_i_fu_407_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_i_i_fu_397_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_i_i_fu_433_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_i_i_fu_423_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_i_i_fu_459_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_i_i_fu_449_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_10_i_i_fu_485_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_i_i_fu_475_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_12_i_i_fu_511_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_11_i_i_fu_501_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_14_i_i_fu_537_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_13_i_i_fu_527_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_16_i_i_fu_563_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_15_i_i_fu_553_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_18_i_i_fu_589_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_17_i_i_fu_579_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_20_i_i_fu_615_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_19_i_i_fu_605_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_22_i_i_fu_641_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_21_i_i_fu_631_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_24_i_i_fu_667_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_23_i_i_fu_657_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_26_i_i_fu_693_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_25_i_i_fu_683_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_28_i_i_fu_719_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_27_i_i_fu_709_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_30_i_i_fu_745_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_29_i_i_fu_735_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (72 downto 0);
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state75) and (m_axi_gmem2_BVALID = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (m_axi_gmem2_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (m_axi_gmem2_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (m_axi_gmem2_AWREADY = ap_const_logic_1))) then 
                j_reg_195 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln111_fu_346_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_195 <= add_ln111_fu_351_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln111_reg_829 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln215_10_reg_888 <= add_ln215_10_fu_625_p2;
                add_ln215_11_reg_893 <= add_ln215_11_fu_651_p2;
                add_ln215_12_reg_898 <= add_ln215_12_fu_677_p2;
                add_ln215_13_reg_903 <= add_ln215_13_fu_703_p2;
                add_ln215_14_reg_908 <= add_ln215_14_fu_729_p2;
                add_ln215_15_reg_913 <= add_ln215_15_fu_755_p2;
                add_ln215_1_reg_843 <= add_ln215_1_fu_391_p2;
                add_ln215_2_reg_848 <= add_ln215_2_fu_417_p2;
                add_ln215_3_reg_853 <= add_ln215_3_fu_443_p2;
                add_ln215_4_reg_858 <= add_ln215_4_fu_469_p2;
                add_ln215_5_reg_863 <= add_ln215_5_fu_495_p2;
                add_ln215_6_reg_868 <= add_ln215_6_fu_521_p2;
                add_ln215_7_reg_873 <= add_ln215_7_fu_547_p2;
                add_ln215_8_reg_878 <= add_ln215_8_fu_573_p2;
                add_ln215_9_reg_883 <= add_ln215_9_fu_599_p2;
                add_ln215_reg_838 <= add_ln215_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0) or (size_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i_read_reg_782 <= i_dout;
                size_read_reg_787 <= size_dout;
                trunc_ln324_1_reg_802 <= add_ln324_fu_232_p2(63 downto 6);
                trunc_ln85_3_reg_792 <= sub_ln85_fu_206_p2(31 downto 4);
                trunc_ln98_reg_797 <= trunc_ln98_fu_222_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln111_reg_829 <= icmp_ln111_fu_346_p2;
                icmp_ln111_reg_829_pp0_iter1_reg <= icmp_ln111_reg_829;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln97_reg_807 <= icmp_ln97_fu_311_p2;
                sub_ln97_reg_812 <= sub_ln97_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                select_ln97_reg_817 <= select_ln97_fu_326_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, i_empty_n, size_empty_n, out_r_empty_n, m_axi_gmem2_AWREADY, m_axi_gmem2_BVALID, ap_enable_reg_pp0_iter1, ap_CS_fsm_state4, ap_enable_reg_pp0_iter2, ap_CS_fsm_state75, icmp_ln111_fu_346_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0) or (size_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (m_axi_gmem2_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln111_fu_346_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln111_fu_346_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state75) and (m_axi_gmem2_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln111_fu_351_p2 <= std_logic_vector(unsigned(j_reg_195) + unsigned(ap_const_lv31_1));
    add_ln215_10_fu_625_p2 <= std_logic_vector(unsigned(p_Result_20_i_i_fu_615_p4) + unsigned(p_Result_19_i_i_fu_605_p4));
    add_ln215_11_fu_651_p2 <= std_logic_vector(unsigned(p_Result_22_i_i_fu_641_p4) + unsigned(p_Result_21_i_i_fu_631_p4));
    add_ln215_12_fu_677_p2 <= std_logic_vector(unsigned(p_Result_24_i_i_fu_667_p4) + unsigned(p_Result_23_i_i_fu_657_p4));
    add_ln215_13_fu_703_p2 <= std_logic_vector(unsigned(p_Result_26_i_i_fu_693_p4) + unsigned(p_Result_25_i_i_fu_683_p4));
    add_ln215_14_fu_729_p2 <= std_logic_vector(unsigned(p_Result_28_i_i_fu_719_p4) + unsigned(p_Result_27_i_i_fu_709_p4));
    add_ln215_15_fu_755_p2 <= std_logic_vector(unsigned(p_Result_30_i_i_fu_745_p4) + unsigned(p_Result_29_i_i_fu_735_p4));
    add_ln215_1_fu_391_p2 <= std_logic_vector(unsigned(p_Result_4_i_i_fu_381_p4) + unsigned(p_Result_3_i_i_fu_371_p4));
    add_ln215_2_fu_417_p2 <= std_logic_vector(unsigned(p_Result_7_i_i_fu_407_p4) + unsigned(p_Result_6_i_i_fu_397_p4));
    add_ln215_3_fu_443_p2 <= std_logic_vector(unsigned(p_Result_i_i_fu_433_p4) + unsigned(p_Result_9_i_i_fu_423_p4));
    add_ln215_4_fu_469_p2 <= std_logic_vector(unsigned(p_Result_5_i_i_fu_459_p4) + unsigned(p_Result_2_i_i_fu_449_p4));
    add_ln215_5_fu_495_p2 <= std_logic_vector(unsigned(p_Result_10_i_i_fu_485_p4) + unsigned(p_Result_8_i_i_fu_475_p4));
    add_ln215_6_fu_521_p2 <= std_logic_vector(unsigned(p_Result_12_i_i_fu_511_p4) + unsigned(p_Result_11_i_i_fu_501_p4));
    add_ln215_7_fu_547_p2 <= std_logic_vector(unsigned(p_Result_14_i_i_fu_537_p4) + unsigned(p_Result_13_i_i_fu_527_p4));
    add_ln215_8_fu_573_p2 <= std_logic_vector(unsigned(p_Result_16_i_i_fu_563_p4) + unsigned(p_Result_15_i_i_fu_553_p4));
    add_ln215_9_fu_599_p2 <= std_logic_vector(unsigned(p_Result_18_i_i_fu_589_p4) + unsigned(p_Result_17_i_i_fu_579_p4));
    add_ln215_fu_365_p2 <= std_logic_vector(unsigned(trunc_ln357_1_fu_361_p1) + unsigned(trunc_ln357_fu_357_p1));
    add_ln324_fu_232_p2 <= std_logic_vector(unsigned(shl_ln324_fu_226_p2) + unsigned(out_r_dout));
    add_ln85_2_fu_301_p2 <= std_logic_vector(unsigned(ap_const_lv30_1) + unsigned(sext_ln85_fu_297_p1));
    add_ln85_fu_253_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(size_read_reg_787));
    add_ln97_fu_248_p2 <= std_logic_vector(unsigned(ap_const_lv64_40) + unsigned(i_read_reg_782));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state75 <= ap_CS_fsm(72);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(v1_local_V1_empty_n, v2_local_V2_empty_n, ap_enable_reg_pp0_iter1, icmp_ln111_reg_829)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln111_reg_829 = ap_const_lv1_1) and (v2_local_V2_empty_n = ap_const_logic_0)) or ((icmp_ln111_reg_829 = ap_const_lv1_1) and (v1_local_V1_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(v1_local_V1_empty_n, v2_local_V2_empty_n, ap_enable_reg_pp0_iter1, icmp_ln111_reg_829, ap_enable_reg_pp0_iter2, ap_block_state7_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln111_reg_829 = ap_const_lv1_1) and (v2_local_V2_empty_n = ap_const_logic_0)) or ((icmp_ln111_reg_829 = ap_const_lv1_1) and (v1_local_V1_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(v1_local_V1_empty_n, v2_local_V2_empty_n, ap_enable_reg_pp0_iter1, icmp_ln111_reg_829, ap_enable_reg_pp0_iter2, ap_block_state7_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln111_reg_829 = ap_const_lv1_1) and (v2_local_V2_empty_n = ap_const_logic_0)) or ((icmp_ln111_reg_829 = ap_const_lv1_1) and (v1_local_V1_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, i_empty_n, size_empty_n, out_r_empty_n)
    begin
                ap_block_state1 <= ((i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0) or (size_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter1_assign_proc : process(v1_local_V1_empty_n, v2_local_V2_empty_n, icmp_ln111_reg_829)
    begin
                ap_block_state6_pp0_stage0_iter1 <= (((icmp_ln111_reg_829 = ap_const_lv1_1) and (v2_local_V2_empty_n = ap_const_logic_0)) or ((icmp_ln111_reg_829 = ap_const_lv1_1) and (v1_local_V1_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state7_io_assign_proc : process(m_axi_gmem2_WREADY, icmp_ln111_reg_829_pp0_iter1_reg)
    begin
                ap_block_state7_io <= ((icmp_ln111_reg_829_pp0_iter1_reg = ap_const_lv1_1) and (m_axi_gmem2_WREADY = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln111_fu_346_p2)
    begin
        if ((icmp_ln111_fu_346_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_gmem2_BVALID, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) and (m_axi_gmem2_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_ext_blocking_cur_n <= (gmem2_blk_n_W and gmem2_blk_n_B and gmem2_blk_n_AW);
    ap_ext_blocking_n <= (ap_ext_blocking_cur_n and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (v2_local_V2_blk_n and v1_local_V1_blk_n and size_blk_n and out_r_blk_n and i_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);

    ap_ready_assign_proc : process(m_axi_gmem2_BVALID, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) and (m_axi_gmem2_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    gmem2_blk_n_AW_assign_proc : process(m_axi_gmem2_AWREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gmem2_blk_n_AW <= m_axi_gmem2_AWREADY;
        else 
            gmem2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_B_assign_proc : process(m_axi_gmem2_BVALID, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            gmem2_blk_n_B <= m_axi_gmem2_BVALID;
        else 
            gmem2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_W_assign_proc : process(m_axi_gmem2_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln111_reg_829_pp0_iter1_reg)
    begin
        if (((icmp_ln111_reg_829_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem2_blk_n_W <= m_axi_gmem2_WREADY;
        else 
            gmem2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_blk_n <= i_empty_n;
        else 
            i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_empty_n, size_empty_n, out_r_empty_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0) or (size_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_read <= ap_const_logic_1;
        else 
            i_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln111_fu_346_p2 <= "1" when (signed(zext_ln111_fu_342_p1) < signed(select_ln97_reg_817)) else "0";
    icmp_ln97_fu_311_p2 <= "1" when (signed(add_ln97_fu_248_p2) > signed(sext_ln88_fu_307_p1)) else "0";
    m_axi_gmem2_ARADDR <= ap_const_lv64_0;
    m_axi_gmem2_ARBURST <= ap_const_lv2_0;
    m_axi_gmem2_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem2_ARID <= ap_const_lv1_0;
    m_axi_gmem2_ARLEN <= ap_const_lv32_0;
    m_axi_gmem2_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem2_ARPROT <= ap_const_lv3_0;
    m_axi_gmem2_ARQOS <= ap_const_lv4_0;
    m_axi_gmem2_ARREGION <= ap_const_lv4_0;
    m_axi_gmem2_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem2_ARUSER <= ap_const_lv1_0;
    m_axi_gmem2_ARVALID <= ap_const_logic_0;
    m_axi_gmem2_AWADDR <= sext_ln324_fu_332_p1;
    m_axi_gmem2_AWBURST <= ap_const_lv2_0;
    m_axi_gmem2_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem2_AWID <= ap_const_lv1_0;
    m_axi_gmem2_AWLEN <= select_ln97_reg_817;
    m_axi_gmem2_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem2_AWPROT <= ap_const_lv3_0;
    m_axi_gmem2_AWQOS <= ap_const_lv4_0;
    m_axi_gmem2_AWREGION <= ap_const_lv4_0;
    m_axi_gmem2_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem2_AWUSER <= ap_const_lv1_0;

    m_axi_gmem2_AWVALID_assign_proc : process(m_axi_gmem2_AWREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (m_axi_gmem2_AWREADY = ap_const_logic_1))) then 
            m_axi_gmem2_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem2_BREADY_assign_proc : process(m_axi_gmem2_BVALID, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) and (m_axi_gmem2_BVALID = ap_const_logic_1))) then 
            m_axi_gmem2_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem2_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem2_RREADY <= ap_const_logic_0;
    m_axi_gmem2_WDATA <= (((((((((((((((add_ln215_15_reg_913 & add_ln215_14_reg_908) & add_ln215_13_reg_903) & add_ln215_12_reg_898) & add_ln215_11_reg_893) & add_ln215_10_reg_888) & add_ln215_9_reg_883) & add_ln215_8_reg_878) & add_ln215_7_reg_873) & add_ln215_6_reg_868) & add_ln215_5_reg_863) & add_ln215_4_reg_858) & add_ln215_3_reg_853) & add_ln215_2_reg_848) & add_ln215_1_reg_843) & add_ln215_reg_838);
    m_axi_gmem2_WID <= ap_const_lv1_0;
    m_axi_gmem2_WLAST <= ap_const_logic_0;
    m_axi_gmem2_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_gmem2_WUSER <= ap_const_lv1_0;

    m_axi_gmem2_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln111_reg_829_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln111_reg_829_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem2_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem2_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_r_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_r_blk_n <= out_r_empty_n;
        else 
            out_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_r_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_empty_n, size_empty_n, out_r_empty_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0) or (size_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_r_read <= ap_const_logic_1;
        else 
            out_r_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_i_i_fu_485_p4 <= v2_local_V2_dout(191 downto 160);
    p_Result_11_i_i_fu_501_p4 <= v1_local_V1_dout(223 downto 192);
    p_Result_12_i_i_fu_511_p4 <= v2_local_V2_dout(223 downto 192);
    p_Result_13_i_i_fu_527_p4 <= v1_local_V1_dout(255 downto 224);
    p_Result_14_i_i_fu_537_p4 <= v2_local_V2_dout(255 downto 224);
    p_Result_15_i_i_fu_553_p4 <= v1_local_V1_dout(287 downto 256);
    p_Result_16_i_i_fu_563_p4 <= v2_local_V2_dout(287 downto 256);
    p_Result_17_i_i_fu_579_p4 <= v1_local_V1_dout(319 downto 288);
    p_Result_18_i_i_fu_589_p4 <= v2_local_V2_dout(319 downto 288);
    p_Result_19_i_i_fu_605_p4 <= v1_local_V1_dout(351 downto 320);
    p_Result_20_i_i_fu_615_p4 <= v2_local_V2_dout(351 downto 320);
    p_Result_21_i_i_fu_631_p4 <= v1_local_V1_dout(383 downto 352);
    p_Result_22_i_i_fu_641_p4 <= v2_local_V2_dout(383 downto 352);
    p_Result_23_i_i_fu_657_p4 <= v1_local_V1_dout(415 downto 384);
    p_Result_24_i_i_fu_667_p4 <= v2_local_V2_dout(415 downto 384);
    p_Result_25_i_i_fu_683_p4 <= v1_local_V1_dout(447 downto 416);
    p_Result_26_i_i_fu_693_p4 <= v2_local_V2_dout(447 downto 416);
    p_Result_27_i_i_fu_709_p4 <= v1_local_V1_dout(479 downto 448);
    p_Result_28_i_i_fu_719_p4 <= v2_local_V2_dout(479 downto 448);
    p_Result_29_i_i_fu_735_p4 <= v1_local_V1_dout(511 downto 480);
    p_Result_2_i_i_fu_449_p4 <= v1_local_V1_dout(159 downto 128);
    p_Result_30_i_i_fu_745_p4 <= v2_local_V2_dout(511 downto 480);
    p_Result_3_i_i_fu_371_p4 <= v1_local_V1_dout(63 downto 32);
    p_Result_4_i_i_fu_381_p4 <= v2_local_V2_dout(63 downto 32);
    p_Result_5_i_i_fu_459_p4 <= v2_local_V2_dout(159 downto 128);
    p_Result_6_i_i_fu_397_p4 <= v1_local_V1_dout(95 downto 64);
    p_Result_7_i_i_fu_407_p4 <= v2_local_V2_dout(95 downto 64);
    p_Result_8_i_i_fu_475_p4 <= v1_local_V1_dout(191 downto 160);
    p_Result_9_i_i_fu_423_p4 <= v1_local_V1_dout(127 downto 96);
    p_Result_i_i_fu_433_p4 <= v2_local_V2_dout(127 downto 96);
    select_ln85_fu_289_p3 <= 
        sub_ln85_2_fu_269_p2 when (tmp_fu_258_p3(0) = '1') else 
        zext_ln85_2_fu_285_p1;
    select_ln97_fu_326_p3 <= 
        sub_ln97_reg_812 when (icmp_ln97_reg_807(0) = '1') else 
        ap_const_lv32_40;
        sext_ln324_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln324_1_reg_802),64));

        sext_ln85_1_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln85_2_fu_301_p2),32));

        sext_ln85_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln85_fu_289_p3),30));

        sext_ln88_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln85_2_fu_301_p2),64));

    shl_ln324_fu_226_p2 <= std_logic_vector(shift_left(unsigned(i_dout),to_integer(unsigned('0' & ap_const_lv64_6(31-1 downto 0)))));

    size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, size_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_blk_n <= size_empty_n;
        else 
            size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    size_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_empty_n, size_empty_n, out_r_empty_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0) or (size_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_read <= ap_const_logic_1;
        else 
            size_read <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln85_2_fu_269_p2 <= std_logic_vector(unsigned(ap_const_lv29_0) - unsigned(zext_ln85_fu_266_p1));
    sub_ln85_fu_206_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) - unsigned(size_dout));
    sub_ln97_fu_321_p2 <= std_logic_vector(signed(sext_ln85_1_fu_317_p1) - signed(trunc_ln98_reg_797));
    tmp_fu_258_p3 <= add_ln85_fu_253_p2(31 downto 31);
    trunc_ln357_1_fu_361_p1 <= v2_local_V2_dout(32 - 1 downto 0);
    trunc_ln357_fu_357_p1 <= v1_local_V1_dout(32 - 1 downto 0);
    trunc_ln85_4_fu_275_p4 <= add_ln85_fu_253_p2(31 downto 4);
    trunc_ln98_fu_222_p1 <= i_dout(32 - 1 downto 0);

    v1_local_V1_blk_n_assign_proc : process(v1_local_V1_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln111_reg_829)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln111_reg_829 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            v1_local_V1_blk_n <= v1_local_V1_empty_n;
        else 
            v1_local_V1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    v1_local_V1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln111_reg_829, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln111_reg_829 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            v1_local_V1_read <= ap_const_logic_1;
        else 
            v1_local_V1_read <= ap_const_logic_0;
        end if; 
    end process;


    v2_local_V2_blk_n_assign_proc : process(v2_local_V2_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln111_reg_829)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln111_reg_829 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            v2_local_V2_blk_n <= v2_local_V2_empty_n;
        else 
            v2_local_V2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    v2_local_V2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln111_reg_829, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln111_reg_829 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            v2_local_V2_read <= ap_const_logic_1;
        else 
            v2_local_V2_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln111_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_195),32));
    zext_ln85_2_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln85_4_fu_275_p4),29));
    zext_ln85_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln85_3_reg_792),29));
end behav;
