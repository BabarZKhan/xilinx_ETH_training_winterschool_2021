// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module wide_vadd_v2_rd_add_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        i_dout,
        i_empty_n,
        i_read,
        size_dout,
        size_empty_n,
        size_read,
        v1_local_V1_dout,
        v1_local_V1_empty_n,
        v1_local_V1_read,
        v2_local_V2_dout,
        v2_local_V2_empty_n,
        v2_local_V2_read,
        out_r_dout,
        out_r_empty_n,
        out_r_read,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 73'd1;
parameter    ap_ST_fsm_state2 = 73'd2;
parameter    ap_ST_fsm_state3 = 73'd4;
parameter    ap_ST_fsm_state4 = 73'd8;
parameter    ap_ST_fsm_pp0_stage0 = 73'd16;
parameter    ap_ST_fsm_state8 = 73'd32;
parameter    ap_ST_fsm_state9 = 73'd64;
parameter    ap_ST_fsm_state10 = 73'd128;
parameter    ap_ST_fsm_state11 = 73'd256;
parameter    ap_ST_fsm_state12 = 73'd512;
parameter    ap_ST_fsm_state13 = 73'd1024;
parameter    ap_ST_fsm_state14 = 73'd2048;
parameter    ap_ST_fsm_state15 = 73'd4096;
parameter    ap_ST_fsm_state16 = 73'd8192;
parameter    ap_ST_fsm_state17 = 73'd16384;
parameter    ap_ST_fsm_state18 = 73'd32768;
parameter    ap_ST_fsm_state19 = 73'd65536;
parameter    ap_ST_fsm_state20 = 73'd131072;
parameter    ap_ST_fsm_state21 = 73'd262144;
parameter    ap_ST_fsm_state22 = 73'd524288;
parameter    ap_ST_fsm_state23 = 73'd1048576;
parameter    ap_ST_fsm_state24 = 73'd2097152;
parameter    ap_ST_fsm_state25 = 73'd4194304;
parameter    ap_ST_fsm_state26 = 73'd8388608;
parameter    ap_ST_fsm_state27 = 73'd16777216;
parameter    ap_ST_fsm_state28 = 73'd33554432;
parameter    ap_ST_fsm_state29 = 73'd67108864;
parameter    ap_ST_fsm_state30 = 73'd134217728;
parameter    ap_ST_fsm_state31 = 73'd268435456;
parameter    ap_ST_fsm_state32 = 73'd536870912;
parameter    ap_ST_fsm_state33 = 73'd1073741824;
parameter    ap_ST_fsm_state34 = 73'd2147483648;
parameter    ap_ST_fsm_state35 = 73'd4294967296;
parameter    ap_ST_fsm_state36 = 73'd8589934592;
parameter    ap_ST_fsm_state37 = 73'd17179869184;
parameter    ap_ST_fsm_state38 = 73'd34359738368;
parameter    ap_ST_fsm_state39 = 73'd68719476736;
parameter    ap_ST_fsm_state40 = 73'd137438953472;
parameter    ap_ST_fsm_state41 = 73'd274877906944;
parameter    ap_ST_fsm_state42 = 73'd549755813888;
parameter    ap_ST_fsm_state43 = 73'd1099511627776;
parameter    ap_ST_fsm_state44 = 73'd2199023255552;
parameter    ap_ST_fsm_state45 = 73'd4398046511104;
parameter    ap_ST_fsm_state46 = 73'd8796093022208;
parameter    ap_ST_fsm_state47 = 73'd17592186044416;
parameter    ap_ST_fsm_state48 = 73'd35184372088832;
parameter    ap_ST_fsm_state49 = 73'd70368744177664;
parameter    ap_ST_fsm_state50 = 73'd140737488355328;
parameter    ap_ST_fsm_state51 = 73'd281474976710656;
parameter    ap_ST_fsm_state52 = 73'd562949953421312;
parameter    ap_ST_fsm_state53 = 73'd1125899906842624;
parameter    ap_ST_fsm_state54 = 73'd2251799813685248;
parameter    ap_ST_fsm_state55 = 73'd4503599627370496;
parameter    ap_ST_fsm_state56 = 73'd9007199254740992;
parameter    ap_ST_fsm_state57 = 73'd18014398509481984;
parameter    ap_ST_fsm_state58 = 73'd36028797018963968;
parameter    ap_ST_fsm_state59 = 73'd72057594037927936;
parameter    ap_ST_fsm_state60 = 73'd144115188075855872;
parameter    ap_ST_fsm_state61 = 73'd288230376151711744;
parameter    ap_ST_fsm_state62 = 73'd576460752303423488;
parameter    ap_ST_fsm_state63 = 73'd1152921504606846976;
parameter    ap_ST_fsm_state64 = 73'd2305843009213693952;
parameter    ap_ST_fsm_state65 = 73'd4611686018427387904;
parameter    ap_ST_fsm_state66 = 73'd9223372036854775808;
parameter    ap_ST_fsm_state67 = 73'd18446744073709551616;
parameter    ap_ST_fsm_state68 = 73'd36893488147419103232;
parameter    ap_ST_fsm_state69 = 73'd73786976294838206464;
parameter    ap_ST_fsm_state70 = 73'd147573952589676412928;
parameter    ap_ST_fsm_state71 = 73'd295147905179352825856;
parameter    ap_ST_fsm_state72 = 73'd590295810358705651712;
parameter    ap_ST_fsm_state73 = 73'd1180591620717411303424;
parameter    ap_ST_fsm_state74 = 73'd2361183241434822606848;
parameter    ap_ST_fsm_state75 = 73'd4722366482869645213696;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] i_dout;
input   i_empty_n;
output   i_read;
input  [31:0] size_dout;
input   size_empty_n;
output   size_read;
input  [511:0] v1_local_V1_dout;
input   v1_local_V1_empty_n;
output   v1_local_V1_read;
input  [511:0] v2_local_V2_dout;
input   v2_local_V2_empty_n;
output   v2_local_V2_read;
input  [63:0] out_r_dout;
input   out_r_empty_n;
output   out_r_read;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [63:0] m_axi_gmem2_AWADDR;
output  [0:0] m_axi_gmem2_AWID;
output  [31:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [0:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [511:0] m_axi_gmem2_WDATA;
output  [63:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [0:0] m_axi_gmem2_WID;
output  [0:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [63:0] m_axi_gmem2_ARADDR;
output  [0:0] m_axi_gmem2_ARID;
output  [31:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [0:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [511:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [0:0] m_axi_gmem2_RID;
input  [0:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [0:0] m_axi_gmem2_BID;
input  [0:0] m_axi_gmem2_BUSER;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg i_read;
reg size_read;
reg v1_local_V1_read;
reg v2_local_V2_read;
reg out_r_read;
reg m_axi_gmem2_AWVALID;
reg m_axi_gmem2_WVALID;
reg m_axi_gmem2_BREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [72:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    i_blk_n;
reg    size_blk_n;
reg    v1_local_V1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln111_reg_829;
reg    v2_local_V2_blk_n;
reg    out_r_blk_n;
reg    gmem2_blk_n_AW;
wire    ap_CS_fsm_state4;
reg    gmem2_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln111_reg_829_pp0_iter1_reg;
reg    gmem2_blk_n_B;
wire    ap_CS_fsm_state75;
reg   [30:0] j_reg_195;
reg   [63:0] i_read_reg_782;
reg    ap_block_state1;
reg   [31:0] size_read_reg_787;
reg   [27:0] trunc_ln85_3_reg_792;
wire   [31:0] trunc_ln98_fu_222_p1;
reg   [31:0] trunc_ln98_reg_797;
reg   [57:0] trunc_ln324_1_reg_802;
wire   [0:0] icmp_ln97_fu_311_p2;
reg   [0:0] icmp_ln97_reg_807;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_ln97_fu_321_p2;
reg   [31:0] sub_ln97_reg_812;
wire   [31:0] select_ln97_fu_326_p3;
reg   [31:0] select_ln97_reg_817;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln111_fu_346_p2;
wire    ap_block_state5_pp0_stage0_iter0;
reg    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] add_ln111_fu_351_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] add_ln215_fu_365_p2;
reg   [31:0] add_ln215_reg_838;
wire   [31:0] add_ln215_1_fu_391_p2;
reg   [31:0] add_ln215_1_reg_843;
wire   [31:0] add_ln215_2_fu_417_p2;
reg   [31:0] add_ln215_2_reg_848;
wire   [31:0] add_ln215_3_fu_443_p2;
reg   [31:0] add_ln215_3_reg_853;
wire   [31:0] add_ln215_4_fu_469_p2;
reg   [31:0] add_ln215_4_reg_858;
wire   [31:0] add_ln215_5_fu_495_p2;
reg   [31:0] add_ln215_5_reg_863;
wire   [31:0] add_ln215_6_fu_521_p2;
reg   [31:0] add_ln215_6_reg_868;
wire   [31:0] add_ln215_7_fu_547_p2;
reg   [31:0] add_ln215_7_reg_873;
wire   [31:0] add_ln215_8_fu_573_p2;
reg   [31:0] add_ln215_8_reg_878;
wire   [31:0] add_ln215_9_fu_599_p2;
reg   [31:0] add_ln215_9_reg_883;
wire   [31:0] add_ln215_10_fu_625_p2;
reg   [31:0] add_ln215_10_reg_888;
wire   [31:0] add_ln215_11_fu_651_p2;
reg   [31:0] add_ln215_11_reg_893;
wire   [31:0] add_ln215_12_fu_677_p2;
reg   [31:0] add_ln215_12_reg_898;
wire   [31:0] add_ln215_13_fu_703_p2;
reg   [31:0] add_ln215_13_reg_903;
wire   [31:0] add_ln215_14_fu_729_p2;
reg   [31:0] add_ln215_14_reg_908;
wire   [31:0] add_ln215_15_fu_755_p2;
reg   [31:0] add_ln215_15_reg_913;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
wire  signed [63:0] sext_ln324_fu_332_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] sub_ln85_fu_206_p2;
wire   [63:0] shl_ln324_fu_226_p2;
wire   [63:0] add_ln324_fu_232_p2;
wire   [31:0] add_ln85_fu_253_p2;
wire   [28:0] zext_ln85_fu_266_p1;
wire   [27:0] trunc_ln85_4_fu_275_p4;
wire   [0:0] tmp_fu_258_p3;
wire   [28:0] sub_ln85_2_fu_269_p2;
wire   [28:0] zext_ln85_2_fu_285_p1;
wire   [28:0] select_ln85_fu_289_p3;
wire  signed [29:0] sext_ln85_fu_297_p1;
wire  signed [29:0] add_ln85_2_fu_301_p2;
wire   [63:0] add_ln97_fu_248_p2;
wire  signed [63:0] sext_ln88_fu_307_p1;
wire  signed [31:0] sext_ln85_1_fu_317_p1;
wire   [31:0] zext_ln111_fu_342_p1;
wire   [31:0] trunc_ln357_1_fu_361_p1;
wire   [31:0] trunc_ln357_fu_357_p1;
wire   [31:0] p_Result_4_i_i_fu_381_p4;
wire   [31:0] p_Result_3_i_i_fu_371_p4;
wire   [31:0] p_Result_7_i_i_fu_407_p4;
wire   [31:0] p_Result_6_i_i_fu_397_p4;
wire   [31:0] p_Result_i_i_fu_433_p4;
wire   [31:0] p_Result_9_i_i_fu_423_p4;
wire   [31:0] p_Result_5_i_i_fu_459_p4;
wire   [31:0] p_Result_2_i_i_fu_449_p4;
wire   [31:0] p_Result_10_i_i_fu_485_p4;
wire   [31:0] p_Result_8_i_i_fu_475_p4;
wire   [31:0] p_Result_12_i_i_fu_511_p4;
wire   [31:0] p_Result_11_i_i_fu_501_p4;
wire   [31:0] p_Result_14_i_i_fu_537_p4;
wire   [31:0] p_Result_13_i_i_fu_527_p4;
wire   [31:0] p_Result_16_i_i_fu_563_p4;
wire   [31:0] p_Result_15_i_i_fu_553_p4;
wire   [31:0] p_Result_18_i_i_fu_589_p4;
wire   [31:0] p_Result_17_i_i_fu_579_p4;
wire   [31:0] p_Result_20_i_i_fu_615_p4;
wire   [31:0] p_Result_19_i_i_fu_605_p4;
wire   [31:0] p_Result_22_i_i_fu_641_p4;
wire   [31:0] p_Result_21_i_i_fu_631_p4;
wire   [31:0] p_Result_24_i_i_fu_667_p4;
wire   [31:0] p_Result_23_i_i_fu_657_p4;
wire   [31:0] p_Result_26_i_i_fu_693_p4;
wire   [31:0] p_Result_25_i_i_fu_683_p4;
wire   [31:0] p_Result_28_i_i_fu_719_p4;
wire   [31:0] p_Result_27_i_i_fu_709_p4;
wire   [31:0] p_Result_30_i_i_fu_745_p4;
wire   [31:0] p_Result_29_i_i_fu_735_p4;
reg   [72:0] ap_NS_fsm;
wire    ap_ext_blocking_cur_n;
wire    ap_int_blocking_cur_n;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 73'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem2_BVALID == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (m_axi_gmem2_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state4) & (m_axi_gmem2_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (m_axi_gmem2_AWREADY == 1'b1))) begin
        j_reg_195 <= 31'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_fu_346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_195 <= add_ln111_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln111_reg_829 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln215_10_reg_888 <= add_ln215_10_fu_625_p2;
        add_ln215_11_reg_893 <= add_ln215_11_fu_651_p2;
        add_ln215_12_reg_898 <= add_ln215_12_fu_677_p2;
        add_ln215_13_reg_903 <= add_ln215_13_fu_703_p2;
        add_ln215_14_reg_908 <= add_ln215_14_fu_729_p2;
        add_ln215_15_reg_913 <= add_ln215_15_fu_755_p2;
        add_ln215_1_reg_843 <= add_ln215_1_fu_391_p2;
        add_ln215_2_reg_848 <= add_ln215_2_fu_417_p2;
        add_ln215_3_reg_853 <= add_ln215_3_fu_443_p2;
        add_ln215_4_reg_858 <= add_ln215_4_fu_469_p2;
        add_ln215_5_reg_863 <= add_ln215_5_fu_495_p2;
        add_ln215_6_reg_868 <= add_ln215_6_fu_521_p2;
        add_ln215_7_reg_873 <= add_ln215_7_fu_547_p2;
        add_ln215_8_reg_878 <= add_ln215_8_fu_573_p2;
        add_ln215_9_reg_883 <= add_ln215_9_fu_599_p2;
        add_ln215_reg_838 <= add_ln215_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_r_empty_n == 1'b0) | (size_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_read_reg_782 <= i_dout;
        size_read_reg_787 <= size_dout;
        trunc_ln324_1_reg_802 <= {{add_ln324_fu_232_p2[63:6]}};
        trunc_ln85_3_reg_792 <= {{sub_ln85_fu_206_p2[31:4]}};
        trunc_ln98_reg_797 <= trunc_ln98_fu_222_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln111_reg_829 <= icmp_ln111_fu_346_p2;
        icmp_ln111_reg_829_pp0_iter1_reg <= icmp_ln111_reg_829;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln97_reg_807 <= icmp_ln97_fu_311_p2;
        sub_ln97_reg_812 <= sub_ln97_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        select_ln97_reg_817 <= select_ln97_fu_326_p3;
    end
end

always @ (*) begin
    if ((icmp_ln111_fu_346_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem2_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem2_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln111_reg_829_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem2_blk_n_W = m_axi_gmem2_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_blk_n = i_empty_n;
    end else begin
        i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_r_empty_n == 1'b0) | (size_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_read = 1'b1;
    end else begin
        i_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (m_axi_gmem2_AWREADY == 1'b1))) begin
        m_axi_gmem2_AWVALID = 1'b1;
    end else begin
        m_axi_gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem2_BVALID == 1'b1))) begin
        m_axi_gmem2_BREADY = 1'b1;
    end else begin
        m_axi_gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln111_reg_829_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem2_WVALID = 1'b1;
    end else begin
        m_axi_gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_r_blk_n = out_r_empty_n;
    end else begin
        out_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_r_empty_n == 1'b0) | (size_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_r_read = 1'b1;
    end else begin
        out_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_blk_n = size_empty_n;
    end else begin
        size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_r_empty_n == 1'b0) | (size_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_read = 1'b1;
    end else begin
        size_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln111_reg_829 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        v1_local_V1_blk_n = v1_local_V1_empty_n;
    end else begin
        v1_local_V1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln111_reg_829 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        v1_local_V1_read = 1'b1;
    end else begin
        v1_local_V1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln111_reg_829 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        v2_local_V2_blk_n = v2_local_V2_empty_n;
    end else begin
        v2_local_V2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln111_reg_829 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        v2_local_V2_read = 1'b1;
    end else begin
        v2_local_V2_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_r_empty_n == 1'b0) | (size_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (m_axi_gmem2_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_fu_346_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln111_fu_346_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem2_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln111_fu_351_p2 = (j_reg_195 + 31'd1);

assign add_ln215_10_fu_625_p2 = (p_Result_20_i_i_fu_615_p4 + p_Result_19_i_i_fu_605_p4);

assign add_ln215_11_fu_651_p2 = (p_Result_22_i_i_fu_641_p4 + p_Result_21_i_i_fu_631_p4);

assign add_ln215_12_fu_677_p2 = (p_Result_24_i_i_fu_667_p4 + p_Result_23_i_i_fu_657_p4);

assign add_ln215_13_fu_703_p2 = (p_Result_26_i_i_fu_693_p4 + p_Result_25_i_i_fu_683_p4);

assign add_ln215_14_fu_729_p2 = (p_Result_28_i_i_fu_719_p4 + p_Result_27_i_i_fu_709_p4);

assign add_ln215_15_fu_755_p2 = (p_Result_30_i_i_fu_745_p4 + p_Result_29_i_i_fu_735_p4);

assign add_ln215_1_fu_391_p2 = (p_Result_4_i_i_fu_381_p4 + p_Result_3_i_i_fu_371_p4);

assign add_ln215_2_fu_417_p2 = (p_Result_7_i_i_fu_407_p4 + p_Result_6_i_i_fu_397_p4);

assign add_ln215_3_fu_443_p2 = (p_Result_i_i_fu_433_p4 + p_Result_9_i_i_fu_423_p4);

assign add_ln215_4_fu_469_p2 = (p_Result_5_i_i_fu_459_p4 + p_Result_2_i_i_fu_449_p4);

assign add_ln215_5_fu_495_p2 = (p_Result_10_i_i_fu_485_p4 + p_Result_8_i_i_fu_475_p4);

assign add_ln215_6_fu_521_p2 = (p_Result_12_i_i_fu_511_p4 + p_Result_11_i_i_fu_501_p4);

assign add_ln215_7_fu_547_p2 = (p_Result_14_i_i_fu_537_p4 + p_Result_13_i_i_fu_527_p4);

assign add_ln215_8_fu_573_p2 = (p_Result_16_i_i_fu_563_p4 + p_Result_15_i_i_fu_553_p4);

assign add_ln215_9_fu_599_p2 = (p_Result_18_i_i_fu_589_p4 + p_Result_17_i_i_fu_579_p4);

assign add_ln215_fu_365_p2 = (trunc_ln357_1_fu_361_p1 + trunc_ln357_fu_357_p1);

assign add_ln324_fu_232_p2 = (shl_ln324_fu_226_p2 + out_r_dout);

assign add_ln85_2_fu_301_p2 = ($signed(30'd1) + $signed(sext_ln85_fu_297_p1));

assign add_ln85_fu_253_p2 = ($signed(32'd4294967295) + $signed(size_read_reg_787));

assign add_ln97_fu_248_p2 = (64'd64 + i_read_reg_782);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd72];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln111_reg_829 == 1'd1) & (v2_local_V2_empty_n == 1'b0)) | ((icmp_ln111_reg_829 == 1'd1) & (v1_local_V1_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln111_reg_829 == 1'd1) & (v2_local_V2_empty_n == 1'b0)) | ((icmp_ln111_reg_829 == 1'd1) & (v1_local_V1_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln111_reg_829 == 1'd1) & (v2_local_V2_empty_n == 1'b0)) | ((icmp_ln111_reg_829 == 1'd1) & (v1_local_V1_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (out_r_empty_n == 1'b0) | (size_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = (((icmp_ln111_reg_829 == 1'd1) & (v2_local_V2_empty_n == 1'b0)) | ((icmp_ln111_reg_829 == 1'd1) & (v1_local_V1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state7_io = ((icmp_ln111_reg_829_pp0_iter1_reg == 1'd1) & (m_axi_gmem2_WREADY == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_cur_n = (gmem2_blk_n_W & gmem2_blk_n_B & gmem2_blk_n_AW);

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_cur_n = (v2_local_V2_blk_n & v1_local_V1_blk_n & size_blk_n & out_r_blk_n & i_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign icmp_ln111_fu_346_p2 = (($signed(zext_ln111_fu_342_p1) < $signed(select_ln97_reg_817)) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_311_p2 = (($signed(add_ln97_fu_248_p2) > $signed(sext_ln88_fu_307_p1)) ? 1'b1 : 1'b0);

assign m_axi_gmem2_ARADDR = 64'd0;

assign m_axi_gmem2_ARBURST = 2'd0;

assign m_axi_gmem2_ARCACHE = 4'd0;

assign m_axi_gmem2_ARID = 1'd0;

assign m_axi_gmem2_ARLEN = 32'd0;

assign m_axi_gmem2_ARLOCK = 2'd0;

assign m_axi_gmem2_ARPROT = 3'd0;

assign m_axi_gmem2_ARQOS = 4'd0;

assign m_axi_gmem2_ARREGION = 4'd0;

assign m_axi_gmem2_ARSIZE = 3'd0;

assign m_axi_gmem2_ARUSER = 1'd0;

assign m_axi_gmem2_ARVALID = 1'b0;

assign m_axi_gmem2_AWADDR = sext_ln324_fu_332_p1;

assign m_axi_gmem2_AWBURST = 2'd0;

assign m_axi_gmem2_AWCACHE = 4'd0;

assign m_axi_gmem2_AWID = 1'd0;

assign m_axi_gmem2_AWLEN = select_ln97_reg_817;

assign m_axi_gmem2_AWLOCK = 2'd0;

assign m_axi_gmem2_AWPROT = 3'd0;

assign m_axi_gmem2_AWQOS = 4'd0;

assign m_axi_gmem2_AWREGION = 4'd0;

assign m_axi_gmem2_AWSIZE = 3'd0;

assign m_axi_gmem2_AWUSER = 1'd0;

assign m_axi_gmem2_RREADY = 1'b0;

assign m_axi_gmem2_WDATA = {{{{{{{{{{{{{{{{add_ln215_15_reg_913}, {add_ln215_14_reg_908}}, {add_ln215_13_reg_903}}, {add_ln215_12_reg_898}}, {add_ln215_11_reg_893}}, {add_ln215_10_reg_888}}, {add_ln215_9_reg_883}}, {add_ln215_8_reg_878}}, {add_ln215_7_reg_873}}, {add_ln215_6_reg_868}}, {add_ln215_5_reg_863}}, {add_ln215_4_reg_858}}, {add_ln215_3_reg_853}}, {add_ln215_2_reg_848}}, {add_ln215_1_reg_843}}, {add_ln215_reg_838}};

assign m_axi_gmem2_WID = 1'd0;

assign m_axi_gmem2_WLAST = 1'b0;

assign m_axi_gmem2_WSTRB = 64'd18446744073709551615;

assign m_axi_gmem2_WUSER = 1'd0;

assign p_Result_10_i_i_fu_485_p4 = {{v2_local_V2_dout[191:160]}};

assign p_Result_11_i_i_fu_501_p4 = {{v1_local_V1_dout[223:192]}};

assign p_Result_12_i_i_fu_511_p4 = {{v2_local_V2_dout[223:192]}};

assign p_Result_13_i_i_fu_527_p4 = {{v1_local_V1_dout[255:224]}};

assign p_Result_14_i_i_fu_537_p4 = {{v2_local_V2_dout[255:224]}};

assign p_Result_15_i_i_fu_553_p4 = {{v1_local_V1_dout[287:256]}};

assign p_Result_16_i_i_fu_563_p4 = {{v2_local_V2_dout[287:256]}};

assign p_Result_17_i_i_fu_579_p4 = {{v1_local_V1_dout[319:288]}};

assign p_Result_18_i_i_fu_589_p4 = {{v2_local_V2_dout[319:288]}};

assign p_Result_19_i_i_fu_605_p4 = {{v1_local_V1_dout[351:320]}};

assign p_Result_20_i_i_fu_615_p4 = {{v2_local_V2_dout[351:320]}};

assign p_Result_21_i_i_fu_631_p4 = {{v1_local_V1_dout[383:352]}};

assign p_Result_22_i_i_fu_641_p4 = {{v2_local_V2_dout[383:352]}};

assign p_Result_23_i_i_fu_657_p4 = {{v1_local_V1_dout[415:384]}};

assign p_Result_24_i_i_fu_667_p4 = {{v2_local_V2_dout[415:384]}};

assign p_Result_25_i_i_fu_683_p4 = {{v1_local_V1_dout[447:416]}};

assign p_Result_26_i_i_fu_693_p4 = {{v2_local_V2_dout[447:416]}};

assign p_Result_27_i_i_fu_709_p4 = {{v1_local_V1_dout[479:448]}};

assign p_Result_28_i_i_fu_719_p4 = {{v2_local_V2_dout[479:448]}};

assign p_Result_29_i_i_fu_735_p4 = {{v1_local_V1_dout[511:480]}};

assign p_Result_2_i_i_fu_449_p4 = {{v1_local_V1_dout[159:128]}};

assign p_Result_30_i_i_fu_745_p4 = {{v2_local_V2_dout[511:480]}};

assign p_Result_3_i_i_fu_371_p4 = {{v1_local_V1_dout[63:32]}};

assign p_Result_4_i_i_fu_381_p4 = {{v2_local_V2_dout[63:32]}};

assign p_Result_5_i_i_fu_459_p4 = {{v2_local_V2_dout[159:128]}};

assign p_Result_6_i_i_fu_397_p4 = {{v1_local_V1_dout[95:64]}};

assign p_Result_7_i_i_fu_407_p4 = {{v2_local_V2_dout[95:64]}};

assign p_Result_8_i_i_fu_475_p4 = {{v1_local_V1_dout[191:160]}};

assign p_Result_9_i_i_fu_423_p4 = {{v1_local_V1_dout[127:96]}};

assign p_Result_i_i_fu_433_p4 = {{v2_local_V2_dout[127:96]}};

assign select_ln85_fu_289_p3 = ((tmp_fu_258_p3[0:0] === 1'b1) ? sub_ln85_2_fu_269_p2 : zext_ln85_2_fu_285_p1);

assign select_ln97_fu_326_p3 = ((icmp_ln97_reg_807[0:0] === 1'b1) ? sub_ln97_reg_812 : 32'd64);

assign sext_ln324_fu_332_p1 = $signed(trunc_ln324_1_reg_802);

assign sext_ln85_1_fu_317_p1 = add_ln85_2_fu_301_p2;

assign sext_ln85_fu_297_p1 = $signed(select_ln85_fu_289_p3);

assign sext_ln88_fu_307_p1 = add_ln85_2_fu_301_p2;

assign shl_ln324_fu_226_p2 = i_dout << 64'd6;

assign sub_ln85_2_fu_269_p2 = (29'd0 - zext_ln85_fu_266_p1);

assign sub_ln85_fu_206_p2 = (32'd1 - size_dout);

assign sub_ln97_fu_321_p2 = ($signed(sext_ln85_1_fu_317_p1) - $signed(trunc_ln98_reg_797));

assign tmp_fu_258_p3 = add_ln85_fu_253_p2[32'd31];

assign trunc_ln357_1_fu_361_p1 = v2_local_V2_dout[31:0];

assign trunc_ln357_fu_357_p1 = v1_local_V1_dout[31:0];

assign trunc_ln85_4_fu_275_p4 = {{add_ln85_fu_253_p2[31:4]}};

assign trunc_ln98_fu_222_p1 = i_dout[31:0];

assign zext_ln111_fu_342_p1 = j_reg_195;

assign zext_ln85_2_fu_285_p1 = trunc_ln85_4_fu_275_p4;

assign zext_ln85_fu_266_p1 = trunc_ln85_3_reg_792;

endmodule //wide_vadd_v2_rd_add_proc
