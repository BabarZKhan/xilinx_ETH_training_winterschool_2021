dbg_puts "----------------------------------------------------------------------"
dbg_puts "BEGIN: GENERATE_BOUNDARY_AXI_PASSTHROUGH"

if {[dict exists $CONFIG dsa_info axi_passthrough]} {
  set passthrough_config [dict get $CONFIG dsa_info axi_passthrough]

  set num_passthrough_ports [llength $passthrough_config]
  set i 0
  dict for {bank bank_config} $passthrough_config {
    set pidx [format M%.2d_AXI $i]

    dbg_puts "-- Processing: $bank <$bank_config>"
    # Declare SI address segments for later generation
    dict set CONFIG segment_map ${pidx}_MEM00 offset [dict get $bank_config offset]
    dict set CONFIG segment_map ${pidx}_MEM00 range  [dict get $bank_config range]    

    set port_names $pidx
    if {[dict exists $bank_config multipath_level]} {
    	set port_names {}
    	set multipath_level [dict get $bank_config multipath_level]
    	for {set j 0} {$j < $multipath_level} {incr j} {
    		lappend port_names ${pidx}_MP[format %.2d $j]
    	}
    }

    foreach name $port_names {
	    # Create MI Port
	    set mi [create_bd_intf_port -vlnv xilinx.com:interface:aximm_rtl:1.0 -default_portmap -mode master $name]

	    set addr_width [clog_range [dict get $bank_config range]]

	    if {[info exists env(SDX_FORCE_MI_ADDR_WIDTH_64)]} {
	      set addr_width 64
	      dbg_puts "WORKAROUND: forcing $mi ADDR_WIDTH to $addr_width"
	    }
	    set_property CONFIG.ADDR_WIDTH $addr_width $mi    	
    }

    incr i
  }

} else {
  dbg_puts "No AXI Passthrough Information found in DSA INFO.  No passthrough ports generated."
}

dbg_puts "updated segment-map: [dict get $CONFIG segment_map]"

dbg_puts "END: GENERATE_BOUNDARY_AXI_PASSTHROUGH"
dbg_puts "----------------------------------------------------------------------"
