namespace eval sdx_graph {
  proc transpose { adjacency_list } {
    set transposed_adjacencies {}
    dict for {vertex vertex_adjacencies} $adjacency_list {  
      foreach a $vertex_adjacencies {
        set g {}
        if {[dict exists $adjacency_list $a]} { set g [dict get $adjacency_list $a] }
        lappend g $vertex
        dict lappend transposed_adjacencies $a {*}$g
      }
    }
    return $transposed_adjacencies
  }

  proc bft { graph starting_schedule {visitation_proc {}} {max_iter 100} } {
    set schedule $starting_schedule 
    set visited {}
    set iter 0

    while {[llength $schedule] > 0 && [incr iter] < $max_iter } {
      dbg_puts "----------------------------------------------------------------------"
      dbg_puts "Iteration $iter"
      dbg_puts ""
      set next_schedule {}
      foreach vertex $schedule {
        dbg_puts "Visiting: $vertex"
        if {[llength $visitation_proc] == 1} {
          set graph [$visitation_proc $graph $vertex]
        }
        dict set visited $vertex $iter

        if {![dict exists $graph adjacency_list $vertex]} { continue }
        set adj [dict get $graph adjacency_list $vertex]    
        dbg_puts "Scheduling Adjacencies:"
        foreach a $adj {
          if {[dict exists $visited $a]} {
            dbg_puts "\tSkipping: $a (visited in iter [dict get $visited $a])"
            continue
          }
          if {![dict exists $visited $a] && [lsearch -exact $next_schedule $a] == -1 } {
            dbg_puts "\tScheduling $a"
            lappend next_schedule {*}$a
          } else {
            dbg_puts "\tSkipping $a (already in $next_schedule)"
          }
        }    
      }
      set schedule $next_schedule
    }
    return $graph
  }

  proc print {graph {props {}}} {
    dict with graph {
      dict for { v a } $adjacency_list { 
        set l {}
        foreach p $props {
          if {[dict exists $vertex_props $v $p]} {
            lappend l "$p: [dict get $vertex_props $v $p]"
          } else {
            lappend l  "$p: UNDEFINED"
          }
        }
        puts "$v ([join $l {, }]) -> $a" 
      }
    }
  }
}
