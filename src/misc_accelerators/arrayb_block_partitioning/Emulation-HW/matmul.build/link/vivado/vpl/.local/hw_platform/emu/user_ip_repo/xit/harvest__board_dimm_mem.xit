dbg_puts "----------------------------------------------------------------------"
dbg_puts "BEGIN: HARVEST__BOARD_DIMM_MEM"

set ddr_components [get_board_components -filter {sub_type==ddr}]
if {[llength $ddr_components] == 0} {
  dbg_puts "No ddr_components found"
  return
}
dbg_puts "ddr_components:\n\t[join $ddr_components \n\t]"

set dimm_connectors [get_board_components -filter {type==connector && sub_type==dimm}]
if {[llength $dimm_connectors] == 0} {
  send_msg ERROR 1 "Could not find any DIMM connector declarations in board file."
  return
}
dbg_puts "dimm_connectors:\n\t[join $dimm_connectors \n\t]"

foreach ddr_component $ddr_components {
  dbg_puts "Processing: $ddr_component"

  set ddr_size [get_property PARAM.size $ddr_component]
  if {[llength $ddr_size] != 1} {
    dbg_puts "ERROR: invalid DDR SIZE specified for ddr_component: $ddr_component. Found: $ddr_size"
    break
  }
  if {[regexp {(\d+)(\w)} $ddr_size {} ddr_size_val ddr_size_type]} { 
    set ddr_size_type [string toupper $ddr_size_type]
    if {![string match {[GMT]} $ddr_size_type]} {
      send_msg ERROR 1 "Invalid board paramaters detected.   Board component $board_component size ($ddr_size) is not in a recognized format"
      return
    }
  } else {
    send_msg ERROR 1 "Invalid size specification on ddr_component ($ddr_component): $ddr_size"
    return
  }
#  dbg_puts "SIZE: $ddr_size"
  
  set ddr_component_mode [board::get_board_component_modes -of $ddr_component]
  if {[llength $ddr_component_mode] != 1} {
    dbg_puts "ERROR: cannot find component mode for DDR component $ddr_component"
    break
  }
#  dbg_puts "OK: ddr_component_mode: $ddr_component_mode"
  
  set ddr_component_interfaces [get_property INTERFACES $ddr_component_mode]
  if {[llength $ddr_component_interfaces] != 1} {
    dbg_puts "ERROR: Expected one interface in ddr_component_mode: $ddr_component_mode, recovered [llength $ddr_component_interfaces]"
    break
  }
#  dbg_puts "OK: ddr_component_interfaces: $ddr_component_interfaces"

  set ddr_component_interface [board::get_board_component_interfaces $ddr_component_interfaces -of [current_board_part]]
  if {[llength $ddr_component_interface] == 0} {
    dbg_puts "ERROR: Lookup of ddr component interface $ddr_component_interfaces from ddr_compoenent_mode: $ddr_component_mode failed"
    break
  }
#  dbg_puts "OK: ddr_component_interface: $ddr_component_interface"

  set ddr_preset_name [get_property PRESETS $ddr_component_interface]
  if {[llength $ddr_preset_name] != 1} {
    dbg_puts "ERROR: Expected one preset name specified on ddr_component_interface $ddr_component_interface.  Found [llength $ddr_preset_name]."
    break
  }
#  dbg_puts "OK: ddr_preset_name: $ddr_preset_name"
  
  set ddr_preset [xilinx::board::get_board_presets $ddr_preset_name]
  if {[llength $ddr_preset] != 1} {
    dbg_puts "ERROR: Lookup of ddr_preset_name: $ddr_preset_name failed.  Expected 1, found [llength $ddr_preset]"
    break
  }
#  dbg_puts "OK: ddr_preset: $ddr_preset"  
  
#  foreach p [list_property $ddr_preset CONFIG.*] { 
#    dbg_puts "INFO: $p [get_property $p $ddr_preset]"
#  }
  
  # DO THIS WHEN THE BASEBOARD DIMM CONNECTOR NAME IS ACQUIRED
  #foreach p [list_property $ddr_preset CONFIG.*] {
  #  dict set board_info $bcn preset $p [get_property $p $ddr_preset]
  #}
  
  set ddr_component_bus [board::get_board_buses -of $ddr_component]
  if {[llength $ddr_component_bus] != 1} {
    dbg_puts "ERROR: Failed to lookup bus of ddr_component: $ddr_component.   Expected 1 item, found [llength $ddr_component_bus]"
    break
  }
#  dbg_puts "OK: ddr_component_bus: $ddr_component_bus"
  
  set daughtercard_connector [board::get_board_components -of $ddr_component_bus -filter {type==connector && sub_type==dimm}]
  if {[llength $daughtercard_connector] != 1} {
    dbg_puts "ERROR: Failed to lookup daughtercard dimm connector from ddr_component_bus ($ddr_component_bus).  Found [llength $daughtercard_buses]."
    break        
  }
#  dbg_puts "OK: daughtercard_connector: $daughtercard_connector"
  
  set daughtercard_buses [board::get_board_buses -of $daughtercard_connector]
  if {[llength $daughtercard_buses] != 2} {
    dbg_puts "ERROR: Expected 2 board bus objects associated with daughtercard dimm connector ($daughtercard_connector).  Found [llength $daughtercard_buses]."
    break
  }
#  dbg_puts "OK: daughtercard_buses: $daughtercard_buses"
  
  # Which of the two buses associated with the daughtercard connector attaches to the baseboard connector?
  set dimm_bus {}
  foreach bus $daughtercard_buses {
    if {$bus != $ddr_component_bus} {
      set dimm_bus $bus
    }
  }      
  if {[llength $dimm_bus] != 1} {
    dbg_puts "ERROR: Failed to identify dimm_bus from $daughtercard_buses."
    break
  }
#  dbg_puts "OK: dimm_bus: $dimm_bus"
  
  set dimm_bus_components [board::get_board_components -of $dimm_bus]
  if {[llength $dimm_bus_components] != 2} {
    dbg_puts "ERROR: Failed to recover expected board components from dimm_bus ($dimm_bus).   Expected 2 components, recovered [llength $baseboard_bus_components] ($baseboard_bus_components)."
    break
  }
#  dbg_puts "OK: dimm_bus_components: $dimm_bus_components"
  
  # Which component is the baseboard connector?
  set baseboard_connector {}
  foreach component $dimm_bus_components {
    if {$component != $daughtercard_connector} {
      set baseboard_connector $component
    }
  }
  
  if {[llength $baseboard_connector] != 1} {
    dbg_puts "ERROR: Failed to identify baseboard connector from dimm_bus_components ($dimm_bus_components)."
    break
  }
#  dbg_puts "OK: baseboard_connector: $baseboard_connector"
  
  set ddr_slr [get_property PARAM.SLR $baseboard_connector]
  if {[llength $ddr_slr] != 1} {
    dbg_puts "ERROR: Failed to identify SLR association of baseboard connector $baseboard_connector."
    break
  }
  
  #TODO: VALIDATE SLR TOKEN
#  dbg_puts "SLR: $ddr_slr"
  
  set baseboard_connector_component_mode [board::get_board_component_modes -of $baseboard_connector]
  if {[llength $baseboard_connector_component_mode] != 1} {
    dbg_puts "ERROR: Failed lookup of baseboard component mode for baseboard connector ($baseboard_connector).   Found: <$baseboard_connector_component_mode>."
    break
  }
#  dbg_puts "OK: baseboard_connector_component_mode: $baseboard_connector_component_mode"
  
  set baseboard_connector_interface_names [get_property INTERFACES $baseboard_connector_component_mode]
  if {[llength $baseboard_connector_interface_names] != 1} {
    dbg_puts "ERROR: Failed lookup of baseboard connector interface names.   Expected 1, found: <$baseboard_connector_interface_names>."
    break
  }
#  dbg_puts "OK: baseboard_connector_interface_names: $baseboard_connector_interface_names"
  
  set baseboard_connector_interface [board::get_board_component_interfaces $baseboard_connector_interface_names -of [current_board_part]]
  if {[llength $baseboard_connector_interface] != 1} {
    dbg_puts "ERROR: Lookup of baseboard connector interface by name ($baseboard_connector_interface_names) failed.  Expected 1 object, received $baseboard_connector_interface."
    break
  }
#  dbg_puts "OK: baseboard_connector_interface: $baseboard_connector_interface"
  
  if {![string match "xilinx.com:interface:diff_clock_rtl:*" [get_property VLNV $baseboard_connector_interface]]} {
    dbg_puts "ERROR: baseboard_connector_interface ($baseboard_connector_interface) is not a differential clock."
    break;
  }

  set frequency [get_property PARAM.frequency $baseboard_connector_interface]
  if {[llength $frequency] != 1} {
    dbg_puts "ERROR: invalid frequency specified for baseboard clock interface: $baseboard_connector_interface. Found: $frequency"
    break
  }
  
#  dbg_puts "OK: Differential clock vlnv."

  set bcn [get_property NAME $baseboard_connector]
#  dbg_puts "bcn: $bcn"
  
  lassign [split $bcn :] bcn_vendor bcn_board bcn bcn_version
#  dbg_puts "bcn: $bcn"
  
  # TODO: MOVE TO ADVANCED_PROPERTIES HIDDEN KEY
  if {[dict exists $CONFIG dsa_info excluded_board_components]} {
    set excluded_board_components [dict get $CONFIG dsa_info excluded_board_components]
    if {[lsearch -exact [dict get $CONFIG dsa_info excluded_board_components] $bcn] != -1} {
      dbg_puts "Board component $bcn has been excluded in dsa_info..."
      continue
    }
  }
  
  dict set board_info $bcn component_properties size $ddr_size
  dbg_puts "Size: $ddr_size"

  dict set board_info $bcn component_properties slr $ddr_slr
  dbg_puts "SLR: $ddr_slr"

  dict set board_info $bcn component_properties frequency $frequency
  dbg_puts "Frequency: $frequency"

  dict set board_info $bcn ddr_component_intf $ddr_component_interface
  dict set board_info $bcn ddr_clock_intf $baseboard_connector_interface
  dict set CONFIG dsa_info board_component_slr_map $bcn $ddr_slr
  foreach p [list_property $ddr_preset CONFIG.*] {
    dict set board_info $bcn preset $p [get_property $p $ddr_preset]      
  }

  if {[dict exists $board_info $bcn preset CONFIG.C0.DDR4_Ecc]} {
    if {[string match -nocase true [dict get $board_info $bcn preset CONFIG.C0.DDR4_Ecc]]} {
      dbg_puts "ECC: enabled"
    }
  }
}

# -----------------------------------------------------------------------------------------
# Can't determine stable ordering of board component names until baseboard connector names
# are extracted...
set i 0
foreach bcn [lsort [dict keys $board_info]] {
  set bank_name [format DDR4_MEM%.2d $i]
  dict set CONFIG segment_map $bank_name range $ddr_size
  
  if {[dict exists $board_info $bcn preset CONFIG.C0.DDR4_Ecc]} {
    if {[string match -nocase true [dict get $board_info $bcn preset CONFIG.C0.DDR4_Ecc]]} {
      set ddr4_ecc_enabled 1
    
      # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      # TODO:  Override the control segment size?
      # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      dict set CONFIG ctrl_segment_map $bank_name 64K
    }
  }  

  dict set CONFIG segment_map $bank_name range [dict get $board_info $bcn component_properties size]
  dict set mem_bank_component_map $bank_name $bcn
  dict set mem_bank_slr_map $bank_name [dict get $board_info $bcn component_properties slr] 

#  dbg_puts "Resource name: $bank_name"
  dict set CONFIG resource_names $bank_name 1
  incr i

}

dbg_brk
dbg_puts "board_info: $board_info"
dbg_puts "END: HARVEST__BOARD_DIMM_MEM"
dbg_puts "----------------------------------------------------------------------"
